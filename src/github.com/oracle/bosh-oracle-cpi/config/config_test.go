package config

import (
	"errors"

	. "github.com/onsi/ginkgo"
	. "github.com/onsi/gomega"

	fakesys "github.com/cloudfoundry/bosh-utils/system/fakes"

	"encoding/json"
	"github.com/oracle/bosh-oracle-cpi/registry"
	"os"
	"strings"
	"testing"
)

var apiKeyFile = strings.Replace("~/.oci/oci_api_key.pem", "~", os.Getenv("HOME"), -1)
var validOCIConfig = OCIProperties{
	Tenancy:       "Fake-tenancy-ocid",
	User:          "user-ocid",
	CompartmentID: "fake-compartment-id",
	APIKeyFile:    apiKeyFile,
	CpiKeyFile:    "/path/to/generated/configdir/cpikey.pem",
	CpiUser:       "fake-provisioned-user",
	AuthorizedKeys: AuthorizedKeys{
		Cpi:  "ssh-rsa pub key generated by create-env",
		User: "ssh-rsa user key",
	},
	Fingerprint: "fake-fingerprint",
}

var forwardSSHTunnel = SSHTunnel{
	User: "opc", LocalPort: 36868, Duration: "2m",
}
var validOCIConfigWithSSHTunnel = OCIProperties{
	Tenancy:       "Fake-tenancy-ocid",
	User:          "user-ocid",
	CompartmentID: "fake-compartment-id",
	APIKeyFile:    apiKeyFile,
	CpiKeyFile:    "/path/to/generated/configdir/cpikey.pem",
	CpiUser:       "fake-provisioned-user",
	AuthorizedKeys: AuthorizedKeys{
		Cpi: "ssh-rsa fake key",
	},
	Fingerprint: "fake-fingerprint",
	SSHTunnel:   forwardSSHTunnel,
}

var validAgentOptions = registry.AgentOptions{
	Mbus: "fake-mbus",
	Ntp:  []string{},
	Blobstore: registry.BlobstoreOptions{
		Provider: "fake-blobstore-type",
	},
}

var validRegistryOptions = registry.ClientOptions{
	Protocol: "http",
	Host:     "fake-host",
	Port:     5555,
	Username: "fake-username",
	Password: "fake-password",
}

var validConfig = Config{
	Cloud: Cloud{
		Plugin: "oracle",
		Properties: CPIProperties{
			OCI:      validOCIConfig,
			Agent:    validAgentOptions,
			Registry: validRegistryOptions,
		},
	},
}

var validConfigWithSSH = Config{
	Cloud: Cloud{
		Plugin: "oracle",
		Properties: CPIProperties{
			OCI:      validOCIConfigWithSSHTunnel,
			Agent:    validAgentOptions,
			Registry: validRegistryOptions,
		},
	},
}

var _ = Describe("NewConfigFromPath", func() {
	var (
		fs *fakesys.FakeFileSystem
	)

	BeforeEach(func() {
		fs = fakesys.NewFakeFileSystem()
	})

	It("returns error if config is empty", func() {
		_, err := NewConfigFromPath("", fs)
		Expect(err).To(HaveOccurred())
		Expect(err.Error()).To(ContainSubstring("Must provide a config file"))
	})

	It("returns error if config is not valid", func() {
		err := fs.WriteFileString("/config.json", "{}")
		Expect(err).ToNot(HaveOccurred())

		_, err = NewConfigFromPath("/config.json", fs)
		Expect(err).To(HaveOccurred())
		Expect(err.Error()).To(ContainSubstring("Validating config"))
	})

	It("returns error if file contains invalid json", func() {
		err := fs.WriteFileString("/config.json", "-")
		Expect(err).ToNot(HaveOccurred())

		_, err = NewConfigFromPath("/config.json", fs)
		Expect(err).To(HaveOccurred())
		Expect(err.Error()).To(ContainSubstring("Unmarshalling config"))
	})

	It("returns error if file cannot be read", func() {
		err := fs.WriteFileString("/config.json", "{}")
		Expect(err).ToNot(HaveOccurred())

		fs.ReadFileError = errors.New("fake-read-err")

		_, err = NewConfigFromPath("/config.json", fs)
		Expect(err).To(HaveOccurred())
		Expect(err.Error()).To(ContainSubstring("fake-read-err"))
	})
})

var _ = Describe("Config", func() {
	var (
		config Config
	)
	Describe("Validate", func() {
		BeforeEach(func() {
			config = validConfig
		})

		It("does not return error if all sections are valid", func() {
			err := config.Validate()
			Expect(err).ToNot(HaveOccurred())
		})

		It("returns error if OCI properties section is not valid", func() {
			config.Cloud.Properties.OCI = OCIProperties{}

			err := config.Validate()
			Expect(err).To(HaveOccurred())
			Expect(err.Error()).To(ContainSubstring("Validating oci configuration"))
		})

		It("returns error if agent configuration is not valid", func() {

			config.Cloud.Properties.Agent = registry.AgentOptions{}
			config.Cloud.Properties.Registry = registry.ClientOptions{}

			err := config.Validate()
			Expect(err).To(HaveOccurred())
			Expect(err.Error()).To(ContainSubstring("Validating agent configuration"))
		})
	})
})

var _ = Describe("Config", func() {
	var (
		config Config
	)

	Describe("Validate", func() {
		BeforeEach(func() {
			config = validConfigWithSSH
		})

		It("does not return error if all sections are valid", func() {
			err := config.Validate()
			Expect(err).ToNot(HaveOccurred())
		})
	})
})

var _ = Describe("DefaultOCIProperties", func() {
	var (
		ociProperties OCIProperties
	)

	Describe("DefaultSSHConfig", func() {
		BeforeEach(func() {
			ociProperties = validOCIConfig
		})

		It("checks default configuration uses private IP for ssh", func() {
			Expect(ociProperties.CpiSSHConfig().usePublicIP).To(BeFalse())
		})
	})
})

func TestConfig_Validate(t *testing.T) {
	b, err := json.MarshalIndent(validConfig, "", "")
	if err != nil {
		t.FailNow()
	}
	t.Logf("Marshalled struct %s\n", string(b))
}

func TestConfigWithSSHTunnel_Validate(t *testing.T) {
	b, err := json.MarshalIndent(validConfigWithSSH, "", "")
	if err != nil {
		t.FailNow()
	}
	t.Logf("Marshalled struct %s\n", string(b))
}
