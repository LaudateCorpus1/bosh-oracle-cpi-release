// Code generated by go-swagger; DO NOT EDIT.

package compute

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "oracle/oci/core/models"
)

// DeleteInstanceConsoleConnectionReader is a Reader for the DeleteInstanceConsoleConnection structure.
type DeleteInstanceConsoleConnectionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteInstanceConsoleConnectionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 204:
		result := NewDeleteInstanceConsoleConnectionNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewDeleteInstanceConsoleConnectionBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewDeleteInstanceConsoleConnectionUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewDeleteInstanceConsoleConnectionNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 412:
		result := NewDeleteInstanceConsoleConnectionPreconditionFailed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewDeleteInstanceConsoleConnectionInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewDeleteInstanceConsoleConnectionDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewDeleteInstanceConsoleConnectionNoContent creates a DeleteInstanceConsoleConnectionNoContent with default headers values
func NewDeleteInstanceConsoleConnectionNoContent() *DeleteInstanceConsoleConnectionNoContent {
	return &DeleteInstanceConsoleConnectionNoContent{}
}

/*DeleteInstanceConsoleConnectionNoContent handles this case with default header values.

The instance console connection is being deleted.
*/
type DeleteInstanceConsoleConnectionNoContent struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string
}

func (o *DeleteInstanceConsoleConnectionNoContent) Error() string {
	return fmt.Sprintf("[DELETE /instanceConsoleConnections/{instanceConsoleConnectionId}][%d] deleteInstanceConsoleConnectionNoContent ", 204)
}

func (o *DeleteInstanceConsoleConnectionNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	return nil
}

// NewDeleteInstanceConsoleConnectionBadRequest creates a DeleteInstanceConsoleConnectionBadRequest with default headers values
func NewDeleteInstanceConsoleConnectionBadRequest() *DeleteInstanceConsoleConnectionBadRequest {
	return &DeleteInstanceConsoleConnectionBadRequest{}
}

/*DeleteInstanceConsoleConnectionBadRequest handles this case with default header values.

Bad Request
*/
type DeleteInstanceConsoleConnectionBadRequest struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *DeleteInstanceConsoleConnectionBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /instanceConsoleConnections/{instanceConsoleConnectionId}][%d] deleteInstanceConsoleConnectionBadRequest  %+v", 400, o.Payload)
}

func (o *DeleteInstanceConsoleConnectionBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteInstanceConsoleConnectionUnauthorized creates a DeleteInstanceConsoleConnectionUnauthorized with default headers values
func NewDeleteInstanceConsoleConnectionUnauthorized() *DeleteInstanceConsoleConnectionUnauthorized {
	return &DeleteInstanceConsoleConnectionUnauthorized{}
}

/*DeleteInstanceConsoleConnectionUnauthorized handles this case with default header values.

Unauthorized
*/
type DeleteInstanceConsoleConnectionUnauthorized struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *DeleteInstanceConsoleConnectionUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /instanceConsoleConnections/{instanceConsoleConnectionId}][%d] deleteInstanceConsoleConnectionUnauthorized  %+v", 401, o.Payload)
}

func (o *DeleteInstanceConsoleConnectionUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteInstanceConsoleConnectionNotFound creates a DeleteInstanceConsoleConnectionNotFound with default headers values
func NewDeleteInstanceConsoleConnectionNotFound() *DeleteInstanceConsoleConnectionNotFound {
	return &DeleteInstanceConsoleConnectionNotFound{}
}

/*DeleteInstanceConsoleConnectionNotFound handles this case with default header values.

Not Found
*/
type DeleteInstanceConsoleConnectionNotFound struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *DeleteInstanceConsoleConnectionNotFound) Error() string {
	return fmt.Sprintf("[DELETE /instanceConsoleConnections/{instanceConsoleConnectionId}][%d] deleteInstanceConsoleConnectionNotFound  %+v", 404, o.Payload)
}

func (o *DeleteInstanceConsoleConnectionNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteInstanceConsoleConnectionPreconditionFailed creates a DeleteInstanceConsoleConnectionPreconditionFailed with default headers values
func NewDeleteInstanceConsoleConnectionPreconditionFailed() *DeleteInstanceConsoleConnectionPreconditionFailed {
	return &DeleteInstanceConsoleConnectionPreconditionFailed{}
}

/*DeleteInstanceConsoleConnectionPreconditionFailed handles this case with default header values.

Precondition Failed
*/
type DeleteInstanceConsoleConnectionPreconditionFailed struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *DeleteInstanceConsoleConnectionPreconditionFailed) Error() string {
	return fmt.Sprintf("[DELETE /instanceConsoleConnections/{instanceConsoleConnectionId}][%d] deleteInstanceConsoleConnectionPreconditionFailed  %+v", 412, o.Payload)
}

func (o *DeleteInstanceConsoleConnectionPreconditionFailed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteInstanceConsoleConnectionInternalServerError creates a DeleteInstanceConsoleConnectionInternalServerError with default headers values
func NewDeleteInstanceConsoleConnectionInternalServerError() *DeleteInstanceConsoleConnectionInternalServerError {
	return &DeleteInstanceConsoleConnectionInternalServerError{}
}

/*DeleteInstanceConsoleConnectionInternalServerError handles this case with default header values.

Internal Server Error
*/
type DeleteInstanceConsoleConnectionInternalServerError struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *DeleteInstanceConsoleConnectionInternalServerError) Error() string {
	return fmt.Sprintf("[DELETE /instanceConsoleConnections/{instanceConsoleConnectionId}][%d] deleteInstanceConsoleConnectionInternalServerError  %+v", 500, o.Payload)
}

func (o *DeleteInstanceConsoleConnectionInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteInstanceConsoleConnectionDefault creates a DeleteInstanceConsoleConnectionDefault with default headers values
func NewDeleteInstanceConsoleConnectionDefault(code int) *DeleteInstanceConsoleConnectionDefault {
	return &DeleteInstanceConsoleConnectionDefault{
		_statusCode: code,
	}
}

/*DeleteInstanceConsoleConnectionDefault handles this case with default header values.

An error has occurred.
*/
type DeleteInstanceConsoleConnectionDefault struct {
	_statusCode int

	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

// Code gets the status code for the delete instance console connection default response
func (o *DeleteInstanceConsoleConnectionDefault) Code() int {
	return o._statusCode
}

func (o *DeleteInstanceConsoleConnectionDefault) Error() string {
	return fmt.Sprintf("[DELETE /instanceConsoleConnections/{instanceConsoleConnectionId}][%d] DeleteInstanceConsoleConnection default  %+v", o._statusCode, o.Payload)
}

func (o *DeleteInstanceConsoleConnectionDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
