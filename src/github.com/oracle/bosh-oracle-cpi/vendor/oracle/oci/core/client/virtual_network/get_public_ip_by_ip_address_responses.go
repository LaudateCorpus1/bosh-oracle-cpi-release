// Code generated by go-swagger; DO NOT EDIT.

package virtual_network

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "oracle/oci/core/models"
)

// GetPublicIPByIPAddressReader is a Reader for the GetPublicIPByIPAddress structure.
type GetPublicIPByIPAddressReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetPublicIPByIPAddressReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetPublicIPByIPAddressOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewGetPublicIPByIPAddressBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewGetPublicIPByIPAddressUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewGetPublicIPByIPAddressNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewGetPublicIPByIPAddressInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewGetPublicIPByIPAddressDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetPublicIPByIPAddressOK creates a GetPublicIPByIPAddressOK with default headers values
func NewGetPublicIPByIPAddressOK() *GetPublicIPByIPAddressOK {
	return &GetPublicIPByIPAddressOK{}
}

/*GetPublicIPByIPAddressOK handles this case with default header values.

The public IP was retrieved.
*/
type GetPublicIPByIPAddressOK struct {
	/*For optimistic concurrency control. See `if-match`.
	 */
	Etag string
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about a
	particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.PublicIP
}

func (o *GetPublicIPByIPAddressOK) Error() string {
	return fmt.Sprintf("[POST /publicIps/actions/getByIpAddress][%d] getPublicIpByIpAddressOK  %+v", 200, o.Payload)
}

func (o *GetPublicIPByIPAddressOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header etag
	o.Etag = response.GetHeader("etag")

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.PublicIP)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetPublicIPByIPAddressBadRequest creates a GetPublicIPByIPAddressBadRequest with default headers values
func NewGetPublicIPByIPAddressBadRequest() *GetPublicIPByIPAddressBadRequest {
	return &GetPublicIPByIPAddressBadRequest{}
}

/*GetPublicIPByIPAddressBadRequest handles this case with default header values.

Bad Request
*/
type GetPublicIPByIPAddressBadRequest struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *GetPublicIPByIPAddressBadRequest) Error() string {
	return fmt.Sprintf("[POST /publicIps/actions/getByIpAddress][%d] getPublicIpByIpAddressBadRequest  %+v", 400, o.Payload)
}

func (o *GetPublicIPByIPAddressBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetPublicIPByIPAddressUnauthorized creates a GetPublicIPByIPAddressUnauthorized with default headers values
func NewGetPublicIPByIPAddressUnauthorized() *GetPublicIPByIPAddressUnauthorized {
	return &GetPublicIPByIPAddressUnauthorized{}
}

/*GetPublicIPByIPAddressUnauthorized handles this case with default header values.

Unauthorized
*/
type GetPublicIPByIPAddressUnauthorized struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *GetPublicIPByIPAddressUnauthorized) Error() string {
	return fmt.Sprintf("[POST /publicIps/actions/getByIpAddress][%d] getPublicIpByIpAddressUnauthorized  %+v", 401, o.Payload)
}

func (o *GetPublicIPByIPAddressUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetPublicIPByIPAddressNotFound creates a GetPublicIPByIPAddressNotFound with default headers values
func NewGetPublicIPByIPAddressNotFound() *GetPublicIPByIPAddressNotFound {
	return &GetPublicIPByIPAddressNotFound{}
}

/*GetPublicIPByIPAddressNotFound handles this case with default header values.

Not Found
*/
type GetPublicIPByIPAddressNotFound struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *GetPublicIPByIPAddressNotFound) Error() string {
	return fmt.Sprintf("[POST /publicIps/actions/getByIpAddress][%d] getPublicIpByIpAddressNotFound  %+v", 404, o.Payload)
}

func (o *GetPublicIPByIPAddressNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetPublicIPByIPAddressInternalServerError creates a GetPublicIPByIPAddressInternalServerError with default headers values
func NewGetPublicIPByIPAddressInternalServerError() *GetPublicIPByIPAddressInternalServerError {
	return &GetPublicIPByIPAddressInternalServerError{}
}

/*GetPublicIPByIPAddressInternalServerError handles this case with default header values.

Internal Server Error
*/
type GetPublicIPByIPAddressInternalServerError struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *GetPublicIPByIPAddressInternalServerError) Error() string {
	return fmt.Sprintf("[POST /publicIps/actions/getByIpAddress][%d] getPublicIpByIpAddressInternalServerError  %+v", 500, o.Payload)
}

func (o *GetPublicIPByIPAddressInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetPublicIPByIPAddressDefault creates a GetPublicIPByIPAddressDefault with default headers values
func NewGetPublicIPByIPAddressDefault(code int) *GetPublicIPByIPAddressDefault {
	return &GetPublicIPByIPAddressDefault{
		_statusCode: code,
	}
}

/*GetPublicIPByIPAddressDefault handles this case with default header values.

An error has occurred.
*/
type GetPublicIPByIPAddressDefault struct {
	_statusCode int

	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

// Code gets the status code for the get public Ip by Ip address default response
func (o *GetPublicIPByIPAddressDefault) Code() int {
	return o._statusCode
}

func (o *GetPublicIPByIPAddressDefault) Error() string {
	return fmt.Sprintf("[POST /publicIps/actions/getByIpAddress][%d] GetPublicIpByIpAddress default  %+v", o._statusCode, o.Payload)
}

func (o *GetPublicIPByIPAddressDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
