// Code generated by go-swagger; DO NOT EDIT.

package virtual_network

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "oracle/oci/core/models"
)

// UpdatePublicIPReader is a Reader for the UpdatePublicIP structure.
type UpdatePublicIPReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdatePublicIPReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewUpdatePublicIPOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewUpdatePublicIPBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewUpdatePublicIPUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewUpdatePublicIPNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 412:
		result := NewUpdatePublicIPPreconditionFailed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewUpdatePublicIPInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewUpdatePublicIPDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewUpdatePublicIPOK creates a UpdatePublicIPOK with default headers values
func NewUpdatePublicIPOK() *UpdatePublicIPOK {
	return &UpdatePublicIPOK{}
}

/*UpdatePublicIPOK handles this case with default header values.

The public IP was updated.
*/
type UpdatePublicIPOK struct {
	/*For optimistic concurrency control. See `if-match`.
	 */
	Etag string
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.PublicIP
}

func (o *UpdatePublicIPOK) Error() string {
	return fmt.Sprintf("[PUT /publicIps/{publicIpId}][%d] updatePublicIpOK  %+v", 200, o.Payload)
}

func (o *UpdatePublicIPOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header etag
	o.Etag = response.GetHeader("etag")

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.PublicIP)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdatePublicIPBadRequest creates a UpdatePublicIPBadRequest with default headers values
func NewUpdatePublicIPBadRequest() *UpdatePublicIPBadRequest {
	return &UpdatePublicIPBadRequest{}
}

/*UpdatePublicIPBadRequest handles this case with default header values.

Bad Request
*/
type UpdatePublicIPBadRequest struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *UpdatePublicIPBadRequest) Error() string {
	return fmt.Sprintf("[PUT /publicIps/{publicIpId}][%d] updatePublicIpBadRequest  %+v", 400, o.Payload)
}

func (o *UpdatePublicIPBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdatePublicIPUnauthorized creates a UpdatePublicIPUnauthorized with default headers values
func NewUpdatePublicIPUnauthorized() *UpdatePublicIPUnauthorized {
	return &UpdatePublicIPUnauthorized{}
}

/*UpdatePublicIPUnauthorized handles this case with default header values.

Unauthorized
*/
type UpdatePublicIPUnauthorized struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *UpdatePublicIPUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /publicIps/{publicIpId}][%d] updatePublicIpUnauthorized  %+v", 401, o.Payload)
}

func (o *UpdatePublicIPUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdatePublicIPNotFound creates a UpdatePublicIPNotFound with default headers values
func NewUpdatePublicIPNotFound() *UpdatePublicIPNotFound {
	return &UpdatePublicIPNotFound{}
}

/*UpdatePublicIPNotFound handles this case with default header values.

Not Found
*/
type UpdatePublicIPNotFound struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *UpdatePublicIPNotFound) Error() string {
	return fmt.Sprintf("[PUT /publicIps/{publicIpId}][%d] updatePublicIpNotFound  %+v", 404, o.Payload)
}

func (o *UpdatePublicIPNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdatePublicIPPreconditionFailed creates a UpdatePublicIPPreconditionFailed with default headers values
func NewUpdatePublicIPPreconditionFailed() *UpdatePublicIPPreconditionFailed {
	return &UpdatePublicIPPreconditionFailed{}
}

/*UpdatePublicIPPreconditionFailed handles this case with default header values.

Precondition Failed
*/
type UpdatePublicIPPreconditionFailed struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *UpdatePublicIPPreconditionFailed) Error() string {
	return fmt.Sprintf("[PUT /publicIps/{publicIpId}][%d] updatePublicIpPreconditionFailed  %+v", 412, o.Payload)
}

func (o *UpdatePublicIPPreconditionFailed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdatePublicIPInternalServerError creates a UpdatePublicIPInternalServerError with default headers values
func NewUpdatePublicIPInternalServerError() *UpdatePublicIPInternalServerError {
	return &UpdatePublicIPInternalServerError{}
}

/*UpdatePublicIPInternalServerError handles this case with default header values.

Internal Server Error
*/
type UpdatePublicIPInternalServerError struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *UpdatePublicIPInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /publicIps/{publicIpId}][%d] updatePublicIpInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdatePublicIPInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdatePublicIPDefault creates a UpdatePublicIPDefault with default headers values
func NewUpdatePublicIPDefault(code int) *UpdatePublicIPDefault {
	return &UpdatePublicIPDefault{
		_statusCode: code,
	}
}

/*UpdatePublicIPDefault handles this case with default header values.

An error has occurred.
*/
type UpdatePublicIPDefault struct {
	_statusCode int

	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

// Code gets the status code for the update public Ip default response
func (o *UpdatePublicIPDefault) Code() int {
	return o._statusCode
}

func (o *UpdatePublicIPDefault) Error() string {
	return fmt.Sprintf("[PUT /publicIps/{publicIpId}][%d] UpdatePublicIp default  %+v", o._statusCode, o.Payload)
}

func (o *UpdatePublicIPDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
