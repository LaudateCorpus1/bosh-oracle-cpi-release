// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// VolumeBackupSchedule Defines a chronological recurrence pattern for creating scheduled backups at a particular periodicity.
// swagger:model VolumeBackupSchedule
type VolumeBackupSchedule struct {

	// The type of backup to create.
	// Required: true
	BackupType *string `json:"backupType"`

	// The number of seconds (positive or negative) that the backup time should be shifted from the default interval boundaries specified by the period.
	// Required: true
	OffsetSeconds *int64 `json:"offsetSeconds"`

	// How often the backup should occur.
	// Required: true
	Period *string `json:"period"`

	// How long, in seconds, backups created by this schedule should be kept until being automatically deleted.
	// Required: true
	// Minimum: 3600
	RetentionSeconds *int64 `json:"retentionSeconds"`
}

// Validate validates this volume backup schedule
func (m *VolumeBackupSchedule) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBackupType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateOffsetSeconds(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePeriod(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateRetentionSeconds(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var volumeBackupScheduleTypeBackupTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["FULL","INCREMENTAL"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		volumeBackupScheduleTypeBackupTypePropEnum = append(volumeBackupScheduleTypeBackupTypePropEnum, v)
	}
}

const (

	// VolumeBackupScheduleBackupTypeFULL captures enum value "FULL"
	VolumeBackupScheduleBackupTypeFULL string = "FULL"

	// VolumeBackupScheduleBackupTypeINCREMENTAL captures enum value "INCREMENTAL"
	VolumeBackupScheduleBackupTypeINCREMENTAL string = "INCREMENTAL"
)

// prop value enum
func (m *VolumeBackupSchedule) validateBackupTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, volumeBackupScheduleTypeBackupTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *VolumeBackupSchedule) validateBackupType(formats strfmt.Registry) error {

	if err := validate.Required("backupType", "body", m.BackupType); err != nil {
		return err
	}

	// value enum
	if err := m.validateBackupTypeEnum("backupType", "body", *m.BackupType); err != nil {
		return err
	}

	return nil
}

func (m *VolumeBackupSchedule) validateOffsetSeconds(formats strfmt.Registry) error {

	if err := validate.Required("offsetSeconds", "body", m.OffsetSeconds); err != nil {
		return err
	}

	return nil
}

var volumeBackupScheduleTypePeriodPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ONE_HOUR","ONE_DAY","ONE_WEEK","ONE_MONTH","ONE_YEAR"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		volumeBackupScheduleTypePeriodPropEnum = append(volumeBackupScheduleTypePeriodPropEnum, v)
	}
}

const (

	// VolumeBackupSchedulePeriodONEHOUR captures enum value "ONE_HOUR"
	VolumeBackupSchedulePeriodONEHOUR string = "ONE_HOUR"

	// VolumeBackupSchedulePeriodONEDAY captures enum value "ONE_DAY"
	VolumeBackupSchedulePeriodONEDAY string = "ONE_DAY"

	// VolumeBackupSchedulePeriodONEWEEK captures enum value "ONE_WEEK"
	VolumeBackupSchedulePeriodONEWEEK string = "ONE_WEEK"

	// VolumeBackupSchedulePeriodONEMONTH captures enum value "ONE_MONTH"
	VolumeBackupSchedulePeriodONEMONTH string = "ONE_MONTH"

	// VolumeBackupSchedulePeriodONEYEAR captures enum value "ONE_YEAR"
	VolumeBackupSchedulePeriodONEYEAR string = "ONE_YEAR"
)

// prop value enum
func (m *VolumeBackupSchedule) validatePeriodEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, volumeBackupScheduleTypePeriodPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *VolumeBackupSchedule) validatePeriod(formats strfmt.Registry) error {

	if err := validate.Required("period", "body", m.Period); err != nil {
		return err
	}

	// value enum
	if err := m.validatePeriodEnum("period", "body", *m.Period); err != nil {
		return err
	}

	return nil
}

func (m *VolumeBackupSchedule) validateRetentionSeconds(formats strfmt.Registry) error {

	if err := validate.Required("retentionSeconds", "body", m.RetentionSeconds); err != nil {
		return err
	}

	if err := validate.MinimumInt("retentionSeconds", "body", int64(*m.RetentionSeconds), 3600, false); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *VolumeBackupSchedule) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VolumeBackupSchedule) UnmarshalBinary(b []byte) error {
	var res VolumeBackupSchedule
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
