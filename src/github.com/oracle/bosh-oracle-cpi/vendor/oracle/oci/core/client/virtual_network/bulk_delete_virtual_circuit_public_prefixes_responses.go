// Code generated by go-swagger; DO NOT EDIT.

package virtual_network

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "oracle/oci/core/models"
)

// BulkDeleteVirtualCircuitPublicPrefixesReader is a Reader for the BulkDeleteVirtualCircuitPublicPrefixes structure.
type BulkDeleteVirtualCircuitPublicPrefixesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *BulkDeleteVirtualCircuitPublicPrefixesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 204:
		result := NewBulkDeleteVirtualCircuitPublicPrefixesNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewBulkDeleteVirtualCircuitPublicPrefixesBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewBulkDeleteVirtualCircuitPublicPrefixesUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewBulkDeleteVirtualCircuitPublicPrefixesNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewBulkDeleteVirtualCircuitPublicPrefixesInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewBulkDeleteVirtualCircuitPublicPrefixesDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewBulkDeleteVirtualCircuitPublicPrefixesNoContent creates a BulkDeleteVirtualCircuitPublicPrefixesNoContent with default headers values
func NewBulkDeleteVirtualCircuitPublicPrefixesNoContent() *BulkDeleteVirtualCircuitPublicPrefixesNoContent {
	return &BulkDeleteVirtualCircuitPublicPrefixesNoContent{}
}

/*BulkDeleteVirtualCircuitPublicPrefixesNoContent handles this case with default header values.

Deletion of public prefixes accepted.
*/
type BulkDeleteVirtualCircuitPublicPrefixesNoContent struct {
}

func (o *BulkDeleteVirtualCircuitPublicPrefixesNoContent) Error() string {
	return fmt.Sprintf("[POST /virtualCircuits/{virtualCircuitId}/actions/bulkDeletePublicPrefixes][%d] bulkDeleteVirtualCircuitPublicPrefixesNoContent ", 204)
}

func (o *BulkDeleteVirtualCircuitPublicPrefixesNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewBulkDeleteVirtualCircuitPublicPrefixesBadRequest creates a BulkDeleteVirtualCircuitPublicPrefixesBadRequest with default headers values
func NewBulkDeleteVirtualCircuitPublicPrefixesBadRequest() *BulkDeleteVirtualCircuitPublicPrefixesBadRequest {
	return &BulkDeleteVirtualCircuitPublicPrefixesBadRequest{}
}

/*BulkDeleteVirtualCircuitPublicPrefixesBadRequest handles this case with default header values.

Bad Request
*/
type BulkDeleteVirtualCircuitPublicPrefixesBadRequest struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *BulkDeleteVirtualCircuitPublicPrefixesBadRequest) Error() string {
	return fmt.Sprintf("[POST /virtualCircuits/{virtualCircuitId}/actions/bulkDeletePublicPrefixes][%d] bulkDeleteVirtualCircuitPublicPrefixesBadRequest  %+v", 400, o.Payload)
}

func (o *BulkDeleteVirtualCircuitPublicPrefixesBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewBulkDeleteVirtualCircuitPublicPrefixesUnauthorized creates a BulkDeleteVirtualCircuitPublicPrefixesUnauthorized with default headers values
func NewBulkDeleteVirtualCircuitPublicPrefixesUnauthorized() *BulkDeleteVirtualCircuitPublicPrefixesUnauthorized {
	return &BulkDeleteVirtualCircuitPublicPrefixesUnauthorized{}
}

/*BulkDeleteVirtualCircuitPublicPrefixesUnauthorized handles this case with default header values.

Unauthorized
*/
type BulkDeleteVirtualCircuitPublicPrefixesUnauthorized struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *BulkDeleteVirtualCircuitPublicPrefixesUnauthorized) Error() string {
	return fmt.Sprintf("[POST /virtualCircuits/{virtualCircuitId}/actions/bulkDeletePublicPrefixes][%d] bulkDeleteVirtualCircuitPublicPrefixesUnauthorized  %+v", 401, o.Payload)
}

func (o *BulkDeleteVirtualCircuitPublicPrefixesUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewBulkDeleteVirtualCircuitPublicPrefixesNotFound creates a BulkDeleteVirtualCircuitPublicPrefixesNotFound with default headers values
func NewBulkDeleteVirtualCircuitPublicPrefixesNotFound() *BulkDeleteVirtualCircuitPublicPrefixesNotFound {
	return &BulkDeleteVirtualCircuitPublicPrefixesNotFound{}
}

/*BulkDeleteVirtualCircuitPublicPrefixesNotFound handles this case with default header values.

Not Found
*/
type BulkDeleteVirtualCircuitPublicPrefixesNotFound struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *BulkDeleteVirtualCircuitPublicPrefixesNotFound) Error() string {
	return fmt.Sprintf("[POST /virtualCircuits/{virtualCircuitId}/actions/bulkDeletePublicPrefixes][%d] bulkDeleteVirtualCircuitPublicPrefixesNotFound  %+v", 404, o.Payload)
}

func (o *BulkDeleteVirtualCircuitPublicPrefixesNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewBulkDeleteVirtualCircuitPublicPrefixesInternalServerError creates a BulkDeleteVirtualCircuitPublicPrefixesInternalServerError with default headers values
func NewBulkDeleteVirtualCircuitPublicPrefixesInternalServerError() *BulkDeleteVirtualCircuitPublicPrefixesInternalServerError {
	return &BulkDeleteVirtualCircuitPublicPrefixesInternalServerError{}
}

/*BulkDeleteVirtualCircuitPublicPrefixesInternalServerError handles this case with default header values.

Internal Server Error
*/
type BulkDeleteVirtualCircuitPublicPrefixesInternalServerError struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *BulkDeleteVirtualCircuitPublicPrefixesInternalServerError) Error() string {
	return fmt.Sprintf("[POST /virtualCircuits/{virtualCircuitId}/actions/bulkDeletePublicPrefixes][%d] bulkDeleteVirtualCircuitPublicPrefixesInternalServerError  %+v", 500, o.Payload)
}

func (o *BulkDeleteVirtualCircuitPublicPrefixesInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewBulkDeleteVirtualCircuitPublicPrefixesDefault creates a BulkDeleteVirtualCircuitPublicPrefixesDefault with default headers values
func NewBulkDeleteVirtualCircuitPublicPrefixesDefault(code int) *BulkDeleteVirtualCircuitPublicPrefixesDefault {
	return &BulkDeleteVirtualCircuitPublicPrefixesDefault{
		_statusCode: code,
	}
}

/*BulkDeleteVirtualCircuitPublicPrefixesDefault handles this case with default header values.

An error has occurred.
*/
type BulkDeleteVirtualCircuitPublicPrefixesDefault struct {
	_statusCode int

	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

// Code gets the status code for the bulk delete virtual circuit public prefixes default response
func (o *BulkDeleteVirtualCircuitPublicPrefixesDefault) Code() int {
	return o._statusCode
}

func (o *BulkDeleteVirtualCircuitPublicPrefixesDefault) Error() string {
	return fmt.Sprintf("[POST /virtualCircuits/{virtualCircuitId}/actions/bulkDeletePublicPrefixes][%d] BulkDeleteVirtualCircuitPublicPrefixes default  %+v", o._statusCode, o.Payload)
}

func (o *BulkDeleteVirtualCircuitPublicPrefixesDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
