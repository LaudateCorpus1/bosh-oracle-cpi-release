// Code generated by go-swagger; DO NOT EDIT.

package virtual_network

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "oracle/oci/core/models"
)

// ListFastConnectProviderVirtualCircuitBandwidthShapesReader is a Reader for the ListFastConnectProviderVirtualCircuitBandwidthShapes structure.
type ListFastConnectProviderVirtualCircuitBandwidthShapesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ListFastConnectProviderVirtualCircuitBandwidthShapesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewListFastConnectProviderVirtualCircuitBandwidthShapesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewListFastConnectProviderVirtualCircuitBandwidthShapesBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewListFastConnectProviderVirtualCircuitBandwidthShapesUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewListFastConnectProviderVirtualCircuitBandwidthShapesNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewListFastConnectProviderVirtualCircuitBandwidthShapesInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewListFastConnectProviderVirtualCircuitBandwidthShapesDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewListFastConnectProviderVirtualCircuitBandwidthShapesOK creates a ListFastConnectProviderVirtualCircuitBandwidthShapesOK with default headers values
func NewListFastConnectProviderVirtualCircuitBandwidthShapesOK() *ListFastConnectProviderVirtualCircuitBandwidthShapesOK {
	return &ListFastConnectProviderVirtualCircuitBandwidthShapesOK{}
}

/*ListFastConnectProviderVirtualCircuitBandwidthShapesOK handles this case with default header values.

The list is being retrieved.
*/
type ListFastConnectProviderVirtualCircuitBandwidthShapesOK struct {
	/*For pagination of a list of items. When paging through a list, if this header appears in the response,
	then a partial list might have been returned. Include this value as the `page` parameter for the
	subsequent GET request to get the next batch of items.

	*/
	OpcNextPage string
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload []*models.VirtualCircuitBandwidthShape
}

func (o *ListFastConnectProviderVirtualCircuitBandwidthShapesOK) Error() string {
	return fmt.Sprintf("[GET /fastConnectProviderServices/{providerServiceId}/virtualCircuitBandwidthShapes][%d] listFastConnectProviderVirtualCircuitBandwidthShapesOK  %+v", 200, o.Payload)
}

func (o *ListFastConnectProviderVirtualCircuitBandwidthShapesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-next-page
	o.OpcNextPage = response.GetHeader("opc-next-page")

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListFastConnectProviderVirtualCircuitBandwidthShapesBadRequest creates a ListFastConnectProviderVirtualCircuitBandwidthShapesBadRequest with default headers values
func NewListFastConnectProviderVirtualCircuitBandwidthShapesBadRequest() *ListFastConnectProviderVirtualCircuitBandwidthShapesBadRequest {
	return &ListFastConnectProviderVirtualCircuitBandwidthShapesBadRequest{}
}

/*ListFastConnectProviderVirtualCircuitBandwidthShapesBadRequest handles this case with default header values.

Bad Request
*/
type ListFastConnectProviderVirtualCircuitBandwidthShapesBadRequest struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *ListFastConnectProviderVirtualCircuitBandwidthShapesBadRequest) Error() string {
	return fmt.Sprintf("[GET /fastConnectProviderServices/{providerServiceId}/virtualCircuitBandwidthShapes][%d] listFastConnectProviderVirtualCircuitBandwidthShapesBadRequest  %+v", 400, o.Payload)
}

func (o *ListFastConnectProviderVirtualCircuitBandwidthShapesBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListFastConnectProviderVirtualCircuitBandwidthShapesUnauthorized creates a ListFastConnectProviderVirtualCircuitBandwidthShapesUnauthorized with default headers values
func NewListFastConnectProviderVirtualCircuitBandwidthShapesUnauthorized() *ListFastConnectProviderVirtualCircuitBandwidthShapesUnauthorized {
	return &ListFastConnectProviderVirtualCircuitBandwidthShapesUnauthorized{}
}

/*ListFastConnectProviderVirtualCircuitBandwidthShapesUnauthorized handles this case with default header values.

Unauthorized
*/
type ListFastConnectProviderVirtualCircuitBandwidthShapesUnauthorized struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *ListFastConnectProviderVirtualCircuitBandwidthShapesUnauthorized) Error() string {
	return fmt.Sprintf("[GET /fastConnectProviderServices/{providerServiceId}/virtualCircuitBandwidthShapes][%d] listFastConnectProviderVirtualCircuitBandwidthShapesUnauthorized  %+v", 401, o.Payload)
}

func (o *ListFastConnectProviderVirtualCircuitBandwidthShapesUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListFastConnectProviderVirtualCircuitBandwidthShapesNotFound creates a ListFastConnectProviderVirtualCircuitBandwidthShapesNotFound with default headers values
func NewListFastConnectProviderVirtualCircuitBandwidthShapesNotFound() *ListFastConnectProviderVirtualCircuitBandwidthShapesNotFound {
	return &ListFastConnectProviderVirtualCircuitBandwidthShapesNotFound{}
}

/*ListFastConnectProviderVirtualCircuitBandwidthShapesNotFound handles this case with default header values.

Not Found
*/
type ListFastConnectProviderVirtualCircuitBandwidthShapesNotFound struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *ListFastConnectProviderVirtualCircuitBandwidthShapesNotFound) Error() string {
	return fmt.Sprintf("[GET /fastConnectProviderServices/{providerServiceId}/virtualCircuitBandwidthShapes][%d] listFastConnectProviderVirtualCircuitBandwidthShapesNotFound  %+v", 404, o.Payload)
}

func (o *ListFastConnectProviderVirtualCircuitBandwidthShapesNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListFastConnectProviderVirtualCircuitBandwidthShapesInternalServerError creates a ListFastConnectProviderVirtualCircuitBandwidthShapesInternalServerError with default headers values
func NewListFastConnectProviderVirtualCircuitBandwidthShapesInternalServerError() *ListFastConnectProviderVirtualCircuitBandwidthShapesInternalServerError {
	return &ListFastConnectProviderVirtualCircuitBandwidthShapesInternalServerError{}
}

/*ListFastConnectProviderVirtualCircuitBandwidthShapesInternalServerError handles this case with default header values.

Internal Server Error
*/
type ListFastConnectProviderVirtualCircuitBandwidthShapesInternalServerError struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *ListFastConnectProviderVirtualCircuitBandwidthShapesInternalServerError) Error() string {
	return fmt.Sprintf("[GET /fastConnectProviderServices/{providerServiceId}/virtualCircuitBandwidthShapes][%d] listFastConnectProviderVirtualCircuitBandwidthShapesInternalServerError  %+v", 500, o.Payload)
}

func (o *ListFastConnectProviderVirtualCircuitBandwidthShapesInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListFastConnectProviderVirtualCircuitBandwidthShapesDefault creates a ListFastConnectProviderVirtualCircuitBandwidthShapesDefault with default headers values
func NewListFastConnectProviderVirtualCircuitBandwidthShapesDefault(code int) *ListFastConnectProviderVirtualCircuitBandwidthShapesDefault {
	return &ListFastConnectProviderVirtualCircuitBandwidthShapesDefault{
		_statusCode: code,
	}
}

/*ListFastConnectProviderVirtualCircuitBandwidthShapesDefault handles this case with default header values.

An error has occurred.
*/
type ListFastConnectProviderVirtualCircuitBandwidthShapesDefault struct {
	_statusCode int

	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

// Code gets the status code for the list fast connect provider virtual circuit bandwidth shapes default response
func (o *ListFastConnectProviderVirtualCircuitBandwidthShapesDefault) Code() int {
	return o._statusCode
}

func (o *ListFastConnectProviderVirtualCircuitBandwidthShapesDefault) Error() string {
	return fmt.Sprintf("[GET /fastConnectProviderServices/{providerServiceId}/virtualCircuitBandwidthShapes][%d] ListFastConnectProviderVirtualCircuitBandwidthShapes default  %+v", o._statusCode, o.Payload)
}

func (o *ListFastConnectProviderVirtualCircuitBandwidthShapesDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
