// Code generated by go-swagger; DO NOT EDIT.

package virtual_network

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "oracle/oci/core/models"
)

// DeletePublicIPReader is a Reader for the DeletePublicIP structure.
type DeletePublicIPReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeletePublicIPReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 204:
		result := NewDeletePublicIPNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewDeletePublicIPBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewDeletePublicIPUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewDeletePublicIPNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 412:
		result := NewDeletePublicIPPreconditionFailed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewDeletePublicIPInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewDeletePublicIPDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewDeletePublicIPNoContent creates a DeletePublicIPNoContent with default headers values
func NewDeletePublicIPNoContent() *DeletePublicIPNoContent {
	return &DeletePublicIPNoContent{}
}

/*DeletePublicIPNoContent handles this case with default header values.

The public IP is being deleted.
*/
type DeletePublicIPNoContent struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string
}

func (o *DeletePublicIPNoContent) Error() string {
	return fmt.Sprintf("[DELETE /publicIps/{publicIpId}][%d] deletePublicIpNoContent ", 204)
}

func (o *DeletePublicIPNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	return nil
}

// NewDeletePublicIPBadRequest creates a DeletePublicIPBadRequest with default headers values
func NewDeletePublicIPBadRequest() *DeletePublicIPBadRequest {
	return &DeletePublicIPBadRequest{}
}

/*DeletePublicIPBadRequest handles this case with default header values.

Bad Request
*/
type DeletePublicIPBadRequest struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *DeletePublicIPBadRequest) Error() string {
	return fmt.Sprintf("[DELETE /publicIps/{publicIpId}][%d] deletePublicIpBadRequest  %+v", 400, o.Payload)
}

func (o *DeletePublicIPBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeletePublicIPUnauthorized creates a DeletePublicIPUnauthorized with default headers values
func NewDeletePublicIPUnauthorized() *DeletePublicIPUnauthorized {
	return &DeletePublicIPUnauthorized{}
}

/*DeletePublicIPUnauthorized handles this case with default header values.

Unauthorized
*/
type DeletePublicIPUnauthorized struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *DeletePublicIPUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /publicIps/{publicIpId}][%d] deletePublicIpUnauthorized  %+v", 401, o.Payload)
}

func (o *DeletePublicIPUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeletePublicIPNotFound creates a DeletePublicIPNotFound with default headers values
func NewDeletePublicIPNotFound() *DeletePublicIPNotFound {
	return &DeletePublicIPNotFound{}
}

/*DeletePublicIPNotFound handles this case with default header values.

Not Found
*/
type DeletePublicIPNotFound struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *DeletePublicIPNotFound) Error() string {
	return fmt.Sprintf("[DELETE /publicIps/{publicIpId}][%d] deletePublicIpNotFound  %+v", 404, o.Payload)
}

func (o *DeletePublicIPNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeletePublicIPPreconditionFailed creates a DeletePublicIPPreconditionFailed with default headers values
func NewDeletePublicIPPreconditionFailed() *DeletePublicIPPreconditionFailed {
	return &DeletePublicIPPreconditionFailed{}
}

/*DeletePublicIPPreconditionFailed handles this case with default header values.

Precondition Failed
*/
type DeletePublicIPPreconditionFailed struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *DeletePublicIPPreconditionFailed) Error() string {
	return fmt.Sprintf("[DELETE /publicIps/{publicIpId}][%d] deletePublicIpPreconditionFailed  %+v", 412, o.Payload)
}

func (o *DeletePublicIPPreconditionFailed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeletePublicIPInternalServerError creates a DeletePublicIPInternalServerError with default headers values
func NewDeletePublicIPInternalServerError() *DeletePublicIPInternalServerError {
	return &DeletePublicIPInternalServerError{}
}

/*DeletePublicIPInternalServerError handles this case with default header values.

Internal Server Error
*/
type DeletePublicIPInternalServerError struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *DeletePublicIPInternalServerError) Error() string {
	return fmt.Sprintf("[DELETE /publicIps/{publicIpId}][%d] deletePublicIpInternalServerError  %+v", 500, o.Payload)
}

func (o *DeletePublicIPInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeletePublicIPDefault creates a DeletePublicIPDefault with default headers values
func NewDeletePublicIPDefault(code int) *DeletePublicIPDefault {
	return &DeletePublicIPDefault{
		_statusCode: code,
	}
}

/*DeletePublicIPDefault handles this case with default header values.

An error has occurred.
*/
type DeletePublicIPDefault struct {
	_statusCode int

	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

// Code gets the status code for the delete public Ip default response
func (o *DeletePublicIPDefault) Code() int {
	return o._statusCode
}

func (o *DeletePublicIPDefault) Error() string {
	return fmt.Sprintf("[DELETE /publicIps/{publicIpId}][%d] DeletePublicIp default  %+v", o._statusCode, o.Payload)
}

func (o *DeletePublicIPDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
