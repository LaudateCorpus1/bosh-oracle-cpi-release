// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"encoding/json"
	"io"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateImageDetails Either instanceId or imageSourceDetails must be provided in addition to other required parameters.
// swagger:model CreateImageDetails
type CreateImageDetails struct {

	// The OCID of the compartment containing the instance you want to use as the basis for the image.
	// Required: true
	// Max Length: 255
	// Min Length: 1
	CompartmentID *string `json:"compartmentId"`

	// Defined tags for this resource. Each key is predefined and scoped to a namespace.
	// For more information, see [Resource Tags](/Content/General/Concepts/resourcetags.htm).
	//
	// Example: `{"Operations": {"CostCenter": "42"}}`
	//
	DefinedTags map[string]map[string]interface{} `json:"definedTags,omitempty"`

	// A user-friendly name for the image. It does not have to be unique, and it's changeable.
	// Avoid entering confidential information.
	//
	// You cannot use an Oracle-provided image name as a custom image name.
	//
	// Example: `My Oracle Linux image`
	//
	// Max Length: 255
	// Min Length: 1
	DisplayName string `json:"displayName,omitempty"`

	// Free-form tags for this resource. Each tag is a simple key-value pair with no
	// predefined name, type, or namespace. For more information, see
	// [Resource Tags](/Content/General/Concepts/resourcetags.htm).
	//
	// Example: `{"Department": "Finance"}`
	//
	FreeformTags map[string]string `json:"freeformTags,omitempty"`

	imageSourceDetailsField ImageSourceDetails

	// The OCID of the instance you want to use as the basis for the image.
	// Max Length: 255
	// Min Length: 1
	InstanceID string `json:"instanceId,omitempty"`

	// Specifies the configuration mode for launching virtual machine (VM) instances. The configuration modes are:
	// * `NATIVE` - VM instances launch with iSCSI boot and VFIO devices. The default value for Oracle-provided images.
	// * `EMULATED` - VM instances launch with emulated devices, such as the E1000 network driver and emulated SCSI disk controller.
	// * `CUSTOM` - VM instances launch with custom configuration settings specified in the `LaunchOptions` parameter.
	//
	LaunchMode string `json:"launchMode,omitempty"`
}

func (m *CreateImageDetails) ImageSourceDetails() ImageSourceDetails {
	return m.imageSourceDetailsField
}
func (m *CreateImageDetails) SetImageSourceDetails(val ImageSourceDetails) {
	m.imageSourceDetailsField = val
}

// UnmarshalJSON unmarshals this object with a polymorphic type from a JSON structure
func (m *CreateImageDetails) UnmarshalJSON(raw []byte) error {
	var data struct {
		CompartmentID *string `json:"compartmentId"`

		DefinedTags map[string]map[string]interface{} `json:"definedTags,omitempty"`

		DisplayName string `json:"displayName,omitempty"`

		FreeformTags map[string]string `json:"freeformTags,omitempty"`

		ImageSourceDetails json.RawMessage `json:"imageSourceDetails,omitempty"`

		InstanceID string `json:"instanceId,omitempty"`

		LaunchMode string `json:"launchMode,omitempty"`
	}
	buf := bytes.NewBuffer(raw)
	dec := json.NewDecoder(buf)
	dec.UseNumber()

	if err := dec.Decode(&data); err != nil {
		return err
	}

	imageSourceDetails, err := UnmarshalImageSourceDetails(bytes.NewBuffer(data.ImageSourceDetails), runtime.JSONConsumer())
	if err != nil && err != io.EOF {
		return err
	}

	var result CreateImageDetails

	// compartmentId
	result.CompartmentID = data.CompartmentID

	// definedTags
	result.DefinedTags = data.DefinedTags

	// displayName
	result.DisplayName = data.DisplayName

	// freeformTags
	result.FreeformTags = data.FreeformTags

	// imageSourceDetails
	result.imageSourceDetailsField = imageSourceDetails

	// instanceId
	result.InstanceID = data.InstanceID

	// launchMode
	result.LaunchMode = data.LaunchMode

	*m = result

	return nil
}

// MarshalJSON marshals this object with a polymorphic type to a JSON structure
func (m CreateImageDetails) MarshalJSON() ([]byte, error) {
	var b1, b2, b3 []byte
	var err error
	b1, err = json.Marshal(struct {
		CompartmentID *string `json:"compartmentId"`

		DefinedTags map[string]map[string]interface{} `json:"definedTags,omitempty"`

		DisplayName string `json:"displayName,omitempty"`

		FreeformTags map[string]string `json:"freeformTags,omitempty"`

		InstanceID string `json:"instanceId,omitempty"`

		LaunchMode string `json:"launchMode,omitempty"`
	}{

		CompartmentID: m.CompartmentID,

		DefinedTags: m.DefinedTags,

		DisplayName: m.DisplayName,

		FreeformTags: m.FreeformTags,

		InstanceID: m.InstanceID,

		LaunchMode: m.LaunchMode,
	},
	)
	if err != nil {
		return nil, err
	}
	b2, err = json.Marshal(struct {
		ImageSourceDetails ImageSourceDetails `json:"imageSourceDetails,omitempty"`
	}{

		ImageSourceDetails: m.imageSourceDetailsField,
	},
	)
	if err != nil {
		return nil, err
	}

	return swag.ConcatJSON(b1, b2, b3), nil
}

// Validate validates this create image details
func (m *CreateImageDetails) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCompartmentID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateDisplayName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateInstanceID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateLaunchMode(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateImageDetails) validateCompartmentID(formats strfmt.Registry) error {

	if err := validate.Required("compartmentId", "body", m.CompartmentID); err != nil {
		return err
	}

	if err := validate.MinLength("compartmentId", "body", string(*m.CompartmentID), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("compartmentId", "body", string(*m.CompartmentID), 255); err != nil {
		return err
	}

	return nil
}

func (m *CreateImageDetails) validateDisplayName(formats strfmt.Registry) error {

	if swag.IsZero(m.DisplayName) { // not required
		return nil
	}

	if err := validate.MinLength("displayName", "body", string(m.DisplayName), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("displayName", "body", string(m.DisplayName), 255); err != nil {
		return err
	}

	return nil
}

func (m *CreateImageDetails) validateInstanceID(formats strfmt.Registry) error {

	if swag.IsZero(m.InstanceID) { // not required
		return nil
	}

	if err := validate.MinLength("instanceId", "body", string(m.InstanceID), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("instanceId", "body", string(m.InstanceID), 255); err != nil {
		return err
	}

	return nil
}

var createImageDetailsTypeLaunchModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["NATIVE","EMULATED","CUSTOM"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		createImageDetailsTypeLaunchModePropEnum = append(createImageDetailsTypeLaunchModePropEnum, v)
	}
}

const (

	// CreateImageDetailsLaunchModeNATIVE captures enum value "NATIVE"
	CreateImageDetailsLaunchModeNATIVE string = "NATIVE"

	// CreateImageDetailsLaunchModeEMULATED captures enum value "EMULATED"
	CreateImageDetailsLaunchModeEMULATED string = "EMULATED"

	// CreateImageDetailsLaunchModeCUSTOM captures enum value "CUSTOM"
	CreateImageDetailsLaunchModeCUSTOM string = "CUSTOM"
)

// prop value enum
func (m *CreateImageDetails) validateLaunchModeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, createImageDetailsTypeLaunchModePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *CreateImageDetails) validateLaunchMode(formats strfmt.Registry) error {

	if swag.IsZero(m.LaunchMode) { // not required
		return nil
	}

	// value enum
	if err := m.validateLaunchModeEnum("launchMode", "body", m.LaunchMode); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CreateImageDetails) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateImageDetails) UnmarshalBinary(b []byte) error {
	var res CreateImageDetails
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
