// Code generated by go-swagger; DO NOT EDIT.

package compute

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "oracle/oci/core/models"
)

// ListInstanceConsoleConnectionsReader is a Reader for the ListInstanceConsoleConnections structure.
type ListInstanceConsoleConnectionsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ListInstanceConsoleConnectionsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewListInstanceConsoleConnectionsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewListInstanceConsoleConnectionsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewListInstanceConsoleConnectionsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewListInstanceConsoleConnectionsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewListInstanceConsoleConnectionsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewListInstanceConsoleConnectionsDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewListInstanceConsoleConnectionsOK creates a ListInstanceConsoleConnectionsOK with default headers values
func NewListInstanceConsoleConnectionsOK() *ListInstanceConsoleConnectionsOK {
	return &ListInstanceConsoleConnectionsOK{}
}

/*ListInstanceConsoleConnectionsOK handles this case with default header values.

The list is being retrieved.
*/
type ListInstanceConsoleConnectionsOK struct {
	/*For pagination of a list of items. When paging through a list, if this header appears in the response,
	then a partial list might have been returned. Include this value as the `page` parameter for the
	subsequent GET request to get the next batch of items.

	*/
	OpcNextPage string
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload []*models.InstanceConsoleConnection
}

func (o *ListInstanceConsoleConnectionsOK) Error() string {
	return fmt.Sprintf("[GET /instanceConsoleConnections][%d] listInstanceConsoleConnectionsOK  %+v", 200, o.Payload)
}

func (o *ListInstanceConsoleConnectionsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-next-page
	o.OpcNextPage = response.GetHeader("opc-next-page")

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListInstanceConsoleConnectionsBadRequest creates a ListInstanceConsoleConnectionsBadRequest with default headers values
func NewListInstanceConsoleConnectionsBadRequest() *ListInstanceConsoleConnectionsBadRequest {
	return &ListInstanceConsoleConnectionsBadRequest{}
}

/*ListInstanceConsoleConnectionsBadRequest handles this case with default header values.

Bad Request
*/
type ListInstanceConsoleConnectionsBadRequest struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *ListInstanceConsoleConnectionsBadRequest) Error() string {
	return fmt.Sprintf("[GET /instanceConsoleConnections][%d] listInstanceConsoleConnectionsBadRequest  %+v", 400, o.Payload)
}

func (o *ListInstanceConsoleConnectionsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListInstanceConsoleConnectionsUnauthorized creates a ListInstanceConsoleConnectionsUnauthorized with default headers values
func NewListInstanceConsoleConnectionsUnauthorized() *ListInstanceConsoleConnectionsUnauthorized {
	return &ListInstanceConsoleConnectionsUnauthorized{}
}

/*ListInstanceConsoleConnectionsUnauthorized handles this case with default header values.

Unauthorized
*/
type ListInstanceConsoleConnectionsUnauthorized struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *ListInstanceConsoleConnectionsUnauthorized) Error() string {
	return fmt.Sprintf("[GET /instanceConsoleConnections][%d] listInstanceConsoleConnectionsUnauthorized  %+v", 401, o.Payload)
}

func (o *ListInstanceConsoleConnectionsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListInstanceConsoleConnectionsNotFound creates a ListInstanceConsoleConnectionsNotFound with default headers values
func NewListInstanceConsoleConnectionsNotFound() *ListInstanceConsoleConnectionsNotFound {
	return &ListInstanceConsoleConnectionsNotFound{}
}

/*ListInstanceConsoleConnectionsNotFound handles this case with default header values.

Not Found
*/
type ListInstanceConsoleConnectionsNotFound struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *ListInstanceConsoleConnectionsNotFound) Error() string {
	return fmt.Sprintf("[GET /instanceConsoleConnections][%d] listInstanceConsoleConnectionsNotFound  %+v", 404, o.Payload)
}

func (o *ListInstanceConsoleConnectionsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListInstanceConsoleConnectionsInternalServerError creates a ListInstanceConsoleConnectionsInternalServerError with default headers values
func NewListInstanceConsoleConnectionsInternalServerError() *ListInstanceConsoleConnectionsInternalServerError {
	return &ListInstanceConsoleConnectionsInternalServerError{}
}

/*ListInstanceConsoleConnectionsInternalServerError handles this case with default header values.

Internal Server Error
*/
type ListInstanceConsoleConnectionsInternalServerError struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *ListInstanceConsoleConnectionsInternalServerError) Error() string {
	return fmt.Sprintf("[GET /instanceConsoleConnections][%d] listInstanceConsoleConnectionsInternalServerError  %+v", 500, o.Payload)
}

func (o *ListInstanceConsoleConnectionsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListInstanceConsoleConnectionsDefault creates a ListInstanceConsoleConnectionsDefault with default headers values
func NewListInstanceConsoleConnectionsDefault(code int) *ListInstanceConsoleConnectionsDefault {
	return &ListInstanceConsoleConnectionsDefault{
		_statusCode: code,
	}
}

/*ListInstanceConsoleConnectionsDefault handles this case with default header values.

An error has occurred.
*/
type ListInstanceConsoleConnectionsDefault struct {
	_statusCode int

	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

// Code gets the status code for the list instance console connections default response
func (o *ListInstanceConsoleConnectionsDefault) Code() int {
	return o._statusCode
}

func (o *ListInstanceConsoleConnectionsDefault) Error() string {
	return fmt.Sprintf("[GET /instanceConsoleConnections][%d] ListInstanceConsoleConnections default  %+v", o._statusCode, o.Payload)
}

func (o *ListInstanceConsoleConnectionsDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
