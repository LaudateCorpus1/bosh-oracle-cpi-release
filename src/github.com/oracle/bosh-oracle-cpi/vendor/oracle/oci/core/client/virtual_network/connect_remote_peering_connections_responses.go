// Code generated by go-swagger; DO NOT EDIT.

package virtual_network

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "oracle/oci/core/models"
)

// ConnectRemotePeeringConnectionsReader is a Reader for the ConnectRemotePeeringConnections structure.
type ConnectRemotePeeringConnectionsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ConnectRemotePeeringConnectionsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 204:
		result := NewConnectRemotePeeringConnectionsNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewConnectRemotePeeringConnectionsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewConnectRemotePeeringConnectionsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewConnectRemotePeeringConnectionsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 409:
		result := NewConnectRemotePeeringConnectionsConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 412:
		result := NewConnectRemotePeeringConnectionsPreconditionFailed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewConnectRemotePeeringConnectionsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewConnectRemotePeeringConnectionsDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewConnectRemotePeeringConnectionsNoContent creates a ConnectRemotePeeringConnectionsNoContent with default headers values
func NewConnectRemotePeeringConnectionsNoContent() *ConnectRemotePeeringConnectionsNoContent {
	return &ConnectRemotePeeringConnectionsNoContent{}
}

/*ConnectRemotePeeringConnectionsNoContent handles this case with default header values.

The connect request was accepted and a peering is being established.
*/
type ConnectRemotePeeringConnectionsNoContent struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string
}

func (o *ConnectRemotePeeringConnectionsNoContent) Error() string {
	return fmt.Sprintf("[POST /remotePeeringConnections/{remotePeeringConnectionId}/actions/connect][%d] connectRemotePeeringConnectionsNoContent ", 204)
}

func (o *ConnectRemotePeeringConnectionsNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	return nil
}

// NewConnectRemotePeeringConnectionsBadRequest creates a ConnectRemotePeeringConnectionsBadRequest with default headers values
func NewConnectRemotePeeringConnectionsBadRequest() *ConnectRemotePeeringConnectionsBadRequest {
	return &ConnectRemotePeeringConnectionsBadRequest{}
}

/*ConnectRemotePeeringConnectionsBadRequest handles this case with default header values.

Bad Request
*/
type ConnectRemotePeeringConnectionsBadRequest struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *ConnectRemotePeeringConnectionsBadRequest) Error() string {
	return fmt.Sprintf("[POST /remotePeeringConnections/{remotePeeringConnectionId}/actions/connect][%d] connectRemotePeeringConnectionsBadRequest  %+v", 400, o.Payload)
}

func (o *ConnectRemotePeeringConnectionsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewConnectRemotePeeringConnectionsUnauthorized creates a ConnectRemotePeeringConnectionsUnauthorized with default headers values
func NewConnectRemotePeeringConnectionsUnauthorized() *ConnectRemotePeeringConnectionsUnauthorized {
	return &ConnectRemotePeeringConnectionsUnauthorized{}
}

/*ConnectRemotePeeringConnectionsUnauthorized handles this case with default header values.

Unauthorized
*/
type ConnectRemotePeeringConnectionsUnauthorized struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *ConnectRemotePeeringConnectionsUnauthorized) Error() string {
	return fmt.Sprintf("[POST /remotePeeringConnections/{remotePeeringConnectionId}/actions/connect][%d] connectRemotePeeringConnectionsUnauthorized  %+v", 401, o.Payload)
}

func (o *ConnectRemotePeeringConnectionsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewConnectRemotePeeringConnectionsNotFound creates a ConnectRemotePeeringConnectionsNotFound with default headers values
func NewConnectRemotePeeringConnectionsNotFound() *ConnectRemotePeeringConnectionsNotFound {
	return &ConnectRemotePeeringConnectionsNotFound{}
}

/*ConnectRemotePeeringConnectionsNotFound handles this case with default header values.

Not Found
*/
type ConnectRemotePeeringConnectionsNotFound struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *ConnectRemotePeeringConnectionsNotFound) Error() string {
	return fmt.Sprintf("[POST /remotePeeringConnections/{remotePeeringConnectionId}/actions/connect][%d] connectRemotePeeringConnectionsNotFound  %+v", 404, o.Payload)
}

func (o *ConnectRemotePeeringConnectionsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewConnectRemotePeeringConnectionsConflict creates a ConnectRemotePeeringConnectionsConflict with default headers values
func NewConnectRemotePeeringConnectionsConflict() *ConnectRemotePeeringConnectionsConflict {
	return &ConnectRemotePeeringConnectionsConflict{}
}

/*ConnectRemotePeeringConnectionsConflict handles this case with default header values.

Conflict
*/
type ConnectRemotePeeringConnectionsConflict struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *ConnectRemotePeeringConnectionsConflict) Error() string {
	return fmt.Sprintf("[POST /remotePeeringConnections/{remotePeeringConnectionId}/actions/connect][%d] connectRemotePeeringConnectionsConflict  %+v", 409, o.Payload)
}

func (o *ConnectRemotePeeringConnectionsConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewConnectRemotePeeringConnectionsPreconditionFailed creates a ConnectRemotePeeringConnectionsPreconditionFailed with default headers values
func NewConnectRemotePeeringConnectionsPreconditionFailed() *ConnectRemotePeeringConnectionsPreconditionFailed {
	return &ConnectRemotePeeringConnectionsPreconditionFailed{}
}

/*ConnectRemotePeeringConnectionsPreconditionFailed handles this case with default header values.

Precondition Failed
*/
type ConnectRemotePeeringConnectionsPreconditionFailed struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *ConnectRemotePeeringConnectionsPreconditionFailed) Error() string {
	return fmt.Sprintf("[POST /remotePeeringConnections/{remotePeeringConnectionId}/actions/connect][%d] connectRemotePeeringConnectionsPreconditionFailed  %+v", 412, o.Payload)
}

func (o *ConnectRemotePeeringConnectionsPreconditionFailed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewConnectRemotePeeringConnectionsInternalServerError creates a ConnectRemotePeeringConnectionsInternalServerError with default headers values
func NewConnectRemotePeeringConnectionsInternalServerError() *ConnectRemotePeeringConnectionsInternalServerError {
	return &ConnectRemotePeeringConnectionsInternalServerError{}
}

/*ConnectRemotePeeringConnectionsInternalServerError handles this case with default header values.

Internal Server Error
*/
type ConnectRemotePeeringConnectionsInternalServerError struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *ConnectRemotePeeringConnectionsInternalServerError) Error() string {
	return fmt.Sprintf("[POST /remotePeeringConnections/{remotePeeringConnectionId}/actions/connect][%d] connectRemotePeeringConnectionsInternalServerError  %+v", 500, o.Payload)
}

func (o *ConnectRemotePeeringConnectionsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewConnectRemotePeeringConnectionsDefault creates a ConnectRemotePeeringConnectionsDefault with default headers values
func NewConnectRemotePeeringConnectionsDefault(code int) *ConnectRemotePeeringConnectionsDefault {
	return &ConnectRemotePeeringConnectionsDefault{
		_statusCode: code,
	}
}

/*ConnectRemotePeeringConnectionsDefault handles this case with default header values.

An error has occurred.
*/
type ConnectRemotePeeringConnectionsDefault struct {
	_statusCode int

	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

// Code gets the status code for the connect remote peering connections default response
func (o *ConnectRemotePeeringConnectionsDefault) Code() int {
	return o._statusCode
}

func (o *ConnectRemotePeeringConnectionsDefault) Error() string {
	return fmt.Sprintf("[POST /remotePeeringConnections/{remotePeeringConnectionId}/actions/connect][%d] ConnectRemotePeeringConnections default  %+v", o._statusCode, o.Payload)
}

func (o *ConnectRemotePeeringConnectionsDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
