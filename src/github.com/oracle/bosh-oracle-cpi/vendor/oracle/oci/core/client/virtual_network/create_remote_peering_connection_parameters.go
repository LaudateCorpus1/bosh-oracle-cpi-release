// Code generated by go-swagger; DO NOT EDIT.

package virtual_network

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	models "oracle/oci/core/models"
)

// NewCreateRemotePeeringConnectionParams creates a new CreateRemotePeeringConnectionParams object
// with the default values initialized.
func NewCreateRemotePeeringConnectionParams() *CreateRemotePeeringConnectionParams {
	var ()
	return &CreateRemotePeeringConnectionParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewCreateRemotePeeringConnectionParamsWithTimeout creates a new CreateRemotePeeringConnectionParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewCreateRemotePeeringConnectionParamsWithTimeout(timeout time.Duration) *CreateRemotePeeringConnectionParams {
	var ()
	return &CreateRemotePeeringConnectionParams{

		timeout: timeout,
	}
}

// NewCreateRemotePeeringConnectionParamsWithContext creates a new CreateRemotePeeringConnectionParams object
// with the default values initialized, and the ability to set a context for a request
func NewCreateRemotePeeringConnectionParamsWithContext(ctx context.Context) *CreateRemotePeeringConnectionParams {
	var ()
	return &CreateRemotePeeringConnectionParams{

		Context: ctx,
	}
}

// NewCreateRemotePeeringConnectionParamsWithHTTPClient creates a new CreateRemotePeeringConnectionParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewCreateRemotePeeringConnectionParamsWithHTTPClient(client *http.Client) *CreateRemotePeeringConnectionParams {
	var ()
	return &CreateRemotePeeringConnectionParams{
		HTTPClient: client,
	}
}

/*CreateRemotePeeringConnectionParams contains all the parameters to send to the API endpoint
for the create remote peering connection operation typically these are written to a http.Request
*/
type CreateRemotePeeringConnectionParams struct {

	/*CreateRemotePeeringConnectionDetails
	  Request to create peering connection to remote region

	*/
	CreateRemotePeeringConnectionDetails *models.CreateRemotePeeringConnectionDetails
	/*OpcRetryToken
	  A token that uniquely identifies a request so it can be retried in case of a timeout or
	server error without risk of executing that same action again. Retry tokens expire after 24
	hours, but can be invalidated before then due to conflicting operations (for example, if a resource
	has been deleted and purged from the system, then a retry of the original creation request
	may be rejected).


	*/
	OpcRetryToken *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the create remote peering connection params
func (o *CreateRemotePeeringConnectionParams) WithTimeout(timeout time.Duration) *CreateRemotePeeringConnectionParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the create remote peering connection params
func (o *CreateRemotePeeringConnectionParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the create remote peering connection params
func (o *CreateRemotePeeringConnectionParams) WithContext(ctx context.Context) *CreateRemotePeeringConnectionParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the create remote peering connection params
func (o *CreateRemotePeeringConnectionParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the create remote peering connection params
func (o *CreateRemotePeeringConnectionParams) WithHTTPClient(client *http.Client) *CreateRemotePeeringConnectionParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the create remote peering connection params
func (o *CreateRemotePeeringConnectionParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCreateRemotePeeringConnectionDetails adds the createRemotePeeringConnectionDetails to the create remote peering connection params
func (o *CreateRemotePeeringConnectionParams) WithCreateRemotePeeringConnectionDetails(createRemotePeeringConnectionDetails *models.CreateRemotePeeringConnectionDetails) *CreateRemotePeeringConnectionParams {
	o.SetCreateRemotePeeringConnectionDetails(createRemotePeeringConnectionDetails)
	return o
}

// SetCreateRemotePeeringConnectionDetails adds the createRemotePeeringConnectionDetails to the create remote peering connection params
func (o *CreateRemotePeeringConnectionParams) SetCreateRemotePeeringConnectionDetails(createRemotePeeringConnectionDetails *models.CreateRemotePeeringConnectionDetails) {
	o.CreateRemotePeeringConnectionDetails = createRemotePeeringConnectionDetails
}

// WithOpcRetryToken adds the opcRetryToken to the create remote peering connection params
func (o *CreateRemotePeeringConnectionParams) WithOpcRetryToken(opcRetryToken *string) *CreateRemotePeeringConnectionParams {
	o.SetOpcRetryToken(opcRetryToken)
	return o
}

// SetOpcRetryToken adds the opcRetryToken to the create remote peering connection params
func (o *CreateRemotePeeringConnectionParams) SetOpcRetryToken(opcRetryToken *string) {
	o.OpcRetryToken = opcRetryToken
}

// WriteToRequest writes these params to a swagger request
func (o *CreateRemotePeeringConnectionParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.CreateRemotePeeringConnectionDetails != nil {
		if err := r.SetBodyParam(o.CreateRemotePeeringConnectionDetails); err != nil {
			return err
		}
	}

	if o.OpcRetryToken != nil {

		// header param opc-retry-token
		if err := r.SetHeaderParam("opc-retry-token", *o.OpcRetryToken); err != nil {
			return err
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
