// Code generated by go-swagger; DO NOT EDIT.

package virtual_network

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "oracle/oci/core/models"
)

// ListRemotePeeringConnectionsReader is a Reader for the ListRemotePeeringConnections structure.
type ListRemotePeeringConnectionsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ListRemotePeeringConnectionsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewListRemotePeeringConnectionsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewListRemotePeeringConnectionsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewListRemotePeeringConnectionsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewListRemotePeeringConnectionsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewListRemotePeeringConnectionsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewListRemotePeeringConnectionsDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewListRemotePeeringConnectionsOK creates a ListRemotePeeringConnectionsOK with default headers values
func NewListRemotePeeringConnectionsOK() *ListRemotePeeringConnectionsOK {
	return &ListRemotePeeringConnectionsOK{}
}

/*ListRemotePeeringConnectionsOK handles this case with default header values.

The list is being retrieved.
*/
type ListRemotePeeringConnectionsOK struct {
	/*A pagination token to the start of the next page, if one exist.
	 */
	OpcNextPage string
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload []*models.RemotePeeringConnection
}

func (o *ListRemotePeeringConnectionsOK) Error() string {
	return fmt.Sprintf("[GET /remotePeeringConnections][%d] listRemotePeeringConnectionsOK  %+v", 200, o.Payload)
}

func (o *ListRemotePeeringConnectionsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-next-page
	o.OpcNextPage = response.GetHeader("opc-next-page")

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListRemotePeeringConnectionsBadRequest creates a ListRemotePeeringConnectionsBadRequest with default headers values
func NewListRemotePeeringConnectionsBadRequest() *ListRemotePeeringConnectionsBadRequest {
	return &ListRemotePeeringConnectionsBadRequest{}
}

/*ListRemotePeeringConnectionsBadRequest handles this case with default header values.

Bad Request
*/
type ListRemotePeeringConnectionsBadRequest struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *ListRemotePeeringConnectionsBadRequest) Error() string {
	return fmt.Sprintf("[GET /remotePeeringConnections][%d] listRemotePeeringConnectionsBadRequest  %+v", 400, o.Payload)
}

func (o *ListRemotePeeringConnectionsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListRemotePeeringConnectionsUnauthorized creates a ListRemotePeeringConnectionsUnauthorized with default headers values
func NewListRemotePeeringConnectionsUnauthorized() *ListRemotePeeringConnectionsUnauthorized {
	return &ListRemotePeeringConnectionsUnauthorized{}
}

/*ListRemotePeeringConnectionsUnauthorized handles this case with default header values.

Unauthorized
*/
type ListRemotePeeringConnectionsUnauthorized struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *ListRemotePeeringConnectionsUnauthorized) Error() string {
	return fmt.Sprintf("[GET /remotePeeringConnections][%d] listRemotePeeringConnectionsUnauthorized  %+v", 401, o.Payload)
}

func (o *ListRemotePeeringConnectionsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListRemotePeeringConnectionsNotFound creates a ListRemotePeeringConnectionsNotFound with default headers values
func NewListRemotePeeringConnectionsNotFound() *ListRemotePeeringConnectionsNotFound {
	return &ListRemotePeeringConnectionsNotFound{}
}

/*ListRemotePeeringConnectionsNotFound handles this case with default header values.

Not Found
*/
type ListRemotePeeringConnectionsNotFound struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *ListRemotePeeringConnectionsNotFound) Error() string {
	return fmt.Sprintf("[GET /remotePeeringConnections][%d] listRemotePeeringConnectionsNotFound  %+v", 404, o.Payload)
}

func (o *ListRemotePeeringConnectionsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListRemotePeeringConnectionsInternalServerError creates a ListRemotePeeringConnectionsInternalServerError with default headers values
func NewListRemotePeeringConnectionsInternalServerError() *ListRemotePeeringConnectionsInternalServerError {
	return &ListRemotePeeringConnectionsInternalServerError{}
}

/*ListRemotePeeringConnectionsInternalServerError handles this case with default header values.

Internal Server Error
*/
type ListRemotePeeringConnectionsInternalServerError struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *ListRemotePeeringConnectionsInternalServerError) Error() string {
	return fmt.Sprintf("[GET /remotePeeringConnections][%d] listRemotePeeringConnectionsInternalServerError  %+v", 500, o.Payload)
}

func (o *ListRemotePeeringConnectionsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListRemotePeeringConnectionsDefault creates a ListRemotePeeringConnectionsDefault with default headers values
func NewListRemotePeeringConnectionsDefault(code int) *ListRemotePeeringConnectionsDefault {
	return &ListRemotePeeringConnectionsDefault{
		_statusCode: code,
	}
}

/*ListRemotePeeringConnectionsDefault handles this case with default header values.

An error has occurred.
*/
type ListRemotePeeringConnectionsDefault struct {
	_statusCode int

	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

// Code gets the status code for the list remote peering connections default response
func (o *ListRemotePeeringConnectionsDefault) Code() int {
	return o._statusCode
}

func (o *ListRemotePeeringConnectionsDefault) Error() string {
	return fmt.Sprintf("[GET /remotePeeringConnections][%d] ListRemotePeeringConnections default  %+v", o._statusCode, o.Payload)
}

func (o *ListRemotePeeringConnectionsDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
