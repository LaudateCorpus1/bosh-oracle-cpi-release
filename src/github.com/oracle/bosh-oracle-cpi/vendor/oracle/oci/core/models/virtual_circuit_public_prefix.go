// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// VirtualCircuitPublicPrefix A public IP prefix and its details. With a public virtual circuit, the customer
// specifies the customer-owned public IP prefixes to advertise across the connection.
// For more information, see [FastConnect Overview](/Content/Network/Concepts/fastconnect.htm).
//
// swagger:model VirtualCircuitPublicPrefix
type VirtualCircuitPublicPrefix struct {

	// Publix IP prefix (CIDR) that the customer specified.
	// Required: true
	// Max Length: 50
	// Min Length: 9
	CidrBlock *string `json:"cidrBlock"`

	// Oracle must verify that the customer owns the public IP prefix before traffic
	// for that prefix can flow across the virtual circuit. Verification can take a
	// few business days. `IN_PROGRESS` means Oracle is verifying the prefix. `COMPLETED`
	// means verification succeeded. `FAILED` means verification failed and traffic for
	// this prefix will not flow across the connection.
	//
	// Required: true
	VerificationState *string `json:"verificationState"`
}

// Validate validates this virtual circuit public prefix
func (m *VirtualCircuitPublicPrefix) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCidrBlock(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateVerificationState(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VirtualCircuitPublicPrefix) validateCidrBlock(formats strfmt.Registry) error {

	if err := validate.Required("cidrBlock", "body", m.CidrBlock); err != nil {
		return err
	}

	if err := validate.MinLength("cidrBlock", "body", string(*m.CidrBlock), 9); err != nil {
		return err
	}

	if err := validate.MaxLength("cidrBlock", "body", string(*m.CidrBlock), 50); err != nil {
		return err
	}

	return nil
}

var virtualCircuitPublicPrefixTypeVerificationStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["IN_PROGRESS","COMPLETED","FAILED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		virtualCircuitPublicPrefixTypeVerificationStatePropEnum = append(virtualCircuitPublicPrefixTypeVerificationStatePropEnum, v)
	}
}

const (

	// VirtualCircuitPublicPrefixVerificationStateINPROGRESS captures enum value "IN_PROGRESS"
	VirtualCircuitPublicPrefixVerificationStateINPROGRESS string = "IN_PROGRESS"

	// VirtualCircuitPublicPrefixVerificationStateCOMPLETED captures enum value "COMPLETED"
	VirtualCircuitPublicPrefixVerificationStateCOMPLETED string = "COMPLETED"

	// VirtualCircuitPublicPrefixVerificationStateFAILED captures enum value "FAILED"
	VirtualCircuitPublicPrefixVerificationStateFAILED string = "FAILED"
)

// prop value enum
func (m *VirtualCircuitPublicPrefix) validateVerificationStateEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, virtualCircuitPublicPrefixTypeVerificationStatePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *VirtualCircuitPublicPrefix) validateVerificationState(formats strfmt.Registry) error {

	if err := validate.Required("verificationState", "body", m.VerificationState); err != nil {
		return err
	}

	// value enum
	if err := m.validateVerificationStateEnum("verificationState", "body", *m.VerificationState); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *VirtualCircuitPublicPrefix) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VirtualCircuitPublicPrefix) UnmarshalBinary(b []byte) error {
	var res VirtualCircuitPublicPrefix
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
