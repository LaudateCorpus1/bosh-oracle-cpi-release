// Code generated by go-swagger; DO NOT EDIT.

package virtual_network

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "oracle/oci/core/models"
)

// UpdateRemotePeeringConnectionReader is a Reader for the UpdateRemotePeeringConnection structure.
type UpdateRemotePeeringConnectionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateRemotePeeringConnectionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewUpdateRemotePeeringConnectionOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewUpdateRemotePeeringConnectionBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewUpdateRemotePeeringConnectionUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewUpdateRemotePeeringConnectionNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 409:
		result := NewUpdateRemotePeeringConnectionConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewUpdateRemotePeeringConnectionInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewUpdateRemotePeeringConnectionDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewUpdateRemotePeeringConnectionOK creates a UpdateRemotePeeringConnectionOK with default headers values
func NewUpdateRemotePeeringConnectionOK() *UpdateRemotePeeringConnectionOK {
	return &UpdateRemotePeeringConnectionOK{}
}

/*UpdateRemotePeeringConnectionOK handles this case with default header values.

The RPC was updated.
*/
type UpdateRemotePeeringConnectionOK struct {
	/*For optimistic concurrency control. See `if-match`.
	 */
	Etag string
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.RemotePeeringConnection
}

func (o *UpdateRemotePeeringConnectionOK) Error() string {
	return fmt.Sprintf("[PUT /remotePeeringConnections/{remotePeeringConnectionId}][%d] updateRemotePeeringConnectionOK  %+v", 200, o.Payload)
}

func (o *UpdateRemotePeeringConnectionOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header etag
	o.Etag = response.GetHeader("etag")

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.RemotePeeringConnection)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateRemotePeeringConnectionBadRequest creates a UpdateRemotePeeringConnectionBadRequest with default headers values
func NewUpdateRemotePeeringConnectionBadRequest() *UpdateRemotePeeringConnectionBadRequest {
	return &UpdateRemotePeeringConnectionBadRequest{}
}

/*UpdateRemotePeeringConnectionBadRequest handles this case with default header values.

Bad Request
*/
type UpdateRemotePeeringConnectionBadRequest struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *UpdateRemotePeeringConnectionBadRequest) Error() string {
	return fmt.Sprintf("[PUT /remotePeeringConnections/{remotePeeringConnectionId}][%d] updateRemotePeeringConnectionBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateRemotePeeringConnectionBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateRemotePeeringConnectionUnauthorized creates a UpdateRemotePeeringConnectionUnauthorized with default headers values
func NewUpdateRemotePeeringConnectionUnauthorized() *UpdateRemotePeeringConnectionUnauthorized {
	return &UpdateRemotePeeringConnectionUnauthorized{}
}

/*UpdateRemotePeeringConnectionUnauthorized handles this case with default header values.

Unauthorized
*/
type UpdateRemotePeeringConnectionUnauthorized struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *UpdateRemotePeeringConnectionUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /remotePeeringConnections/{remotePeeringConnectionId}][%d] updateRemotePeeringConnectionUnauthorized  %+v", 401, o.Payload)
}

func (o *UpdateRemotePeeringConnectionUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateRemotePeeringConnectionNotFound creates a UpdateRemotePeeringConnectionNotFound with default headers values
func NewUpdateRemotePeeringConnectionNotFound() *UpdateRemotePeeringConnectionNotFound {
	return &UpdateRemotePeeringConnectionNotFound{}
}

/*UpdateRemotePeeringConnectionNotFound handles this case with default header values.

Not Found
*/
type UpdateRemotePeeringConnectionNotFound struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *UpdateRemotePeeringConnectionNotFound) Error() string {
	return fmt.Sprintf("[PUT /remotePeeringConnections/{remotePeeringConnectionId}][%d] updateRemotePeeringConnectionNotFound  %+v", 404, o.Payload)
}

func (o *UpdateRemotePeeringConnectionNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateRemotePeeringConnectionConflict creates a UpdateRemotePeeringConnectionConflict with default headers values
func NewUpdateRemotePeeringConnectionConflict() *UpdateRemotePeeringConnectionConflict {
	return &UpdateRemotePeeringConnectionConflict{}
}

/*UpdateRemotePeeringConnectionConflict handles this case with default header values.

Conflict
*/
type UpdateRemotePeeringConnectionConflict struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *UpdateRemotePeeringConnectionConflict) Error() string {
	return fmt.Sprintf("[PUT /remotePeeringConnections/{remotePeeringConnectionId}][%d] updateRemotePeeringConnectionConflict  %+v", 409, o.Payload)
}

func (o *UpdateRemotePeeringConnectionConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateRemotePeeringConnectionInternalServerError creates a UpdateRemotePeeringConnectionInternalServerError with default headers values
func NewUpdateRemotePeeringConnectionInternalServerError() *UpdateRemotePeeringConnectionInternalServerError {
	return &UpdateRemotePeeringConnectionInternalServerError{}
}

/*UpdateRemotePeeringConnectionInternalServerError handles this case with default header values.

Internal Server Error
*/
type UpdateRemotePeeringConnectionInternalServerError struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *UpdateRemotePeeringConnectionInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /remotePeeringConnections/{remotePeeringConnectionId}][%d] updateRemotePeeringConnectionInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateRemotePeeringConnectionInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateRemotePeeringConnectionDefault creates a UpdateRemotePeeringConnectionDefault with default headers values
func NewUpdateRemotePeeringConnectionDefault(code int) *UpdateRemotePeeringConnectionDefault {
	return &UpdateRemotePeeringConnectionDefault{
		_statusCode: code,
	}
}

/*UpdateRemotePeeringConnectionDefault handles this case with default header values.

An error has occurred.
*/
type UpdateRemotePeeringConnectionDefault struct {
	_statusCode int

	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

// Code gets the status code for the update remote peering connection default response
func (o *UpdateRemotePeeringConnectionDefault) Code() int {
	return o._statusCode
}

func (o *UpdateRemotePeeringConnectionDefault) Error() string {
	return fmt.Sprintf("[PUT /remotePeeringConnections/{remotePeeringConnectionId}][%d] UpdateRemotePeeringConnection default  %+v", o._statusCode, o.Payload)
}

func (o *UpdateRemotePeeringConnectionDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
