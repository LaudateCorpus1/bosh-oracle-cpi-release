// Code generated by go-swagger; DO NOT EDIT.

package virtual_network

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	models "oracle/oci/core/models"
)

// NewConnectRemotePeeringConnectionsParams creates a new ConnectRemotePeeringConnectionsParams object
// with the default values initialized.
func NewConnectRemotePeeringConnectionsParams() *ConnectRemotePeeringConnectionsParams {
	var ()
	return &ConnectRemotePeeringConnectionsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewConnectRemotePeeringConnectionsParamsWithTimeout creates a new ConnectRemotePeeringConnectionsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewConnectRemotePeeringConnectionsParamsWithTimeout(timeout time.Duration) *ConnectRemotePeeringConnectionsParams {
	var ()
	return &ConnectRemotePeeringConnectionsParams{

		timeout: timeout,
	}
}

// NewConnectRemotePeeringConnectionsParamsWithContext creates a new ConnectRemotePeeringConnectionsParams object
// with the default values initialized, and the ability to set a context for a request
func NewConnectRemotePeeringConnectionsParamsWithContext(ctx context.Context) *ConnectRemotePeeringConnectionsParams {
	var ()
	return &ConnectRemotePeeringConnectionsParams{

		Context: ctx,
	}
}

// NewConnectRemotePeeringConnectionsParamsWithHTTPClient creates a new ConnectRemotePeeringConnectionsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewConnectRemotePeeringConnectionsParamsWithHTTPClient(client *http.Client) *ConnectRemotePeeringConnectionsParams {
	var ()
	return &ConnectRemotePeeringConnectionsParams{
		HTTPClient: client,
	}
}

/*ConnectRemotePeeringConnectionsParams contains all the parameters to send to the API endpoint
for the connect remote peering connections operation typically these are written to a http.Request
*/
type ConnectRemotePeeringConnectionsParams struct {

	/*ConnectRemotePeeringConnectionsDetails
	  Details to connect peering connection with peering connection from remote region

	*/
	ConnectRemotePeeringConnectionsDetails *models.ConnectRemotePeeringConnectionsDetails
	/*RemotePeeringConnectionID
	  The OCID of the remote peering connection (RPC).

	*/
	RemotePeeringConnectionID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the connect remote peering connections params
func (o *ConnectRemotePeeringConnectionsParams) WithTimeout(timeout time.Duration) *ConnectRemotePeeringConnectionsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the connect remote peering connections params
func (o *ConnectRemotePeeringConnectionsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the connect remote peering connections params
func (o *ConnectRemotePeeringConnectionsParams) WithContext(ctx context.Context) *ConnectRemotePeeringConnectionsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the connect remote peering connections params
func (o *ConnectRemotePeeringConnectionsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the connect remote peering connections params
func (o *ConnectRemotePeeringConnectionsParams) WithHTTPClient(client *http.Client) *ConnectRemotePeeringConnectionsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the connect remote peering connections params
func (o *ConnectRemotePeeringConnectionsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithConnectRemotePeeringConnectionsDetails adds the connectRemotePeeringConnectionsDetails to the connect remote peering connections params
func (o *ConnectRemotePeeringConnectionsParams) WithConnectRemotePeeringConnectionsDetails(connectRemotePeeringConnectionsDetails *models.ConnectRemotePeeringConnectionsDetails) *ConnectRemotePeeringConnectionsParams {
	o.SetConnectRemotePeeringConnectionsDetails(connectRemotePeeringConnectionsDetails)
	return o
}

// SetConnectRemotePeeringConnectionsDetails adds the connectRemotePeeringConnectionsDetails to the connect remote peering connections params
func (o *ConnectRemotePeeringConnectionsParams) SetConnectRemotePeeringConnectionsDetails(connectRemotePeeringConnectionsDetails *models.ConnectRemotePeeringConnectionsDetails) {
	o.ConnectRemotePeeringConnectionsDetails = connectRemotePeeringConnectionsDetails
}

// WithRemotePeeringConnectionID adds the remotePeeringConnectionID to the connect remote peering connections params
func (o *ConnectRemotePeeringConnectionsParams) WithRemotePeeringConnectionID(remotePeeringConnectionID string) *ConnectRemotePeeringConnectionsParams {
	o.SetRemotePeeringConnectionID(remotePeeringConnectionID)
	return o
}

// SetRemotePeeringConnectionID adds the remotePeeringConnectionId to the connect remote peering connections params
func (o *ConnectRemotePeeringConnectionsParams) SetRemotePeeringConnectionID(remotePeeringConnectionID string) {
	o.RemotePeeringConnectionID = remotePeeringConnectionID
}

// WriteToRequest writes these params to a swagger request
func (o *ConnectRemotePeeringConnectionsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.ConnectRemotePeeringConnectionsDetails != nil {
		if err := r.SetBodyParam(o.ConnectRemotePeeringConnectionsDetails); err != nil {
			return err
		}
	}

	// path param remotePeeringConnectionId
	if err := r.SetPathParam("remotePeeringConnectionId", o.RemotePeeringConnectionID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
