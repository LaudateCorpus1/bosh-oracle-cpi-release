// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RemotePeeringConnection A remote peering connection (RPC) is an object on a DRG that lets the VCN that is attached
// to the DRG peer with a VCN in a different region. *Peering* means that the two VCNs can
// communicate using private IP addresses, but without the traffic traversing the internet or
// routing through your on-premises network. For more information, see
// [VCN Peering](/Content/Network/Tasks/VCNpeering.htm).
//
// To use any of the API operations, you must be authorized in an IAM policy. If you're not authorized,
// talk to an administrator. If you're an administrator who needs to write policies to give users access, see
// [Getting Started with Policies](/Content/Identity/Concepts/policygetstarted.htm).
//
// swagger:model RemotePeeringConnection
type RemotePeeringConnection struct {

	// The OCID of the compartment that contains the RPC.
	// Required: true
	// Max Length: 255
	// Min Length: 1
	CompartmentID *string `json:"compartmentId"`

	// A user-friendly name. Does not have to be unique, and it's changeable.
	// Avoid entering confidential information.
	//
	// Required: true
	// Max Length: 255
	// Min Length: 1
	DisplayName *string `json:"displayName"`

	// The OCID of the DRG that this RPC belongs to.
	// Required: true
	// Max Length: 255
	// Min Length: 1
	DrgID *string `json:"drgId"`

	// The OCID of the RPC.
	// Required: true
	// Max Length: 255
	// Min Length: 1
	ID *string `json:"id"`

	// Whether the VCN at the other end of the peering is in a different tenancy.
	//
	// Example: `false`
	//
	// Required: true
	IsCrossTenancyPeering *bool `json:"isCrossTenancyPeering"`

	// The RPC's current lifecycle state.
	// Required: true
	LifecycleState *string `json:"lifecycleState"`

	// If this RPC is peered, this value is the OCID of the other RPC.
	//
	// Max Length: 255
	// Min Length: 1
	PeerID string `json:"peerId,omitempty"`

	// If this RPC is peered, this value is the region that contains the other RPC.
	//
	// Example: `us-ashburn-1`
	//
	// Max Length: 255
	// Min Length: 1
	PeerRegionName string `json:"peerRegionName,omitempty"`

	// If this RPC is peered, this value is the OCID of the other RPC's tenancy.
	//
	// Max Length: 255
	// Min Length: 1
	PeerTenancyID string `json:"peerTenancyId,omitempty"`

	// Whether the RPC is peered with another RPC. `NEW` means the RPC has not yet been
	// peered. `PENDING` means the peering is being established. `REVOKED` means the
	// RPC at the other end of the peering has been deleted.
	//
	// Required: true
	PeeringStatus *string `json:"peeringStatus"`

	// The date and time the RPC was created, in the format defined by RFC3339.
	//
	// Example: `2016-08-25T21:10:29.600Z`
	//
	// Required: true
	TimeCreated *strfmt.DateTime `json:"timeCreated"`
}

// Validate validates this remote peering connection
func (m *RemotePeeringConnection) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCompartmentID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateDisplayName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateDrgID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateIsCrossTenancyPeering(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateLifecycleState(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePeerID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePeerRegionName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePeerTenancyID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePeeringStatus(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTimeCreated(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RemotePeeringConnection) validateCompartmentID(formats strfmt.Registry) error {

	if err := validate.Required("compartmentId", "body", m.CompartmentID); err != nil {
		return err
	}

	if err := validate.MinLength("compartmentId", "body", string(*m.CompartmentID), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("compartmentId", "body", string(*m.CompartmentID), 255); err != nil {
		return err
	}

	return nil
}

func (m *RemotePeeringConnection) validateDisplayName(formats strfmt.Registry) error {

	if err := validate.Required("displayName", "body", m.DisplayName); err != nil {
		return err
	}

	if err := validate.MinLength("displayName", "body", string(*m.DisplayName), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("displayName", "body", string(*m.DisplayName), 255); err != nil {
		return err
	}

	return nil
}

func (m *RemotePeeringConnection) validateDrgID(formats strfmt.Registry) error {

	if err := validate.Required("drgId", "body", m.DrgID); err != nil {
		return err
	}

	if err := validate.MinLength("drgId", "body", string(*m.DrgID), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("drgId", "body", string(*m.DrgID), 255); err != nil {
		return err
	}

	return nil
}

func (m *RemotePeeringConnection) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	if err := validate.MinLength("id", "body", string(*m.ID), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("id", "body", string(*m.ID), 255); err != nil {
		return err
	}

	return nil
}

func (m *RemotePeeringConnection) validateIsCrossTenancyPeering(formats strfmt.Registry) error {

	if err := validate.Required("isCrossTenancyPeering", "body", m.IsCrossTenancyPeering); err != nil {
		return err
	}

	return nil
}

var remotePeeringConnectionTypeLifecycleStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["AVAILABLE","PROVISIONING","TERMINATING","TERMINATED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		remotePeeringConnectionTypeLifecycleStatePropEnum = append(remotePeeringConnectionTypeLifecycleStatePropEnum, v)
	}
}

const (

	// RemotePeeringConnectionLifecycleStateAVAILABLE captures enum value "AVAILABLE"
	RemotePeeringConnectionLifecycleStateAVAILABLE string = "AVAILABLE"

	// RemotePeeringConnectionLifecycleStatePROVISIONING captures enum value "PROVISIONING"
	RemotePeeringConnectionLifecycleStatePROVISIONING string = "PROVISIONING"

	// RemotePeeringConnectionLifecycleStateTERMINATING captures enum value "TERMINATING"
	RemotePeeringConnectionLifecycleStateTERMINATING string = "TERMINATING"

	// RemotePeeringConnectionLifecycleStateTERMINATED captures enum value "TERMINATED"
	RemotePeeringConnectionLifecycleStateTERMINATED string = "TERMINATED"
)

// prop value enum
func (m *RemotePeeringConnection) validateLifecycleStateEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, remotePeeringConnectionTypeLifecycleStatePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *RemotePeeringConnection) validateLifecycleState(formats strfmt.Registry) error {

	if err := validate.Required("lifecycleState", "body", m.LifecycleState); err != nil {
		return err
	}

	// value enum
	if err := m.validateLifecycleStateEnum("lifecycleState", "body", *m.LifecycleState); err != nil {
		return err
	}

	return nil
}

func (m *RemotePeeringConnection) validatePeerID(formats strfmt.Registry) error {

	if swag.IsZero(m.PeerID) { // not required
		return nil
	}

	if err := validate.MinLength("peerId", "body", string(m.PeerID), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("peerId", "body", string(m.PeerID), 255); err != nil {
		return err
	}

	return nil
}

func (m *RemotePeeringConnection) validatePeerRegionName(formats strfmt.Registry) error {

	if swag.IsZero(m.PeerRegionName) { // not required
		return nil
	}

	if err := validate.MinLength("peerRegionName", "body", string(m.PeerRegionName), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("peerRegionName", "body", string(m.PeerRegionName), 255); err != nil {
		return err
	}

	return nil
}

func (m *RemotePeeringConnection) validatePeerTenancyID(formats strfmt.Registry) error {

	if swag.IsZero(m.PeerTenancyID) { // not required
		return nil
	}

	if err := validate.MinLength("peerTenancyId", "body", string(m.PeerTenancyID), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("peerTenancyId", "body", string(m.PeerTenancyID), 255); err != nil {
		return err
	}

	return nil
}

var remotePeeringConnectionTypePeeringStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["INVALID","NEW","PENDING","PEERED","REVOKED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		remotePeeringConnectionTypePeeringStatusPropEnum = append(remotePeeringConnectionTypePeeringStatusPropEnum, v)
	}
}

const (

	// RemotePeeringConnectionPeeringStatusINVALID captures enum value "INVALID"
	RemotePeeringConnectionPeeringStatusINVALID string = "INVALID"

	// RemotePeeringConnectionPeeringStatusNEW captures enum value "NEW"
	RemotePeeringConnectionPeeringStatusNEW string = "NEW"

	// RemotePeeringConnectionPeeringStatusPENDING captures enum value "PENDING"
	RemotePeeringConnectionPeeringStatusPENDING string = "PENDING"

	// RemotePeeringConnectionPeeringStatusPEERED captures enum value "PEERED"
	RemotePeeringConnectionPeeringStatusPEERED string = "PEERED"

	// RemotePeeringConnectionPeeringStatusREVOKED captures enum value "REVOKED"
	RemotePeeringConnectionPeeringStatusREVOKED string = "REVOKED"
)

// prop value enum
func (m *RemotePeeringConnection) validatePeeringStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, remotePeeringConnectionTypePeeringStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *RemotePeeringConnection) validatePeeringStatus(formats strfmt.Registry) error {

	if err := validate.Required("peeringStatus", "body", m.PeeringStatus); err != nil {
		return err
	}

	// value enum
	if err := m.validatePeeringStatusEnum("peeringStatus", "body", *m.PeeringStatus); err != nil {
		return err
	}

	return nil
}

func (m *RemotePeeringConnection) validateTimeCreated(formats strfmt.Registry) error {

	if err := validate.Required("timeCreated", "body", m.TimeCreated); err != nil {
		return err
	}

	if err := validate.FormatOf("timeCreated", "body", "date-time", m.TimeCreated.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RemotePeeringConnection) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RemotePeeringConnection) UnmarshalBinary(b []byte) error {
	var res RemotePeeringConnection
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
