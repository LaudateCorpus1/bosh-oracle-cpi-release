// Code generated by go-swagger; DO NOT EDIT.

package virtual_network

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "oracle/oci/core/models"
)

// ListVirtualCircuitPublicPrefixesReader is a Reader for the ListVirtualCircuitPublicPrefixes structure.
type ListVirtualCircuitPublicPrefixesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ListVirtualCircuitPublicPrefixesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewListVirtualCircuitPublicPrefixesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewListVirtualCircuitPublicPrefixesUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewListVirtualCircuitPublicPrefixesNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewListVirtualCircuitPublicPrefixesInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewListVirtualCircuitPublicPrefixesDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewListVirtualCircuitPublicPrefixesOK creates a ListVirtualCircuitPublicPrefixesOK with default headers values
func NewListVirtualCircuitPublicPrefixesOK() *ListVirtualCircuitPublicPrefixesOK {
	return &ListVirtualCircuitPublicPrefixesOK{}
}

/*ListVirtualCircuitPublicPrefixesOK handles this case with default header values.

The list is being retrieved.
*/
type ListVirtualCircuitPublicPrefixesOK struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload []*models.VirtualCircuitPublicPrefix
}

func (o *ListVirtualCircuitPublicPrefixesOK) Error() string {
	return fmt.Sprintf("[GET /virtualCircuits/{virtualCircuitId}/publicPrefixes][%d] listVirtualCircuitPublicPrefixesOK  %+v", 200, o.Payload)
}

func (o *ListVirtualCircuitPublicPrefixesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListVirtualCircuitPublicPrefixesUnauthorized creates a ListVirtualCircuitPublicPrefixesUnauthorized with default headers values
func NewListVirtualCircuitPublicPrefixesUnauthorized() *ListVirtualCircuitPublicPrefixesUnauthorized {
	return &ListVirtualCircuitPublicPrefixesUnauthorized{}
}

/*ListVirtualCircuitPublicPrefixesUnauthorized handles this case with default header values.

Unauthorized
*/
type ListVirtualCircuitPublicPrefixesUnauthorized struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *ListVirtualCircuitPublicPrefixesUnauthorized) Error() string {
	return fmt.Sprintf("[GET /virtualCircuits/{virtualCircuitId}/publicPrefixes][%d] listVirtualCircuitPublicPrefixesUnauthorized  %+v", 401, o.Payload)
}

func (o *ListVirtualCircuitPublicPrefixesUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListVirtualCircuitPublicPrefixesNotFound creates a ListVirtualCircuitPublicPrefixesNotFound with default headers values
func NewListVirtualCircuitPublicPrefixesNotFound() *ListVirtualCircuitPublicPrefixesNotFound {
	return &ListVirtualCircuitPublicPrefixesNotFound{}
}

/*ListVirtualCircuitPublicPrefixesNotFound handles this case with default header values.

Not Found
*/
type ListVirtualCircuitPublicPrefixesNotFound struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *ListVirtualCircuitPublicPrefixesNotFound) Error() string {
	return fmt.Sprintf("[GET /virtualCircuits/{virtualCircuitId}/publicPrefixes][%d] listVirtualCircuitPublicPrefixesNotFound  %+v", 404, o.Payload)
}

func (o *ListVirtualCircuitPublicPrefixesNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListVirtualCircuitPublicPrefixesInternalServerError creates a ListVirtualCircuitPublicPrefixesInternalServerError with default headers values
func NewListVirtualCircuitPublicPrefixesInternalServerError() *ListVirtualCircuitPublicPrefixesInternalServerError {
	return &ListVirtualCircuitPublicPrefixesInternalServerError{}
}

/*ListVirtualCircuitPublicPrefixesInternalServerError handles this case with default header values.

Internal Server Error
*/
type ListVirtualCircuitPublicPrefixesInternalServerError struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *ListVirtualCircuitPublicPrefixesInternalServerError) Error() string {
	return fmt.Sprintf("[GET /virtualCircuits/{virtualCircuitId}/publicPrefixes][%d] listVirtualCircuitPublicPrefixesInternalServerError  %+v", 500, o.Payload)
}

func (o *ListVirtualCircuitPublicPrefixesInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListVirtualCircuitPublicPrefixesDefault creates a ListVirtualCircuitPublicPrefixesDefault with default headers values
func NewListVirtualCircuitPublicPrefixesDefault(code int) *ListVirtualCircuitPublicPrefixesDefault {
	return &ListVirtualCircuitPublicPrefixesDefault{
		_statusCode: code,
	}
}

/*ListVirtualCircuitPublicPrefixesDefault handles this case with default header values.

An error has occurred.
*/
type ListVirtualCircuitPublicPrefixesDefault struct {
	_statusCode int

	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

// Code gets the status code for the list virtual circuit public prefixes default response
func (o *ListVirtualCircuitPublicPrefixesDefault) Code() int {
	return o._statusCode
}

func (o *ListVirtualCircuitPublicPrefixesDefault) Error() string {
	return fmt.Sprintf("[GET /virtualCircuits/{virtualCircuitId}/publicPrefixes][%d] ListVirtualCircuitPublicPrefixes default  %+v", o._statusCode, o.Payload)
}

func (o *ListVirtualCircuitPublicPrefixesDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
