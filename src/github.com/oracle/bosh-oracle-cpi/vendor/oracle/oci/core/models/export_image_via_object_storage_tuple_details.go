// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ExportImageViaObjectStorageTupleDetails export image via object storage tuple details
// swagger:model ExportImageViaObjectStorageTupleDetails
type ExportImageViaObjectStorageTupleDetails struct {
	destinationTypeField string

	bucketNameField string

	namespaceNameField string

	objectNameField string
}

func (m *ExportImageViaObjectStorageTupleDetails) DestinationType() string {
	//return m.destinationTypeField
	return DiscriminatorTypeValues["ExportImageViaObjectStorageTupleDetails"]
}
func (m *ExportImageViaObjectStorageTupleDetails) SetDestinationType(val string) {
	m.destinationTypeField = val
}

func (m *ExportImageViaObjectStorageTupleDetails) BucketName() string {
	return m.bucketNameField
}
func (m *ExportImageViaObjectStorageTupleDetails) SetBucketName(val string) {
	m.bucketNameField = val
}

func (m *ExportImageViaObjectStorageTupleDetails) NamespaceName() string {
	return m.namespaceNameField
}
func (m *ExportImageViaObjectStorageTupleDetails) SetNamespaceName(val string) {
	m.namespaceNameField = val
}

func (m *ExportImageViaObjectStorageTupleDetails) ObjectName() string {
	return m.objectNameField
}
func (m *ExportImageViaObjectStorageTupleDetails) SetObjectName(val string) {
	m.objectNameField = val
}

// UnmarshalJSON unmarshals this object with a polymorphic type from a JSON structure
func (m *ExportImageViaObjectStorageTupleDetails) UnmarshalJSON(raw []byte) error {
	var data struct {
	}
	buf := bytes.NewBuffer(raw)
	dec := json.NewDecoder(buf)
	dec.UseNumber()

	if err := dec.Decode(&data); err != nil {
		return err
	}

	var base struct {
		/* Just the base type fields. Used for unmashalling polymorphic types.*/

		DestinationType string `json:"destinationType"`

		BucketName string `json:"bucketName,omitempty"`

		NamespaceName string `json:"namespaceName,omitempty"`

		ObjectName string `json:"objectName,omitempty"`
	}
	buf = bytes.NewBuffer(raw)
	dec = json.NewDecoder(buf)
	dec.UseNumber()

	if err := dec.Decode(&base); err != nil {
		return err
	}

	var result ExportImageViaObjectStorageTupleDetails

	if base.DestinationType != result.DestinationType() {
		/* Not the type we're looking for. */
		return errors.New(422, "invalid destinationType value: %q", base.DestinationType)
	}

	result.bucketNameField = base.BucketName

	result.namespaceNameField = base.NamespaceName

	result.objectNameField = base.ObjectName

	*m = result

	return nil
}

// MarshalJSON marshals this object with a polymorphic type to a JSON structure
func (m ExportImageViaObjectStorageTupleDetails) MarshalJSON() ([]byte, error) {
	var b1, b2, b3 []byte
	var err error
	b1, err = json.Marshal(struct {
	}{},
	)
	if err != nil {
		return nil, err
	}
	b2, err = json.Marshal(struct {
		DestinationType string `json:"destinationType"`

		BucketName string `json:"bucketName,omitempty"`

		NamespaceName string `json:"namespaceName,omitempty"`

		ObjectName string `json:"objectName,omitempty"`
	}{

		DestinationType: m.DestinationType(),

		BucketName: m.BucketName(),

		NamespaceName: m.NamespaceName(),

		ObjectName: m.ObjectName(),
	},
	)
	if err != nil {
		return nil, err
	}

	return swag.ConcatJSON(b1, b2, b3), nil
}

// Validate validates this export image via object storage tuple details
func (m *ExportImageViaObjectStorageTupleDetails) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDestinationType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ExportImageViaObjectStorageTupleDetails) validateDestinationType(formats strfmt.Registry) error {

	if err := validate.RequiredString("destinationType", "body", string(m.DestinationType())); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ExportImageViaObjectStorageTupleDetails) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ExportImageViaObjectStorageTupleDetails) UnmarshalBinary(b []byte) error {
	var res ExportImageViaObjectStorageTupleDetails
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
