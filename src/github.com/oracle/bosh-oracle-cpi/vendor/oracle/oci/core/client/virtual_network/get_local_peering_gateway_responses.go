// Code generated by go-swagger; DO NOT EDIT.

package virtual_network

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "oracle/oci/core/models"
)

// GetLocalPeeringGatewayReader is a Reader for the GetLocalPeeringGateway structure.
type GetLocalPeeringGatewayReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetLocalPeeringGatewayReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetLocalPeeringGatewayOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewGetLocalPeeringGatewayBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewGetLocalPeeringGatewayUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewGetLocalPeeringGatewayNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewGetLocalPeeringGatewayInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewGetLocalPeeringGatewayDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetLocalPeeringGatewayOK creates a GetLocalPeeringGatewayOK with default headers values
func NewGetLocalPeeringGatewayOK() *GetLocalPeeringGatewayOK {
	return &GetLocalPeeringGatewayOK{}
}

/*GetLocalPeeringGatewayOK handles this case with default header values.

The local peering gateway was retrieved.
*/
type GetLocalPeeringGatewayOK struct {
	/*For optimistic concurrency control. See `if-match`.
	 */
	Etag string
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.LocalPeeringGateway
}

func (o *GetLocalPeeringGatewayOK) Error() string {
	return fmt.Sprintf("[GET /localPeeringGateways/{localPeeringGatewayId}][%d] getLocalPeeringGatewayOK  %+v", 200, o.Payload)
}

func (o *GetLocalPeeringGatewayOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header etag
	o.Etag = response.GetHeader("etag")

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.LocalPeeringGateway)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetLocalPeeringGatewayBadRequest creates a GetLocalPeeringGatewayBadRequest with default headers values
func NewGetLocalPeeringGatewayBadRequest() *GetLocalPeeringGatewayBadRequest {
	return &GetLocalPeeringGatewayBadRequest{}
}

/*GetLocalPeeringGatewayBadRequest handles this case with default header values.

Bad Request
*/
type GetLocalPeeringGatewayBadRequest struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *GetLocalPeeringGatewayBadRequest) Error() string {
	return fmt.Sprintf("[GET /localPeeringGateways/{localPeeringGatewayId}][%d] getLocalPeeringGatewayBadRequest  %+v", 400, o.Payload)
}

func (o *GetLocalPeeringGatewayBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetLocalPeeringGatewayUnauthorized creates a GetLocalPeeringGatewayUnauthorized with default headers values
func NewGetLocalPeeringGatewayUnauthorized() *GetLocalPeeringGatewayUnauthorized {
	return &GetLocalPeeringGatewayUnauthorized{}
}

/*GetLocalPeeringGatewayUnauthorized handles this case with default header values.

Unauthorized
*/
type GetLocalPeeringGatewayUnauthorized struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *GetLocalPeeringGatewayUnauthorized) Error() string {
	return fmt.Sprintf("[GET /localPeeringGateways/{localPeeringGatewayId}][%d] getLocalPeeringGatewayUnauthorized  %+v", 401, o.Payload)
}

func (o *GetLocalPeeringGatewayUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetLocalPeeringGatewayNotFound creates a GetLocalPeeringGatewayNotFound with default headers values
func NewGetLocalPeeringGatewayNotFound() *GetLocalPeeringGatewayNotFound {
	return &GetLocalPeeringGatewayNotFound{}
}

/*GetLocalPeeringGatewayNotFound handles this case with default header values.

Not Found
*/
type GetLocalPeeringGatewayNotFound struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *GetLocalPeeringGatewayNotFound) Error() string {
	return fmt.Sprintf("[GET /localPeeringGateways/{localPeeringGatewayId}][%d] getLocalPeeringGatewayNotFound  %+v", 404, o.Payload)
}

func (o *GetLocalPeeringGatewayNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetLocalPeeringGatewayInternalServerError creates a GetLocalPeeringGatewayInternalServerError with default headers values
func NewGetLocalPeeringGatewayInternalServerError() *GetLocalPeeringGatewayInternalServerError {
	return &GetLocalPeeringGatewayInternalServerError{}
}

/*GetLocalPeeringGatewayInternalServerError handles this case with default header values.

Internal Server Error
*/
type GetLocalPeeringGatewayInternalServerError struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *GetLocalPeeringGatewayInternalServerError) Error() string {
	return fmt.Sprintf("[GET /localPeeringGateways/{localPeeringGatewayId}][%d] getLocalPeeringGatewayInternalServerError  %+v", 500, o.Payload)
}

func (o *GetLocalPeeringGatewayInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetLocalPeeringGatewayDefault creates a GetLocalPeeringGatewayDefault with default headers values
func NewGetLocalPeeringGatewayDefault(code int) *GetLocalPeeringGatewayDefault {
	return &GetLocalPeeringGatewayDefault{
		_statusCode: code,
	}
}

/*GetLocalPeeringGatewayDefault handles this case with default header values.

An error has occurred.
*/
type GetLocalPeeringGatewayDefault struct {
	_statusCode int

	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

// Code gets the status code for the get local peering gateway default response
func (o *GetLocalPeeringGatewayDefault) Code() int {
	return o._statusCode
}

func (o *GetLocalPeeringGatewayDefault) Error() string {
	return fmt.Sprintf("[GET /localPeeringGateways/{localPeeringGatewayId}][%d] GetLocalPeeringGateway default  %+v", o._statusCode, o.Payload)
}

func (o *GetLocalPeeringGatewayDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
