// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"encoding/json"
	"io"
	"io/ioutil"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/validate"
)

// InstanceSourceDetails instance source details
// swagger:discriminator InstanceSourceDetails sourceType
type InstanceSourceDetails interface {
	runtime.Validatable

	// The source type for the instance.
	// Use `image` when specifying the image OCID. Use `bootVolume` when specifying
	// the boot volume OCID.
	//
	// Required: true
	SourceType() string
	SetSourceType(string)
}

type instanceSourceDetails struct {
	sourceTypeField string
}

func (m *instanceSourceDetails) SourceType() string {
	return "InstanceSourceDetails"
}
func (m *instanceSourceDetails) SetSourceType(val string) {

}

// Validate validates this instance source details
func (m *instanceSourceDetails) Validate(formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// UnmarshalInstanceSourceDetailsSlice unmarshals polymorphic slices of InstanceSourceDetails
func UnmarshalInstanceSourceDetailsSlice(reader io.Reader, consumer runtime.Consumer) ([]InstanceSourceDetails, error) {
	var elements []json.RawMessage
	if err := consumer.Consume(reader, &elements); err != nil {
		return nil, err
	}

	var result []InstanceSourceDetails
	for _, element := range elements {
		obj, err := unmarshalInstanceSourceDetails(element, consumer)
		if err != nil {
			return nil, err
		}
		result = append(result, obj)
	}
	return result, nil
}

// UnmarshalInstanceSourceDetails unmarshals polymorphic InstanceSourceDetails
func UnmarshalInstanceSourceDetails(reader io.Reader, consumer runtime.Consumer) (InstanceSourceDetails, error) {
	// we need to read this twice, so first into a buffer
	data, err := ioutil.ReadAll(reader)
	if err != nil {
		return nil, err
	}
	return unmarshalInstanceSourceDetails(data, consumer)
}

func unmarshalInstanceSourceDetails(data []byte, consumer runtime.Consumer) (InstanceSourceDetails, error) {
	buf := bytes.NewBuffer(data)
	buf2 := bytes.NewBuffer(data)

	// the first time this is read is to fetch the value of the sourceType property.
	var getType struct {
		SourceType string `json:"sourceType"`
	}
	if err := consumer.Consume(buf, &getType); err != nil {
		return nil, err
	}

	if err := validate.RequiredString("sourceType", "body", getType.SourceType); err != nil {
		return nil, err
	}

	// The value of sourceType is used to determine which type to create and unmarshal the data into
	switch getType.SourceType {
	case "InstanceSourceDetails":
		var result instanceSourceDetails
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil

	case DiscriminatorTypeValues["InstanceSourceViaBootVolumeDetails"]:
		var result InstanceSourceViaBootVolumeDetails
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil

	case DiscriminatorTypeValues["InstanceSourceViaImageDetails"]:
		var result InstanceSourceViaImageDetails
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil

	}
	return nil, errors.New(422, "invalid sourceType value: %q", getType.SourceType)

}
