// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"encoding/json"
	"io"
	"io/ioutil"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DhcpDNSOptionAllOf1 dhcp Dns option all of1
// swagger:discriminator dhcpDnsOptionAllOf1 DomainNameServer
type DhcpDNSOptionAllOf1 interface {
	runtime.Validatable

	// If you set `serverType` to `CustomDnsServer`, specify the IP address
	// of at least one DNS server of your choice (three maximum).
	//
	// Max Items: 3
	CustomDNSServers() []string
	SetCustomDNSServers([]string)

	// - **VcnLocal:** Reserved for future use.
	//
	// - **VcnLocalPlusInternet:** Also referred to as "Internet and VCN Resolver".
	// Instances can resolve internet hostnames (no Internet Gateway is required),
	// and can resolve hostnames of instances in the VCN. This is the default
	// value in the default set of DHCP options in the VCN. For the Internet and
	// VCN Resolver to work across the VCN, there must also be a DNS label set for
	// the VCN, a DNS label set for each subnet, and a hostname for each instance.
	// The Internet and VCN Resolver also enables reverse DNS lookup, which lets
	// you determine the hostname corresponding to the private IP address. For more
	// information, see
	// [DNS in Your Virtual Cloud Network](/Content/Network/Concepts/dns.htm).
	//
	// - **CustomDnsServer:** Instances use a DNS server of your choice (three maximum).
	//
	// Required: true
	ServerType() *string
	SetServerType(*string)
}

type dhcpDnsOptionAllOf1 struct {
	customDnsServersField []string

	serverTypeField *string
}

func (m *dhcpDnsOptionAllOf1) CustomDNSServers() []string {
	return m.customDnsServersField
}
func (m *dhcpDnsOptionAllOf1) SetCustomDNSServers(val []string) {
	m.customDnsServersField = val
}

func (m *dhcpDnsOptionAllOf1) ServerType() *string {
	return m.serverTypeField
}
func (m *dhcpDnsOptionAllOf1) SetServerType(val *string) {
	m.serverTypeField = val
}

// Validate validates this dhcp Dns option all of1
func (m *dhcpDnsOptionAllOf1) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCustomDNSServers(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateServerType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *dhcpDnsOptionAllOf1) validateCustomDNSServers(formats strfmt.Registry) error {

	if swag.IsZero(m.CustomDNSServers()) { // not required
		return nil
	}

	iCustomDNSServersSize := int64(len(m.CustomDNSServers()))

	if err := validate.MaxItems("customDnsServers", "body", iCustomDNSServersSize, 3); err != nil {
		return err
	}

	return nil
}

var dhcpDnsOptionAllOf1TypeServerTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["VcnLocal","VcnLocalPlusInternet","CustomDnsServer"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		dhcpDnsOptionAllOf1TypeServerTypePropEnum = append(dhcpDnsOptionAllOf1TypeServerTypePropEnum, v)
	}
}

const (

	// DhcpDNSOptionAllOf1ServerTypeVcnLocal captures enum value "VcnLocal"
	DhcpDNSOptionAllOf1ServerTypeVcnLocal string = "VcnLocal"

	// DhcpDNSOptionAllOf1ServerTypeVcnLocalPlusInternet captures enum value "VcnLocalPlusInternet"
	DhcpDNSOptionAllOf1ServerTypeVcnLocalPlusInternet string = "VcnLocalPlusInternet"

	// DhcpDNSOptionAllOf1ServerTypeCustomDNSServer captures enum value "CustomDnsServer"
	DhcpDNSOptionAllOf1ServerTypeCustomDNSServer string = "CustomDnsServer"
)

// prop value enum
func (m *dhcpDnsOptionAllOf1) validateServerTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, dhcpDnsOptionAllOf1TypeServerTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *dhcpDnsOptionAllOf1) validateServerType(formats strfmt.Registry) error {

	if err := validate.Required("serverType", "body", m.ServerType()); err != nil {
		return err
	}

	// value enum
	if err := m.validateServerTypeEnum("serverType", "body", *m.ServerType()); err != nil {
		return err
	}

	return nil
}

// UnmarshalDhcpDNSOptionAllOf1Slice unmarshals polymorphic slices of DhcpDNSOptionAllOf1
func UnmarshalDhcpDNSOptionAllOf1Slice(reader io.Reader, consumer runtime.Consumer) ([]DhcpDNSOptionAllOf1, error) {
	var elements []json.RawMessage
	if err := consumer.Consume(reader, &elements); err != nil {
		return nil, err
	}

	var result []DhcpDNSOptionAllOf1
	for _, element := range elements {
		obj, err := unmarshalDhcpDNSOptionAllOf1(element, consumer)
		if err != nil {
			return nil, err
		}
		result = append(result, obj)
	}
	return result, nil
}

// UnmarshalDhcpDNSOptionAllOf1 unmarshals polymorphic DhcpDNSOptionAllOf1
func UnmarshalDhcpDNSOptionAllOf1(reader io.Reader, consumer runtime.Consumer) (DhcpDNSOptionAllOf1, error) {
	// we need to read this twice, so first into a buffer
	data, err := ioutil.ReadAll(reader)
	if err != nil {
		return nil, err
	}
	return unmarshalDhcpDNSOptionAllOf1(data, consumer)
}

func unmarshalDhcpDNSOptionAllOf1(data []byte, consumer runtime.Consumer) (DhcpDNSOptionAllOf1, error) {
	buf := bytes.NewBuffer(data)
	buf2 := bytes.NewBuffer(data)

	// the first time this is read is to fetch the value of the DomainNameServer property.
	var getType struct {
		DomainNameServer string `json:"DomainNameServer"`
	}
	if err := consumer.Consume(buf, &getType); err != nil {
		return nil, err
	}

	if err := validate.RequiredString("DomainNameServer", "body", getType.DomainNameServer); err != nil {
		return nil, err
	}

	// The value of DomainNameServer is used to determine which type to create and unmarshal the data into
	switch getType.DomainNameServer {
	case "DhcpDnsOption":
		var result DhcpDNSOption
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil

	case "dhcpDnsOptionAllOf1":
		var result dhcpDnsOptionAllOf1
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil

	}
	return nil, errors.New(422, "invalid DomainNameServer value: %q", getType.DomainNameServer)

}
