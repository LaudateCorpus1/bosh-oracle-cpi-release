// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"encoding/json"
	"io"
	"io/ioutil"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/validate"
)

// ExportImageViaObjectStorageURIDetailsAllOf1 export image via object storage Uri details all of1
// swagger:discriminator exportImageViaObjectStorageUriDetailsAllOf1 objectStorageUri
type ExportImageViaObjectStorageURIDetailsAllOf1 interface {
	runtime.Validatable

	// The Object Storage URL to export the image to. See [Object Storage URLs](/Content/Compute/Tasks/imageimportexport.htm#URLs)
	// and [pre-authenticated requests](/Content/Object/Tasks/managingaccess.htm#pre-auth) for constructing URLs for image import/export.
	//
	// Required: true
	DestinationURI() *string
	SetDestinationURI(*string)
}

type exportImageViaObjectStorageUriDetailsAllOf1 struct {
	destinationUriField *string
}

func (m *exportImageViaObjectStorageUriDetailsAllOf1) DestinationURI() *string {
	return m.destinationUriField
}
func (m *exportImageViaObjectStorageUriDetailsAllOf1) SetDestinationURI(val *string) {
	m.destinationUriField = val
}

// Validate validates this export image via object storage Uri details all of1
func (m *exportImageViaObjectStorageUriDetailsAllOf1) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDestinationURI(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *exportImageViaObjectStorageUriDetailsAllOf1) validateDestinationURI(formats strfmt.Registry) error {

	if err := validate.Required("destinationUri", "body", m.DestinationURI()); err != nil {
		return err
	}

	return nil
}

// UnmarshalExportImageViaObjectStorageURIDetailsAllOf1Slice unmarshals polymorphic slices of ExportImageViaObjectStorageURIDetailsAllOf1
func UnmarshalExportImageViaObjectStorageURIDetailsAllOf1Slice(reader io.Reader, consumer runtime.Consumer) ([]ExportImageViaObjectStorageURIDetailsAllOf1, error) {
	var elements []json.RawMessage
	if err := consumer.Consume(reader, &elements); err != nil {
		return nil, err
	}

	var result []ExportImageViaObjectStorageURIDetailsAllOf1
	for _, element := range elements {
		obj, err := unmarshalExportImageViaObjectStorageURIDetailsAllOf1(element, consumer)
		if err != nil {
			return nil, err
		}
		result = append(result, obj)
	}
	return result, nil
}

// UnmarshalExportImageViaObjectStorageURIDetailsAllOf1 unmarshals polymorphic ExportImageViaObjectStorageURIDetailsAllOf1
func UnmarshalExportImageViaObjectStorageURIDetailsAllOf1(reader io.Reader, consumer runtime.Consumer) (ExportImageViaObjectStorageURIDetailsAllOf1, error) {
	// we need to read this twice, so first into a buffer
	data, err := ioutil.ReadAll(reader)
	if err != nil {
		return nil, err
	}
	return unmarshalExportImageViaObjectStorageURIDetailsAllOf1(data, consumer)
}

func unmarshalExportImageViaObjectStorageURIDetailsAllOf1(data []byte, consumer runtime.Consumer) (ExportImageViaObjectStorageURIDetailsAllOf1, error) {
	buf := bytes.NewBuffer(data)
	buf2 := bytes.NewBuffer(data)

	// the first time this is read is to fetch the value of the objectStorageUri property.
	var getType struct {
		ObjectStorageURI string `json:"objectStorageUri"`
	}
	if err := consumer.Consume(buf, &getType); err != nil {
		return nil, err
	}

	if err := validate.RequiredString("objectStorageUri", "body", getType.ObjectStorageURI); err != nil {
		return nil, err
	}

	// The value of objectStorageUri is used to determine which type to create and unmarshal the data into
	switch getType.ObjectStorageURI {
	case "ExportImageViaObjectStorageUriDetails":
		var result ExportImageViaObjectStorageURIDetails
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil

	case "exportImageViaObjectStorageUriDetailsAllOf1":
		var result exportImageViaObjectStorageUriDetailsAllOf1
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil

	}
	return nil, errors.New(422, "invalid objectStorageUri value: %q", getType.ObjectStorageURI)

}
