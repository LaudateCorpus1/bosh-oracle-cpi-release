// Code generated by go-swagger; DO NOT EDIT.

package virtual_network

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "oracle/oci/core/models"
)

// CreateRemotePeeringConnectionReader is a Reader for the CreateRemotePeeringConnection structure.
type CreateRemotePeeringConnectionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateRemotePeeringConnectionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewCreateRemotePeeringConnectionOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewCreateRemotePeeringConnectionBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewCreateRemotePeeringConnectionUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewCreateRemotePeeringConnectionNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 409:
		result := NewCreateRemotePeeringConnectionConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewCreateRemotePeeringConnectionInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewCreateRemotePeeringConnectionDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewCreateRemotePeeringConnectionOK creates a CreateRemotePeeringConnectionOK with default headers values
func NewCreateRemotePeeringConnectionOK() *CreateRemotePeeringConnectionOK {
	return &CreateRemotePeeringConnectionOK{}
}

/*CreateRemotePeeringConnectionOK handles this case with default header values.

The remote peering connection was created.
*/
type CreateRemotePeeringConnectionOK struct {
	/*For optimistic concurrency control. See `if-match`.
	 */
	Etag string
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.RemotePeeringConnection
}

func (o *CreateRemotePeeringConnectionOK) Error() string {
	return fmt.Sprintf("[POST /remotePeeringConnections][%d] createRemotePeeringConnectionOK  %+v", 200, o.Payload)
}

func (o *CreateRemotePeeringConnectionOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header etag
	o.Etag = response.GetHeader("etag")

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.RemotePeeringConnection)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateRemotePeeringConnectionBadRequest creates a CreateRemotePeeringConnectionBadRequest with default headers values
func NewCreateRemotePeeringConnectionBadRequest() *CreateRemotePeeringConnectionBadRequest {
	return &CreateRemotePeeringConnectionBadRequest{}
}

/*CreateRemotePeeringConnectionBadRequest handles this case with default header values.

Bad Request
*/
type CreateRemotePeeringConnectionBadRequest struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *CreateRemotePeeringConnectionBadRequest) Error() string {
	return fmt.Sprintf("[POST /remotePeeringConnections][%d] createRemotePeeringConnectionBadRequest  %+v", 400, o.Payload)
}

func (o *CreateRemotePeeringConnectionBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateRemotePeeringConnectionUnauthorized creates a CreateRemotePeeringConnectionUnauthorized with default headers values
func NewCreateRemotePeeringConnectionUnauthorized() *CreateRemotePeeringConnectionUnauthorized {
	return &CreateRemotePeeringConnectionUnauthorized{}
}

/*CreateRemotePeeringConnectionUnauthorized handles this case with default header values.

Unauthorized
*/
type CreateRemotePeeringConnectionUnauthorized struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *CreateRemotePeeringConnectionUnauthorized) Error() string {
	return fmt.Sprintf("[POST /remotePeeringConnections][%d] createRemotePeeringConnectionUnauthorized  %+v", 401, o.Payload)
}

func (o *CreateRemotePeeringConnectionUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateRemotePeeringConnectionNotFound creates a CreateRemotePeeringConnectionNotFound with default headers values
func NewCreateRemotePeeringConnectionNotFound() *CreateRemotePeeringConnectionNotFound {
	return &CreateRemotePeeringConnectionNotFound{}
}

/*CreateRemotePeeringConnectionNotFound handles this case with default header values.

Not Found
*/
type CreateRemotePeeringConnectionNotFound struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *CreateRemotePeeringConnectionNotFound) Error() string {
	return fmt.Sprintf("[POST /remotePeeringConnections][%d] createRemotePeeringConnectionNotFound  %+v", 404, o.Payload)
}

func (o *CreateRemotePeeringConnectionNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateRemotePeeringConnectionConflict creates a CreateRemotePeeringConnectionConflict with default headers values
func NewCreateRemotePeeringConnectionConflict() *CreateRemotePeeringConnectionConflict {
	return &CreateRemotePeeringConnectionConflict{}
}

/*CreateRemotePeeringConnectionConflict handles this case with default header values.

Conflict
*/
type CreateRemotePeeringConnectionConflict struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *CreateRemotePeeringConnectionConflict) Error() string {
	return fmt.Sprintf("[POST /remotePeeringConnections][%d] createRemotePeeringConnectionConflict  %+v", 409, o.Payload)
}

func (o *CreateRemotePeeringConnectionConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateRemotePeeringConnectionInternalServerError creates a CreateRemotePeeringConnectionInternalServerError with default headers values
func NewCreateRemotePeeringConnectionInternalServerError() *CreateRemotePeeringConnectionInternalServerError {
	return &CreateRemotePeeringConnectionInternalServerError{}
}

/*CreateRemotePeeringConnectionInternalServerError handles this case with default header values.

Internal Server Error
*/
type CreateRemotePeeringConnectionInternalServerError struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *CreateRemotePeeringConnectionInternalServerError) Error() string {
	return fmt.Sprintf("[POST /remotePeeringConnections][%d] createRemotePeeringConnectionInternalServerError  %+v", 500, o.Payload)
}

func (o *CreateRemotePeeringConnectionInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateRemotePeeringConnectionDefault creates a CreateRemotePeeringConnectionDefault with default headers values
func NewCreateRemotePeeringConnectionDefault(code int) *CreateRemotePeeringConnectionDefault {
	return &CreateRemotePeeringConnectionDefault{
		_statusCode: code,
	}
}

/*CreateRemotePeeringConnectionDefault handles this case with default header values.

An error has occurred.
*/
type CreateRemotePeeringConnectionDefault struct {
	_statusCode int

	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

// Code gets the status code for the create remote peering connection default response
func (o *CreateRemotePeeringConnectionDefault) Code() int {
	return o._statusCode
}

func (o *CreateRemotePeeringConnectionDefault) Error() string {
	return fmt.Sprintf("[POST /remotePeeringConnections][%d] CreateRemotePeeringConnection default  %+v", o._statusCode, o.Payload)
}

func (o *CreateRemotePeeringConnectionDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
