// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"encoding/json"
	"io"
	"io/ioutil"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AttachVolumeDetails attach volume details
// swagger:discriminator AttachVolumeDetails type
type AttachVolumeDetails interface {
	runtime.Validatable

	// A user-friendly name. Does not have to be unique, and it cannot be changed. Avoid entering confidential information.
	//
	// Max Length: 255
	// Min Length: 1
	DisplayName() string
	SetDisplayName(string)

	// The OCID of the instance.
	// Required: true
	// Max Length: 255
	// Min Length: 1
	InstanceID() *string
	SetInstanceID(*string)

	// Whether the attachment was created in read-only mode.
	IsReadOnly() bool
	SetIsReadOnly(bool)

	// The type of volume. The only supported value are "iscsi" and "paravirtualized".
	// Required: true
	// Max Length: 255
	// Min Length: 1
	Type() string
	SetType(string)

	// The OCID of the volume.
	// Required: true
	// Max Length: 255
	// Min Length: 1
	VolumeID() *string
	SetVolumeID(*string)
}

type attachVolumeDetails struct {
	displayNameField string

	instanceIdField *string

	isReadOnlyField bool

	typeField string

	volumeIdField *string
}

func (m *attachVolumeDetails) DisplayName() string {
	return m.displayNameField
}
func (m *attachVolumeDetails) SetDisplayName(val string) {
	m.displayNameField = val
}

func (m *attachVolumeDetails) InstanceID() *string {
	return m.instanceIdField
}
func (m *attachVolumeDetails) SetInstanceID(val *string) {
	m.instanceIdField = val
}

func (m *attachVolumeDetails) IsReadOnly() bool {
	return m.isReadOnlyField
}
func (m *attachVolumeDetails) SetIsReadOnly(val bool) {
	m.isReadOnlyField = val
}

func (m *attachVolumeDetails) Type() string {
	return "AttachVolumeDetails"
}
func (m *attachVolumeDetails) SetType(val string) {

}

func (m *attachVolumeDetails) VolumeID() *string {
	return m.volumeIdField
}
func (m *attachVolumeDetails) SetVolumeID(val *string) {
	m.volumeIdField = val
}

// Validate validates this attach volume details
func (m *attachVolumeDetails) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDisplayName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateInstanceID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateVolumeID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *attachVolumeDetails) validateDisplayName(formats strfmt.Registry) error {

	if swag.IsZero(m.DisplayName()) { // not required
		return nil
	}

	if err := validate.MinLength("displayName", "body", string(m.DisplayName()), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("displayName", "body", string(m.DisplayName()), 255); err != nil {
		return err
	}

	return nil
}

func (m *attachVolumeDetails) validateInstanceID(formats strfmt.Registry) error {

	if err := validate.Required("instanceId", "body", m.InstanceID()); err != nil {
		return err
	}

	if err := validate.MinLength("instanceId", "body", string(*m.InstanceID()), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("instanceId", "body", string(*m.InstanceID()), 255); err != nil {
		return err
	}

	return nil
}

func (m *attachVolumeDetails) validateVolumeID(formats strfmt.Registry) error {

	if err := validate.Required("volumeId", "body", m.VolumeID()); err != nil {
		return err
	}

	if err := validate.MinLength("volumeId", "body", string(*m.VolumeID()), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("volumeId", "body", string(*m.VolumeID()), 255); err != nil {
		return err
	}

	return nil
}

// UnmarshalAttachVolumeDetailsSlice unmarshals polymorphic slices of AttachVolumeDetails
func UnmarshalAttachVolumeDetailsSlice(reader io.Reader, consumer runtime.Consumer) ([]AttachVolumeDetails, error) {
	var elements []json.RawMessage
	if err := consumer.Consume(reader, &elements); err != nil {
		return nil, err
	}

	var result []AttachVolumeDetails
	for _, element := range elements {
		obj, err := unmarshalAttachVolumeDetails(element, consumer)
		if err != nil {
			return nil, err
		}
		result = append(result, obj)
	}
	return result, nil
}

// UnmarshalAttachVolumeDetails unmarshals polymorphic AttachVolumeDetails
func UnmarshalAttachVolumeDetails(reader io.Reader, consumer runtime.Consumer) (AttachVolumeDetails, error) {
	// we need to read this twice, so first into a buffer
	data, err := ioutil.ReadAll(reader)
	if err != nil {
		return nil, err
	}
	return unmarshalAttachVolumeDetails(data, consumer)
}

func unmarshalAttachVolumeDetails(data []byte, consumer runtime.Consumer) (AttachVolumeDetails, error) {
	buf := bytes.NewBuffer(data)
	buf2 := bytes.NewBuffer(data)

	// the first time this is read is to fetch the value of the type property.
	var getType struct {
		Type string `json:"type"`
	}
	if err := consumer.Consume(buf, &getType); err != nil {
		return nil, err
	}

	if err := validate.RequiredString("type", "body", getType.Type); err != nil {
		return nil, err
	}

	// The value of type is used to determine which type to create and unmarshal the data into
	switch getType.Type {
	case DiscriminatorTypeValues["AttachIScsiVolumeDetails"]:
		var result AttachIScsiVolumeDetails
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil

	case "AttachVolumeDetails":
		var result attachVolumeDetails
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil

	}
	return nil, errors.New(422, "invalid type value: %q", getType.Type)

}
