// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"encoding/json"
	"io"
	"io/ioutil"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/validate"
)

// ExportImageViaObjectStorageTupleDetailsAllOf1 export image via object storage tuple details all of1
// swagger:discriminator exportImageViaObjectStorageTupleDetailsAllOf1 objectStorageTuple
type ExportImageViaObjectStorageTupleDetailsAllOf1 interface {

	// The Object Storage bucket to export the image to.
	BucketName() string
	SetBucketName(string)

	// The Object Storage namespace to export the image to.
	NamespaceName() string
	SetNamespaceName(string)

	// The Object Storage object name for the exported image.
	ObjectName() string
	SetObjectName(string)
}

type exportImageViaObjectStorageTupleDetailsAllOf1 struct {
	bucketNameField string

	namespaceNameField string

	objectNameField string
}

func (m *exportImageViaObjectStorageTupleDetailsAllOf1) BucketName() string {
	return m.bucketNameField
}
func (m *exportImageViaObjectStorageTupleDetailsAllOf1) SetBucketName(val string) {
	m.bucketNameField = val
}

func (m *exportImageViaObjectStorageTupleDetailsAllOf1) NamespaceName() string {
	return m.namespaceNameField
}
func (m *exportImageViaObjectStorageTupleDetailsAllOf1) SetNamespaceName(val string) {
	m.namespaceNameField = val
}

func (m *exportImageViaObjectStorageTupleDetailsAllOf1) ObjectName() string {
	return m.objectNameField
}
func (m *exportImageViaObjectStorageTupleDetailsAllOf1) SetObjectName(val string) {
	m.objectNameField = val
}

// UnmarshalExportImageViaObjectStorageTupleDetailsAllOf1Slice unmarshals polymorphic slices of ExportImageViaObjectStorageTupleDetailsAllOf1
func UnmarshalExportImageViaObjectStorageTupleDetailsAllOf1Slice(reader io.Reader, consumer runtime.Consumer) ([]ExportImageViaObjectStorageTupleDetailsAllOf1, error) {
	var elements []json.RawMessage
	if err := consumer.Consume(reader, &elements); err != nil {
		return nil, err
	}

	var result []ExportImageViaObjectStorageTupleDetailsAllOf1
	for _, element := range elements {
		obj, err := unmarshalExportImageViaObjectStorageTupleDetailsAllOf1(element, consumer)
		if err != nil {
			return nil, err
		}
		result = append(result, obj)
	}
	return result, nil
}

// UnmarshalExportImageViaObjectStorageTupleDetailsAllOf1 unmarshals polymorphic ExportImageViaObjectStorageTupleDetailsAllOf1
func UnmarshalExportImageViaObjectStorageTupleDetailsAllOf1(reader io.Reader, consumer runtime.Consumer) (ExportImageViaObjectStorageTupleDetailsAllOf1, error) {
	// we need to read this twice, so first into a buffer
	data, err := ioutil.ReadAll(reader)
	if err != nil {
		return nil, err
	}
	return unmarshalExportImageViaObjectStorageTupleDetailsAllOf1(data, consumer)
}

func unmarshalExportImageViaObjectStorageTupleDetailsAllOf1(data []byte, consumer runtime.Consumer) (ExportImageViaObjectStorageTupleDetailsAllOf1, error) {
	buf := bytes.NewBuffer(data)
	buf2 := bytes.NewBuffer(data)

	// the first time this is read is to fetch the value of the objectStorageTuple property.
	var getType struct {
		ObjectStorageTuple string `json:"objectStorageTuple"`
	}
	if err := consumer.Consume(buf, &getType); err != nil {
		return nil, err
	}

	if err := validate.RequiredString("objectStorageTuple", "body", getType.ObjectStorageTuple); err != nil {
		return nil, err
	}

	// The value of objectStorageTuple is used to determine which type to create and unmarshal the data into
	switch getType.ObjectStorageTuple {
	case "ExportImageViaObjectStorageTupleDetails":
		var result ExportImageViaObjectStorageTupleDetails
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil

	case "exportImageViaObjectStorageTupleDetailsAllOf1":
		var result exportImageViaObjectStorageTupleDetailsAllOf1
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil

	}
	return nil, errors.New(422, "invalid objectStorageTuple value: %q", getType.ObjectStorageTuple)

}
