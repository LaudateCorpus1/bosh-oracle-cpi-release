// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AttachIScsiVolumeDetails attach i scsi volume details
// swagger:model AttachIScsiVolumeDetails
type AttachIScsiVolumeDetails struct {
	displayNameField string

	instanceIdField *string

	isReadOnlyField bool

	typeField string

	volumeIdField *string

	useChapField bool
}

func (m *AttachIScsiVolumeDetails) DisplayName() string {
	return m.displayNameField
}
func (m *AttachIScsiVolumeDetails) SetDisplayName(val string) {
	m.displayNameField = val
}

func (m *AttachIScsiVolumeDetails) InstanceID() *string {
	return m.instanceIdField
}
func (m *AttachIScsiVolumeDetails) SetInstanceID(val *string) {
	m.instanceIdField = val
}

func (m *AttachIScsiVolumeDetails) IsReadOnly() bool {
	return m.isReadOnlyField
}
func (m *AttachIScsiVolumeDetails) SetIsReadOnly(val bool) {
	m.isReadOnlyField = val
}

func (m *AttachIScsiVolumeDetails) Type() string {
	// return m.typeField
	return DiscriminatorTypeValues["AttachIScsiVolumeDetails"]
}
func (m *AttachIScsiVolumeDetails) SetType(val string) {
	m.typeField = val
}

func (m *AttachIScsiVolumeDetails) VolumeID() *string {
	return m.volumeIdField
}
func (m *AttachIScsiVolumeDetails) SetVolumeID(val *string) {
	m.volumeIdField = val
}

func (m *AttachIScsiVolumeDetails) UseChap() bool {
	return m.useChapField
}
func (m *AttachIScsiVolumeDetails) SetUseChap(val bool) {
	m.useChapField = val
}

// UnmarshalJSON unmarshals this object with a polymorphic type from a JSON structure
func (m *AttachIScsiVolumeDetails) UnmarshalJSON(raw []byte) error {
	var data struct {
	}
	buf := bytes.NewBuffer(raw)
	dec := json.NewDecoder(buf)
	dec.UseNumber()

	if err := dec.Decode(&data); err != nil {
		return err
	}

	var base struct {
		/* Just the base type fields. Used for unmashalling polymorphic types.*/

		DisplayName string `json:"displayName,omitempty"`

		InstanceID *string `json:"instanceId"`

		IsReadOnly bool `json:"isReadOnly,omitempty"`

		Type string `json:"type"`

		VolumeID *string `json:"volumeId"`

		UseChap bool `json:"useChap,omitempty"`
	}
	buf = bytes.NewBuffer(raw)
	dec = json.NewDecoder(buf)
	dec.UseNumber()

	if err := dec.Decode(&base); err != nil {
		return err
	}

	var result AttachIScsiVolumeDetails

	result.displayNameField = base.DisplayName

	result.instanceIdField = base.InstanceID

	result.isReadOnlyField = base.IsReadOnly

	if base.Type != result.Type() {
		/* Not the type we're looking for. */
		return errors.New(422, "invalid type value: %q", base.Type)
	}

	result.volumeIdField = base.VolumeID

	result.useChapField = base.UseChap

	*m = result

	return nil
}

// MarshalJSON marshals this object with a polymorphic type to a JSON structure
func (m AttachIScsiVolumeDetails) MarshalJSON() ([]byte, error) {
	var b1, b2, b3 []byte
	var err error
	b1, err = json.Marshal(struct {
	}{},
	)
	if err != nil {
		return nil, err
	}
	b2, err = json.Marshal(struct {
		DisplayName string `json:"displayName,omitempty"`

		InstanceID *string `json:"instanceId"`

		IsReadOnly bool `json:"isReadOnly,omitempty"`

		Type string `json:"type"`

		VolumeID *string `json:"volumeId"`

		UseChap bool `json:"useChap,omitempty"`
	}{

		DisplayName: m.DisplayName(),

		InstanceID: m.InstanceID(),

		IsReadOnly: m.IsReadOnly(),

		Type: m.Type(),

		VolumeID: m.VolumeID(),

		UseChap: m.UseChap(),
	},
	)
	if err != nil {
		return nil, err
	}

	return swag.ConcatJSON(b1, b2, b3), nil
}

// Validate validates this attach i scsi volume details
func (m *AttachIScsiVolumeDetails) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDisplayName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInstanceID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVolumeID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AttachIScsiVolumeDetails) validateDisplayName(formats strfmt.Registry) error {

	if swag.IsZero(m.DisplayName()) { // not required
		return nil
	}

	if err := validate.MinLength("displayName", "body", string(m.DisplayName()), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("displayName", "body", string(m.DisplayName()), 255); err != nil {
		return err
	}

	return nil
}

func (m *AttachIScsiVolumeDetails) validateInstanceID(formats strfmt.Registry) error {

	if err := validate.Required("instanceId", "body", m.InstanceID()); err != nil {
		return err
	}

	if err := validate.MinLength("instanceId", "body", string(*m.InstanceID()), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("instanceId", "body", string(*m.InstanceID()), 255); err != nil {
		return err
	}

	return nil
}

func (m *AttachIScsiVolumeDetails) validateType(formats strfmt.Registry) error {

	if err := validate.RequiredString("type", "body", string(m.Type())); err != nil {
		return err
	}

	if err := validate.MinLength("type", "body", string(m.Type()), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("type", "body", string(m.Type()), 255); err != nil {
		return err
	}

	return nil
}

func (m *AttachIScsiVolumeDetails) validateVolumeID(formats strfmt.Registry) error {

	if err := validate.Required("volumeId", "body", m.VolumeID()); err != nil {
		return err
	}

	if err := validate.MinLength("volumeId", "body", string(*m.VolumeID()), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("volumeId", "body", string(*m.VolumeID()), 255); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AttachIScsiVolumeDetails) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AttachIScsiVolumeDetails) UnmarshalBinary(b []byte) error {
	var res AttachIScsiVolumeDetails
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
