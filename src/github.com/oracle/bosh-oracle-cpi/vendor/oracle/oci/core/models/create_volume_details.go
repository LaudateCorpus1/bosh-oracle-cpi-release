// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"encoding/json"
	"io"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateVolumeDetails create volume details
// swagger:model CreateVolumeDetails
type CreateVolumeDetails struct {

	// The Availability Domain of the volume.
	//
	// Example: `Uocm:PHX-AD-1`
	//
	// Required: true
	// Max Length: 255
	// Min Length: 1
	AvailabilityDomain *string `json:"availabilityDomain"`

	// If provided, specifies the ID of the volume backup policy to assign to the newly
	// created volume. If omitted, no policy will be assigned.
	//
	// Max Length: 255
	// Min Length: 1
	BackupPolicyID string `json:"backupPolicyId,omitempty"`

	// The OCID of the compartment that contains the volume.
	// Required: true
	// Max Length: 255
	// Min Length: 1
	CompartmentID *string `json:"compartmentId"`

	// Defined tags for this resource. Each key is predefined and scoped to a namespace.
	// For more information, see [Resource Tags](/Content/General/Concepts/resourcetags.htm).
	//
	// Example: `{"Operations": {"CostCenter": "42"}}`
	//
	DefinedTags map[string]map[string]interface{} `json:"definedTags,omitempty"`

	// A user-friendly name. Does not have to be unique, and it's changeable.
	// Avoid entering confidential information.
	//
	// Max Length: 255
	// Min Length: 1
	DisplayName string `json:"displayName,omitempty"`

	// Free-form tags for this resource. Each tag is a simple key-value pair with no
	// predefined name, type, or namespace. For more information, see
	// [Resource Tags](/Content/General/Concepts/resourcetags.htm).
	//
	// Example: `{"Department": "Finance"}`
	//
	FreeformTags map[string]string `json:"freeformTags,omitempty"`

	// The size of the volume in GBs.
	SizeInGBs int64 `json:"sizeInGBs,omitempty"`

	// The size of the volume in MBs. The value must be a multiple of 1024.
	// This field is deprecated. Use sizeInGBs instead.
	//
	SizeInMBs int64 `json:"sizeInMBs,omitempty"`

	sourceDetailsField VolumeSourceDetails

	// The OCID of the volume backup from which the data should be restored on the newly created volume.
	// This field is deprecated. Use the sourceDetails field instead to specify the
	// backup for the volume.
	//
	// Max Length: 255
	// Min Length: 1
	VolumeBackupID string `json:"volumeBackupId,omitempty"`
}

func (m *CreateVolumeDetails) SourceDetails() VolumeSourceDetails {
	return m.sourceDetailsField
}
func (m *CreateVolumeDetails) SetSourceDetails(val VolumeSourceDetails) {
	m.sourceDetailsField = val
}

// UnmarshalJSON unmarshals this object with a polymorphic type from a JSON structure
func (m *CreateVolumeDetails) UnmarshalJSON(raw []byte) error {
	var data struct {
		AvailabilityDomain *string `json:"availabilityDomain"`

		BackupPolicyID string `json:"backupPolicyId,omitempty"`

		CompartmentID *string `json:"compartmentId"`

		DefinedTags map[string]map[string]interface{} `json:"definedTags,omitempty"`

		DisplayName string `json:"displayName,omitempty"`

		FreeformTags map[string]string `json:"freeformTags,omitempty"`

		SizeInGBs int64 `json:"sizeInGBs,omitempty"`

		SizeInMBs int64 `json:"sizeInMBs,omitempty"`

		SourceDetails json.RawMessage `json:"sourceDetails,omitempty"`

		VolumeBackupID string `json:"volumeBackupId,omitempty"`
	}
	buf := bytes.NewBuffer(raw)
	dec := json.NewDecoder(buf)
	dec.UseNumber()

	if err := dec.Decode(&data); err != nil {
		return err
	}

	sourceDetails, err := UnmarshalVolumeSourceDetails(bytes.NewBuffer(data.SourceDetails), runtime.JSONConsumer())
	if err != nil && err != io.EOF {
		return err
	}

	var result CreateVolumeDetails

	// availabilityDomain
	result.AvailabilityDomain = data.AvailabilityDomain

	// backupPolicyId
	result.BackupPolicyID = data.BackupPolicyID

	// compartmentId
	result.CompartmentID = data.CompartmentID

	// definedTags
	result.DefinedTags = data.DefinedTags

	// displayName
	result.DisplayName = data.DisplayName

	// freeformTags
	result.FreeformTags = data.FreeformTags

	// sizeInGBs
	result.SizeInGBs = data.SizeInGBs

	// sizeInMBs
	result.SizeInMBs = data.SizeInMBs

	// sourceDetails
	result.sourceDetailsField = sourceDetails

	// volumeBackupId
	result.VolumeBackupID = data.VolumeBackupID

	*m = result

	return nil
}

// MarshalJSON marshals this object with a polymorphic type to a JSON structure
func (m CreateVolumeDetails) MarshalJSON() ([]byte, error) {
	var b1, b2, b3 []byte
	var err error
	b1, err = json.Marshal(struct {
		AvailabilityDomain *string `json:"availabilityDomain"`

		BackupPolicyID string `json:"backupPolicyId,omitempty"`

		CompartmentID *string `json:"compartmentId"`

		DefinedTags map[string]map[string]interface{} `json:"definedTags,omitempty"`

		DisplayName string `json:"displayName,omitempty"`

		FreeformTags map[string]string `json:"freeformTags,omitempty"`

		SizeInGBs int64 `json:"sizeInGBs,omitempty"`

		SizeInMBs int64 `json:"sizeInMBs,omitempty"`

		VolumeBackupID string `json:"volumeBackupId,omitempty"`
	}{

		AvailabilityDomain: m.AvailabilityDomain,

		BackupPolicyID: m.BackupPolicyID,

		CompartmentID: m.CompartmentID,

		DefinedTags: m.DefinedTags,

		DisplayName: m.DisplayName,

		FreeformTags: m.FreeformTags,

		SizeInGBs: m.SizeInGBs,

		SizeInMBs: m.SizeInMBs,

		VolumeBackupID: m.VolumeBackupID,
	},
	)
	if err != nil {
		return nil, err
	}
	b2, err = json.Marshal(struct {
		SourceDetails VolumeSourceDetails `json:"sourceDetails,omitempty"`
	}{

		SourceDetails: m.sourceDetailsField,
	},
	)
	if err != nil {
		return nil, err
	}

	return swag.ConcatJSON(b1, b2, b3), nil
}

// Validate validates this create volume details
func (m *CreateVolumeDetails) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAvailabilityDomain(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateBackupPolicyID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateCompartmentID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateDisplayName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateVolumeBackupID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateVolumeDetails) validateAvailabilityDomain(formats strfmt.Registry) error {

	if err := validate.Required("availabilityDomain", "body", m.AvailabilityDomain); err != nil {
		return err
	}

	if err := validate.MinLength("availabilityDomain", "body", string(*m.AvailabilityDomain), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("availabilityDomain", "body", string(*m.AvailabilityDomain), 255); err != nil {
		return err
	}

	return nil
}

func (m *CreateVolumeDetails) validateBackupPolicyID(formats strfmt.Registry) error {

	if swag.IsZero(m.BackupPolicyID) { // not required
		return nil
	}

	if err := validate.MinLength("backupPolicyId", "body", string(m.BackupPolicyID), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("backupPolicyId", "body", string(m.BackupPolicyID), 255); err != nil {
		return err
	}

	return nil
}

func (m *CreateVolumeDetails) validateCompartmentID(formats strfmt.Registry) error {

	if err := validate.Required("compartmentId", "body", m.CompartmentID); err != nil {
		return err
	}

	if err := validate.MinLength("compartmentId", "body", string(*m.CompartmentID), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("compartmentId", "body", string(*m.CompartmentID), 255); err != nil {
		return err
	}

	return nil
}

func (m *CreateVolumeDetails) validateDisplayName(formats strfmt.Registry) error {

	if swag.IsZero(m.DisplayName) { // not required
		return nil
	}

	if err := validate.MinLength("displayName", "body", string(m.DisplayName), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("displayName", "body", string(m.DisplayName), 255); err != nil {
		return err
	}

	return nil
}

func (m *CreateVolumeDetails) validateVolumeBackupID(formats strfmt.Registry) error {

	if swag.IsZero(m.VolumeBackupID) { // not required
		return nil
	}

	if err := validate.MinLength("volumeBackupId", "body", string(m.VolumeBackupID), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("volumeBackupId", "body", string(m.VolumeBackupID), 255); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CreateVolumeDetails) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateVolumeDetails) UnmarshalBinary(b []byte) error {
	var res CreateVolumeDetails
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
