// Code generated by go-swagger; DO NOT EDIT.

package virtual_network

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "oracle/oci/core/models"
)

// DeleteRemotePeeringConnectionReader is a Reader for the DeleteRemotePeeringConnection structure.
type DeleteRemotePeeringConnectionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteRemotePeeringConnectionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 204:
		result := NewDeleteRemotePeeringConnectionNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 401:
		result := NewDeleteRemotePeeringConnectionUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewDeleteRemotePeeringConnectionNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewDeleteRemotePeeringConnectionInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewDeleteRemotePeeringConnectionDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewDeleteRemotePeeringConnectionNoContent creates a DeleteRemotePeeringConnectionNoContent with default headers values
func NewDeleteRemotePeeringConnectionNoContent() *DeleteRemotePeeringConnectionNoContent {
	return &DeleteRemotePeeringConnectionNoContent{}
}

/*DeleteRemotePeeringConnectionNoContent handles this case with default header values.

The RPC is being deleted.
*/
type DeleteRemotePeeringConnectionNoContent struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string
}

func (o *DeleteRemotePeeringConnectionNoContent) Error() string {
	return fmt.Sprintf("[DELETE /remotePeeringConnections/{remotePeeringConnectionId}][%d] deleteRemotePeeringConnectionNoContent ", 204)
}

func (o *DeleteRemotePeeringConnectionNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	return nil
}

// NewDeleteRemotePeeringConnectionUnauthorized creates a DeleteRemotePeeringConnectionUnauthorized with default headers values
func NewDeleteRemotePeeringConnectionUnauthorized() *DeleteRemotePeeringConnectionUnauthorized {
	return &DeleteRemotePeeringConnectionUnauthorized{}
}

/*DeleteRemotePeeringConnectionUnauthorized handles this case with default header values.

Unauthorized
*/
type DeleteRemotePeeringConnectionUnauthorized struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *DeleteRemotePeeringConnectionUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /remotePeeringConnections/{remotePeeringConnectionId}][%d] deleteRemotePeeringConnectionUnauthorized  %+v", 401, o.Payload)
}

func (o *DeleteRemotePeeringConnectionUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteRemotePeeringConnectionNotFound creates a DeleteRemotePeeringConnectionNotFound with default headers values
func NewDeleteRemotePeeringConnectionNotFound() *DeleteRemotePeeringConnectionNotFound {
	return &DeleteRemotePeeringConnectionNotFound{}
}

/*DeleteRemotePeeringConnectionNotFound handles this case with default header values.

Not Found
*/
type DeleteRemotePeeringConnectionNotFound struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *DeleteRemotePeeringConnectionNotFound) Error() string {
	return fmt.Sprintf("[DELETE /remotePeeringConnections/{remotePeeringConnectionId}][%d] deleteRemotePeeringConnectionNotFound  %+v", 404, o.Payload)
}

func (o *DeleteRemotePeeringConnectionNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteRemotePeeringConnectionInternalServerError creates a DeleteRemotePeeringConnectionInternalServerError with default headers values
func NewDeleteRemotePeeringConnectionInternalServerError() *DeleteRemotePeeringConnectionInternalServerError {
	return &DeleteRemotePeeringConnectionInternalServerError{}
}

/*DeleteRemotePeeringConnectionInternalServerError handles this case with default header values.

Internal Server Error
*/
type DeleteRemotePeeringConnectionInternalServerError struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *DeleteRemotePeeringConnectionInternalServerError) Error() string {
	return fmt.Sprintf("[DELETE /remotePeeringConnections/{remotePeeringConnectionId}][%d] deleteRemotePeeringConnectionInternalServerError  %+v", 500, o.Payload)
}

func (o *DeleteRemotePeeringConnectionInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteRemotePeeringConnectionDefault creates a DeleteRemotePeeringConnectionDefault with default headers values
func NewDeleteRemotePeeringConnectionDefault(code int) *DeleteRemotePeeringConnectionDefault {
	return &DeleteRemotePeeringConnectionDefault{
		_statusCode: code,
	}
}

/*DeleteRemotePeeringConnectionDefault handles this case with default header values.

An error has occurred.
*/
type DeleteRemotePeeringConnectionDefault struct {
	_statusCode int

	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

// Code gets the status code for the delete remote peering connection default response
func (o *DeleteRemotePeeringConnectionDefault) Code() int {
	return o._statusCode
}

func (o *DeleteRemotePeeringConnectionDefault) Error() string {
	return fmt.Sprintf("[DELETE /remotePeeringConnections/{remotePeeringConnectionId}][%d] DeleteRemotePeeringConnection default  %+v", o._statusCode, o.Payload)
}

func (o *DeleteRemotePeeringConnectionDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
