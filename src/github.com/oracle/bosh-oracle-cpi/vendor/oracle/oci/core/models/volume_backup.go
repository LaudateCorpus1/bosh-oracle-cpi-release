// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// VolumeBackup A point-in-time copy of a volume that can then be used to create a new block volume
// or recover a block volume. For more information, see
// [Overview of Cloud Volume Storage](/Content/Block/Concepts/overview.htm).
//
// To use any of the API operations, you must be authorized in an IAM policy. If you're not authorized,
// talk to an administrator. If you're an administrator who needs to write policies to give users access, see
// [Getting Started with Policies](/Content/Identity/Concepts/policygetstarted.htm).
//
// swagger:model VolumeBackup
type VolumeBackup struct {

	// The OCID of the compartment that contains the volume backup.
	// Required: true
	// Max Length: 255
	// Min Length: 1
	CompartmentID *string `json:"compartmentId"`

	// Defined tags for this resource. Each key is predefined and scoped to a namespace.
	// For more information, see [Resource Tags](/Content/General/Concepts/resourcetags.htm).
	//
	// Example: `{"Operations": {"CostCenter": "42"}}`
	//
	DefinedTags map[string]map[string]interface{} `json:"definedTags,omitempty"`

	// A user-friendly name for the volume backup. Does not have to be unique and it's changeable.
	// Avoid entering confidential information.
	//
	// Required: true
	// Max Length: 255
	// Min Length: 1
	DisplayName *string `json:"displayName"`

	// The date and time the volume backup will expire and be automatically deleted.
	// Format defined by RFC3339. This parameter will always be present for backups that
	// were created automatically by a scheduled-backup policy. For manually created backups,
	// it will be absent, signifying that there is no expiration time and the backup will
	// last forever until manually deleted.
	//
	ExpirationTime strfmt.DateTime `json:"expirationTime,omitempty"`

	// Free-form tags for this resource. Each tag is a simple key-value pair with no
	// predefined name, type, or namespace. For more information, see
	// [Resource Tags](/Content/General/Concepts/resourcetags.htm).
	//
	// Example: `{"Department": "Finance"}`
	//
	FreeformTags map[string]string `json:"freeformTags,omitempty"`

	// The OCID of the volume backup.
	// Required: true
	// Max Length: 255
	// Min Length: 1
	ID *string `json:"id"`

	// The current state of a volume backup.
	// Required: true
	LifecycleState *string `json:"lifecycleState"`

	// The size of the volume, in GBs.
	//
	// Maximum: 16384
	// Minimum: 1
	SizeInGBs int64 `json:"sizeInGBs,omitempty"`

	// The size of the volume in MBs. The value must be a multiple of 1024.
	// This field is deprecated. Please use sizeInGBs.
	//
	// Maximum: 1.6777216e+07
	// Minimum: 1024
	SizeInMBs int64 `json:"sizeInMBs,omitempty"`

	// Specifies whether the backup was created manually, or via scheduled backup policy.
	SourceType string `json:"sourceType,omitempty"`

	// The date and time the volume backup was created. This is the time the actual point-in-time image
	// of the volume data was taken. Format defined by RFC3339.
	//
	// Required: true
	TimeCreated *strfmt.DateTime `json:"timeCreated"`

	// The date and time the request to create the volume backup was received. Format defined by RFC3339.
	//
	TimeRequestReceived strfmt.DateTime `json:"timeRequestReceived,omitempty"`

	// The type of a volume backup.
	// Required: true
	Type *string `json:"type"`

	// The size used by the backup, in GBs. It is typically smaller than sizeInGBs, depending on the space
	// consumed on the volume and whether the backup is full or incremental.
	//
	// Maximum: 16384
	// Minimum: 0
	UniqueSizeInGBs *int64 `json:"uniqueSizeInGBs,omitempty"`

	// The size used by the backup, in MBs. It is typically smaller than sizeInMBs, depending on the space
	// consumed on the volume and whether the backup is full or incremental.
	// This field is deprecated. Please use uniqueSizeInGBs.
	//
	// Maximum: 1.6777216e+07
	// Minimum: 0
	UniqueSizeInMbs *int64 `json:"uniqueSizeInMbs,omitempty"`

	// The OCID of the volume.
	// Max Length: 255
	// Min Length: 1
	VolumeID string `json:"volumeId,omitempty"`
}

// Validate validates this volume backup
func (m *VolumeBackup) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCompartmentID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateDisplayName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateExpirationTime(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateLifecycleState(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateSizeInGBs(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateSizeInMBs(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateSourceType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTimeCreated(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTimeRequestReceived(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateUniqueSizeInGBs(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateUniqueSizeInMbs(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateVolumeID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VolumeBackup) validateCompartmentID(formats strfmt.Registry) error {

	if err := validate.Required("compartmentId", "body", m.CompartmentID); err != nil {
		return err
	}

	if err := validate.MinLength("compartmentId", "body", string(*m.CompartmentID), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("compartmentId", "body", string(*m.CompartmentID), 255); err != nil {
		return err
	}

	return nil
}

func (m *VolumeBackup) validateDisplayName(formats strfmt.Registry) error {

	if err := validate.Required("displayName", "body", m.DisplayName); err != nil {
		return err
	}

	if err := validate.MinLength("displayName", "body", string(*m.DisplayName), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("displayName", "body", string(*m.DisplayName), 255); err != nil {
		return err
	}

	return nil
}

func (m *VolumeBackup) validateExpirationTime(formats strfmt.Registry) error {

	if swag.IsZero(m.ExpirationTime) { // not required
		return nil
	}

	if err := validate.FormatOf("expirationTime", "body", "date-time", m.ExpirationTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *VolumeBackup) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	if err := validate.MinLength("id", "body", string(*m.ID), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("id", "body", string(*m.ID), 255); err != nil {
		return err
	}

	return nil
}

var volumeBackupTypeLifecycleStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["CREATING","AVAILABLE","TERMINATING","TERMINATED","FAULTY","REQUEST_RECEIVED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		volumeBackupTypeLifecycleStatePropEnum = append(volumeBackupTypeLifecycleStatePropEnum, v)
	}
}

const (

	// VolumeBackupLifecycleStateCREATING captures enum value "CREATING"
	VolumeBackupLifecycleStateCREATING string = "CREATING"

	// VolumeBackupLifecycleStateAVAILABLE captures enum value "AVAILABLE"
	VolumeBackupLifecycleStateAVAILABLE string = "AVAILABLE"

	// VolumeBackupLifecycleStateTERMINATING captures enum value "TERMINATING"
	VolumeBackupLifecycleStateTERMINATING string = "TERMINATING"

	// VolumeBackupLifecycleStateTERMINATED captures enum value "TERMINATED"
	VolumeBackupLifecycleStateTERMINATED string = "TERMINATED"

	// VolumeBackupLifecycleStateFAULTY captures enum value "FAULTY"
	VolumeBackupLifecycleStateFAULTY string = "FAULTY"

	// VolumeBackupLifecycleStateREQUESTRECEIVED captures enum value "REQUEST_RECEIVED"
	VolumeBackupLifecycleStateREQUESTRECEIVED string = "REQUEST_RECEIVED"
)

// prop value enum
func (m *VolumeBackup) validateLifecycleStateEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, volumeBackupTypeLifecycleStatePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *VolumeBackup) validateLifecycleState(formats strfmt.Registry) error {

	if err := validate.Required("lifecycleState", "body", m.LifecycleState); err != nil {
		return err
	}

	// value enum
	if err := m.validateLifecycleStateEnum("lifecycleState", "body", *m.LifecycleState); err != nil {
		return err
	}

	return nil
}

func (m *VolumeBackup) validateSizeInGBs(formats strfmt.Registry) error {

	if swag.IsZero(m.SizeInGBs) { // not required
		return nil
	}

	if err := validate.MinimumInt("sizeInGBs", "body", int64(m.SizeInGBs), 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("sizeInGBs", "body", int64(m.SizeInGBs), 16384, false); err != nil {
		return err
	}

	return nil
}

func (m *VolumeBackup) validateSizeInMBs(formats strfmt.Registry) error {

	if swag.IsZero(m.SizeInMBs) { // not required
		return nil
	}

	if err := validate.MinimumInt("sizeInMBs", "body", int64(m.SizeInMBs), 1024, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("sizeInMBs", "body", int64(m.SizeInMBs), 1.6777216e+07, false); err != nil {
		return err
	}

	return nil
}

var volumeBackupTypeSourceTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["MANUAL","SCHEDULED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		volumeBackupTypeSourceTypePropEnum = append(volumeBackupTypeSourceTypePropEnum, v)
	}
}

const (

	// VolumeBackupSourceTypeMANUAL captures enum value "MANUAL"
	VolumeBackupSourceTypeMANUAL string = "MANUAL"

	// VolumeBackupSourceTypeSCHEDULED captures enum value "SCHEDULED"
	VolumeBackupSourceTypeSCHEDULED string = "SCHEDULED"
)

// prop value enum
func (m *VolumeBackup) validateSourceTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, volumeBackupTypeSourceTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *VolumeBackup) validateSourceType(formats strfmt.Registry) error {

	if swag.IsZero(m.SourceType) { // not required
		return nil
	}

	// value enum
	if err := m.validateSourceTypeEnum("sourceType", "body", m.SourceType); err != nil {
		return err
	}

	return nil
}

func (m *VolumeBackup) validateTimeCreated(formats strfmt.Registry) error {

	if err := validate.Required("timeCreated", "body", m.TimeCreated); err != nil {
		return err
	}

	if err := validate.FormatOf("timeCreated", "body", "date-time", m.TimeCreated.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *VolumeBackup) validateTimeRequestReceived(formats strfmt.Registry) error {

	if swag.IsZero(m.TimeRequestReceived) { // not required
		return nil
	}

	if err := validate.FormatOf("timeRequestReceived", "body", "date-time", m.TimeRequestReceived.String(), formats); err != nil {
		return err
	}

	return nil
}

var volumeBackupTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["FULL","INCREMENTAL"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		volumeBackupTypeTypePropEnum = append(volumeBackupTypeTypePropEnum, v)
	}
}

const (

	// VolumeBackupTypeFULL captures enum value "FULL"
	VolumeBackupTypeFULL string = "FULL"

	// VolumeBackupTypeINCREMENTAL captures enum value "INCREMENTAL"
	VolumeBackupTypeINCREMENTAL string = "INCREMENTAL"
)

// prop value enum
func (m *VolumeBackup) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, volumeBackupTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *VolumeBackup) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

func (m *VolumeBackup) validateUniqueSizeInGBs(formats strfmt.Registry) error {

	if swag.IsZero(m.UniqueSizeInGBs) { // not required
		return nil
	}

	if err := validate.MinimumInt("uniqueSizeInGBs", "body", int64(*m.UniqueSizeInGBs), 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("uniqueSizeInGBs", "body", int64(*m.UniqueSizeInGBs), 16384, false); err != nil {
		return err
	}

	return nil
}

func (m *VolumeBackup) validateUniqueSizeInMbs(formats strfmt.Registry) error {

	if swag.IsZero(m.UniqueSizeInMbs) { // not required
		return nil
	}

	if err := validate.MinimumInt("uniqueSizeInMbs", "body", int64(*m.UniqueSizeInMbs), 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("uniqueSizeInMbs", "body", int64(*m.UniqueSizeInMbs), 1.6777216e+07, false); err != nil {
		return err
	}

	return nil
}

func (m *VolumeBackup) validateVolumeID(formats strfmt.Registry) error {

	if swag.IsZero(m.VolumeID) { // not required
		return nil
	}

	if err := validate.MinLength("volumeId", "body", string(m.VolumeID), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("volumeId", "body", string(m.VolumeID), 255); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *VolumeBackup) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VolumeBackup) UnmarshalBinary(b []byte) error {
	var res VolumeBackup
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
