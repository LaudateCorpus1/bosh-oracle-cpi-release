// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ImageSourceViaObjectStorageTupleDetails image source via object storage tuple details
// swagger:model ImageSourceViaObjectStorageTupleDetails
type ImageSourceViaObjectStorageTupleDetails struct {
	sourceImageTypeField string

	sourceTypeField string

	bucketNameField *string

	namespaceNameField *string

	objectNameField *string
}

func (m *ImageSourceViaObjectStorageTupleDetails) SourceImageType() string {
	return m.sourceImageTypeField
}
func (m *ImageSourceViaObjectStorageTupleDetails) SetSourceImageType(val string) {
	m.sourceImageTypeField = val
}

func (m *ImageSourceViaObjectStorageTupleDetails) SourceType() string {
	//return m.sourceTypeField
	return DiscriminatorTypeValues["ImageSourceViaObjectStorageTupleDetails"]
}
func (m *ImageSourceViaObjectStorageTupleDetails) SetSourceType(val string) {
	m.sourceTypeField = val
}

func (m *ImageSourceViaObjectStorageTupleDetails) BucketName() *string {
	return m.bucketNameField
}
func (m *ImageSourceViaObjectStorageTupleDetails) SetBucketName(val *string) {
	m.bucketNameField = val
}

func (m *ImageSourceViaObjectStorageTupleDetails) NamespaceName() *string {
	return m.namespaceNameField
}
func (m *ImageSourceViaObjectStorageTupleDetails) SetNamespaceName(val *string) {
	m.namespaceNameField = val
}

func (m *ImageSourceViaObjectStorageTupleDetails) ObjectName() *string {
	return m.objectNameField
}
func (m *ImageSourceViaObjectStorageTupleDetails) SetObjectName(val *string) {
	m.objectNameField = val
}

// UnmarshalJSON unmarshals this object with a polymorphic type from a JSON structure
func (m *ImageSourceViaObjectStorageTupleDetails) UnmarshalJSON(raw []byte) error {
	var data struct {
	}
	buf := bytes.NewBuffer(raw)
	dec := json.NewDecoder(buf)
	dec.UseNumber()

	if err := dec.Decode(&data); err != nil {
		return err
	}

	var base struct {
		/* Just the base type fields. Used for unmashalling polymorphic types.*/

		SourceImageType string `json:"sourceImageType,omitempty"`

		SourceType string `json:"sourceType"`

		BucketName *string `json:"bucketName"`

		NamespaceName *string `json:"namespaceName"`

		ObjectName *string `json:"objectName"`
	}
	buf = bytes.NewBuffer(raw)
	dec = json.NewDecoder(buf)
	dec.UseNumber()

	if err := dec.Decode(&base); err != nil {
		return err
	}

	var result ImageSourceViaObjectStorageTupleDetails

	result.sourceImageTypeField = base.SourceImageType

	if base.SourceType != result.SourceType() {
		/* Not the type we're looking for. */
		return errors.New(422, "invalid sourceType value: %q", base.SourceType)
	}

	result.bucketNameField = base.BucketName

	result.namespaceNameField = base.NamespaceName

	result.objectNameField = base.ObjectName

	*m = result

	return nil
}

// MarshalJSON marshals this object with a polymorphic type to a JSON structure
func (m ImageSourceViaObjectStorageTupleDetails) MarshalJSON() ([]byte, error) {
	var b1, b2, b3 []byte
	var err error
	b1, err = json.Marshal(struct {
	}{},
	)
	if err != nil {
		return nil, err
	}
	b2, err = json.Marshal(struct {
		SourceImageType string `json:"sourceImageType,omitempty"`

		SourceType string `json:"sourceType"`

		BucketName *string `json:"bucketName"`

		NamespaceName *string `json:"namespaceName"`

		ObjectName *string `json:"objectName"`
	}{

		SourceImageType: m.SourceImageType(),

		SourceType: m.SourceType(),

		BucketName: m.BucketName(),

		NamespaceName: m.NamespaceName(),

		ObjectName: m.ObjectName(),
	},
	)
	if err != nil {
		return nil, err
	}

	return swag.ConcatJSON(b1, b2, b3), nil
}

// Validate validates this image source via object storage tuple details
func (m *ImageSourceViaObjectStorageTupleDetails) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSourceImageType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSourceType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBucketName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNamespaceName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateObjectName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var imageSourceViaObjectStorageTupleDetailsTypeSourceImageTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["QCOW2","VMDK"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		imageSourceViaObjectStorageTupleDetailsTypeSourceImageTypePropEnum = append(imageSourceViaObjectStorageTupleDetailsTypeSourceImageTypePropEnum, v)
	}
}

// property enum
func (m *ImageSourceViaObjectStorageTupleDetails) validateSourceImageTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, imageSourceViaObjectStorageTupleDetailsTypeSourceImageTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ImageSourceViaObjectStorageTupleDetails) validateSourceImageType(formats strfmt.Registry) error {

	if swag.IsZero(m.SourceImageType()) { // not required
		return nil
	}

	// value enum
	if err := m.validateSourceImageTypeEnum("sourceImageType", "body", m.SourceImageType()); err != nil {
		return err
	}

	return nil
}

func (m *ImageSourceViaObjectStorageTupleDetails) validateSourceType(formats strfmt.Registry) error {

	if err := validate.RequiredString("sourceType", "body", string(m.SourceType())); err != nil {
		return err
	}

	return nil
}

func (m *ImageSourceViaObjectStorageTupleDetails) validateBucketName(formats strfmt.Registry) error {

	if err := validate.Required("bucketName", "body", m.BucketName()); err != nil {
		return err
	}

	return nil
}

func (m *ImageSourceViaObjectStorageTupleDetails) validateNamespaceName(formats strfmt.Registry) error {

	if err := validate.Required("namespaceName", "body", m.NamespaceName()); err != nil {
		return err
	}

	return nil
}

func (m *ImageSourceViaObjectStorageTupleDetails) validateObjectName(formats strfmt.Registry) error {

	if err := validate.Required("objectName", "body", m.ObjectName()); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ImageSourceViaObjectStorageTupleDetails) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ImageSourceViaObjectStorageTupleDetails) UnmarshalBinary(b []byte) error {
	var res ImageSourceViaObjectStorageTupleDetails
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
