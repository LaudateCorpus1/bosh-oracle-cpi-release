// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// LaunchOptions Options for tuning compatibility and performance of VM shapes.
//
// swagger:model LaunchOptions
type LaunchOptions struct {

	// Emulation type for volume.
	// * `ISCSI` - ISCSI attached block storage device. This is the default for Boot Volumes and Remote Block
	// Storage volumes on Oracle provided images.
	// * `SCSI` - Emulated SCSI disk.
	// * `IDE` - Emulated IDE disk.
	// * `VFIO` - Direct attached Virtual Function storage.  This is the default option for Local data
	// volumes on Oracle provided images.
	//
	// Required: true
	BootVolumeType *string `json:"bootVolumeType"`

	// Firmware used to boot VM.  Select the option that matches your operating system.
	// * `BIOS` - Boot VM using BIOS style firmware.  This is compatible with both 32 bit and 64 bit operating
	// systems that boot using MBR style bootloaders.
	// * `UEFI_64` - Boot VM using UEFI style firmware compatible with 64 bit operating systems.  This is the
	// default for Oracle provided images.
	//
	// Required: true
	Firmware *string `json:"firmware"`

	// Emulation type for NIC.
	// * `E1000` - Emulated Gigabit ethernet controller.  Compatible with Linux e1000 network driver.
	// * `VFIO` - Direct attached Virtual Function network controller.  Default for Oracle provided images.
	//
	// Required: true
	NetworkType *string `json:"networkType"`

	// Emulation type for volume.
	// * `ISCSI` - ISCSI attached block storage device. This is the default for Boot Volumes and Remote Block
	// Storage volumes on Oracle provided images.
	// * `SCSI` - Emulated SCSI disk.
	// * `IDE` - Emulated IDE disk.
	// * `VFIO` - Direct attached Virtual Function storage.  This is the default option for Local data
	// volumes on Oracle provided images.
	//
	// Required: true
	RemoteDataVolumeType *string `json:"remoteDataVolumeType"`
}

// Validate validates this launch options
func (m *LaunchOptions) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBootVolumeType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateFirmware(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateNetworkType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateRemoteDataVolumeType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var launchOptionsTypeBootVolumeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ISCSI","SCSI","IDE","VFIO"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		launchOptionsTypeBootVolumeTypePropEnum = append(launchOptionsTypeBootVolumeTypePropEnum, v)
	}
}

const (

	// LaunchOptionsBootVolumeTypeISCSI captures enum value "ISCSI"
	LaunchOptionsBootVolumeTypeISCSI string = "ISCSI"

	// LaunchOptionsBootVolumeTypeSCSI captures enum value "SCSI"
	LaunchOptionsBootVolumeTypeSCSI string = "SCSI"

	// LaunchOptionsBootVolumeTypeIDE captures enum value "IDE"
	LaunchOptionsBootVolumeTypeIDE string = "IDE"

	// LaunchOptionsBootVolumeTypeVFIO captures enum value "VFIO"
	LaunchOptionsBootVolumeTypeVFIO string = "VFIO"
)

// prop value enum
func (m *LaunchOptions) validateBootVolumeTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, launchOptionsTypeBootVolumeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *LaunchOptions) validateBootVolumeType(formats strfmt.Registry) error {

	if err := validate.Required("bootVolumeType", "body", m.BootVolumeType); err != nil {
		return err
	}

	// value enum
	if err := m.validateBootVolumeTypeEnum("bootVolumeType", "body", *m.BootVolumeType); err != nil {
		return err
	}

	return nil
}

var launchOptionsTypeFirmwarePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["BIOS","UEFI_64"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		launchOptionsTypeFirmwarePropEnum = append(launchOptionsTypeFirmwarePropEnum, v)
	}
}

const (

	// LaunchOptionsFirmwareBIOS captures enum value "BIOS"
	LaunchOptionsFirmwareBIOS string = "BIOS"

	// LaunchOptionsFirmwareUEFI64 captures enum value "UEFI_64"
	LaunchOptionsFirmwareUEFI64 string = "UEFI_64"
)

// prop value enum
func (m *LaunchOptions) validateFirmwareEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, launchOptionsTypeFirmwarePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *LaunchOptions) validateFirmware(formats strfmt.Registry) error {

	if err := validate.Required("firmware", "body", m.Firmware); err != nil {
		return err
	}

	// value enum
	if err := m.validateFirmwareEnum("firmware", "body", *m.Firmware); err != nil {
		return err
	}

	return nil
}

var launchOptionsTypeNetworkTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["E1000","VFIO"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		launchOptionsTypeNetworkTypePropEnum = append(launchOptionsTypeNetworkTypePropEnum, v)
	}
}

const (

	// LaunchOptionsNetworkTypeE1000 captures enum value "E1000"
	LaunchOptionsNetworkTypeE1000 string = "E1000"

	// LaunchOptionsNetworkTypeVFIO captures enum value "VFIO"
	LaunchOptionsNetworkTypeVFIO string = "VFIO"
)

// prop value enum
func (m *LaunchOptions) validateNetworkTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, launchOptionsTypeNetworkTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *LaunchOptions) validateNetworkType(formats strfmt.Registry) error {

	if err := validate.Required("networkType", "body", m.NetworkType); err != nil {
		return err
	}

	// value enum
	if err := m.validateNetworkTypeEnum("networkType", "body", *m.NetworkType); err != nil {
		return err
	}

	return nil
}

var launchOptionsTypeRemoteDataVolumeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ISCSI","SCSI","IDE","VFIO"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		launchOptionsTypeRemoteDataVolumeTypePropEnum = append(launchOptionsTypeRemoteDataVolumeTypePropEnum, v)
	}
}

const (

	// LaunchOptionsRemoteDataVolumeTypeISCSI captures enum value "ISCSI"
	LaunchOptionsRemoteDataVolumeTypeISCSI string = "ISCSI"

	// LaunchOptionsRemoteDataVolumeTypeSCSI captures enum value "SCSI"
	LaunchOptionsRemoteDataVolumeTypeSCSI string = "SCSI"

	// LaunchOptionsRemoteDataVolumeTypeIDE captures enum value "IDE"
	LaunchOptionsRemoteDataVolumeTypeIDE string = "IDE"

	// LaunchOptionsRemoteDataVolumeTypeVFIO captures enum value "VFIO"
	LaunchOptionsRemoteDataVolumeTypeVFIO string = "VFIO"
)

// prop value enum
func (m *LaunchOptions) validateRemoteDataVolumeTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, launchOptionsTypeRemoteDataVolumeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *LaunchOptions) validateRemoteDataVolumeType(formats strfmt.Registry) error {

	if err := validate.Required("remoteDataVolumeType", "body", m.RemoteDataVolumeType); err != nil {
		return err
	}

	// value enum
	if err := m.validateRemoteDataVolumeTypeEnum("remoteDataVolumeType", "body", *m.RemoteDataVolumeType); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *LaunchOptions) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LaunchOptions) UnmarshalBinary(b []byte) error {
	var res LaunchOptions
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
