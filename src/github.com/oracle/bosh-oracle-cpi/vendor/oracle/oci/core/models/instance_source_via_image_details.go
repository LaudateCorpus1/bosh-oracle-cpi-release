// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// InstanceSourceViaImageDetails instance source via image details
// swagger:model InstanceSourceViaImageDetails
type InstanceSourceViaImageDetails struct {
	sourceTypeField string

	bootVolumeSizeInGBsField int64

	imageIdField *string
}

func (m *InstanceSourceViaImageDetails) SourceType() string {
	//return m.sourceTypeField
	return DiscriminatorTypeValues["InstanceSourceViaImageDetails"]
}
func (m *InstanceSourceViaImageDetails) SetSourceType(val string) {
	m.sourceTypeField = val
}

func (m *InstanceSourceViaImageDetails) BootVolumeSizeInGBs() int64 {
	return m.bootVolumeSizeInGBsField
}
func (m *InstanceSourceViaImageDetails) SetBootVolumeSizeInGBs(val int64) {
	m.bootVolumeSizeInGBsField = val
}

func (m *InstanceSourceViaImageDetails) ImageID() *string {
	return m.imageIdField
}
func (m *InstanceSourceViaImageDetails) SetImageID(val *string) {
	m.imageIdField = val
}

// UnmarshalJSON unmarshals this object with a polymorphic type from a JSON structure
func (m *InstanceSourceViaImageDetails) UnmarshalJSON(raw []byte) error {
	var data struct {
	}
	buf := bytes.NewBuffer(raw)
	dec := json.NewDecoder(buf)
	dec.UseNumber()

	if err := dec.Decode(&data); err != nil {
		return err
	}

	var base struct {
		/* Just the base type fields. Used for unmashalling polymorphic types.*/

		SourceType string `json:"sourceType"`

		BootVolumeSizeInGBs int64 `json:"bootVolumeSizeInGBs,omitempty"`

		ImageID *string `json:"imageId"`
	}
	buf = bytes.NewBuffer(raw)
	dec = json.NewDecoder(buf)
	dec.UseNumber()

	if err := dec.Decode(&base); err != nil {
		return err
	}

	var result InstanceSourceViaImageDetails

	if base.SourceType != result.SourceType() {
		/* Not the type we're looking for. */
		return errors.New(422, "invalid sourceType value: %q", base.SourceType)
	}

	result.bootVolumeSizeInGBsField = base.BootVolumeSizeInGBs

	result.imageIdField = base.ImageID

	*m = result

	return nil
}

// MarshalJSON marshals this object with a polymorphic type to a JSON structure
func (m InstanceSourceViaImageDetails) MarshalJSON() ([]byte, error) {
	var b1, b2, b3 []byte
	var err error
	b1, err = json.Marshal(struct {
	}{},
	)
	if err != nil {
		return nil, err
	}
	b2, err = json.Marshal(struct {
		SourceType string `json:"sourceType"`

		BootVolumeSizeInGBs int64 `json:"bootVolumeSizeInGBs,omitempty"`

		ImageID *string `json:"imageId"`
	}{

		SourceType: m.SourceType(),

		BootVolumeSizeInGBs: m.BootVolumeSizeInGBs(),

		ImageID: m.ImageID(),
	},
	)
	if err != nil {
		return nil, err
	}

	return swag.ConcatJSON(b1, b2, b3), nil
}

// Validate validates this instance source via image details
func (m *InstanceSourceViaImageDetails) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSourceType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateImageID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InstanceSourceViaImageDetails) validateSourceType(formats strfmt.Registry) error {

	if err := validate.RequiredString("sourceType", "body", string(m.SourceType())); err != nil {
		return err
	}

	return nil
}

func (m *InstanceSourceViaImageDetails) validateImageID(formats strfmt.Registry) error {

	if err := validate.Required("imageId", "body", m.ImageID()); err != nil {
		return err
	}

	if err := validate.MinLength("imageId", "body", string(*m.ImageID()), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("imageId", "body", string(*m.ImageID()), 255); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *InstanceSourceViaImageDetails) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *InstanceSourceViaImageDetails) UnmarshalBinary(b []byte) error {
	var res InstanceSourceViaImageDetails
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
