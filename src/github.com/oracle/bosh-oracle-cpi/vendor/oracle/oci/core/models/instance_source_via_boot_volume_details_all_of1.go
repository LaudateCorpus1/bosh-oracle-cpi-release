// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"encoding/json"
	"io"
	"io/ioutil"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/validate"
)

// InstanceSourceViaBootVolumeDetailsAllOf1 instance source via boot volume details all of1
// swagger:discriminator instanceSourceViaBootVolumeDetailsAllOf1 bootVolume
type InstanceSourceViaBootVolumeDetailsAllOf1 interface {
	runtime.Validatable

	// The OCID of the boot volume used to boot the instance.
	// Required: true
	// Max Length: 255
	// Min Length: 1
	BootVolumeID() *string
	SetBootVolumeID(*string)
}

type instanceSourceViaBootVolumeDetailsAllOf1 struct {
	bootVolumeIdField *string
}

func (m *instanceSourceViaBootVolumeDetailsAllOf1) BootVolumeID() *string {
	return m.bootVolumeIdField
}
func (m *instanceSourceViaBootVolumeDetailsAllOf1) SetBootVolumeID(val *string) {
	m.bootVolumeIdField = val
}

// Validate validates this instance source via boot volume details all of1
func (m *instanceSourceViaBootVolumeDetailsAllOf1) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBootVolumeID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *instanceSourceViaBootVolumeDetailsAllOf1) validateBootVolumeID(formats strfmt.Registry) error {

	if err := validate.Required("bootVolumeId", "body", m.BootVolumeID()); err != nil {
		return err
	}

	if err := validate.MinLength("bootVolumeId", "body", string(*m.BootVolumeID()), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("bootVolumeId", "body", string(*m.BootVolumeID()), 255); err != nil {
		return err
	}

	return nil
}

// UnmarshalInstanceSourceViaBootVolumeDetailsAllOf1Slice unmarshals polymorphic slices of InstanceSourceViaBootVolumeDetailsAllOf1
func UnmarshalInstanceSourceViaBootVolumeDetailsAllOf1Slice(reader io.Reader, consumer runtime.Consumer) ([]InstanceSourceViaBootVolumeDetailsAllOf1, error) {
	var elements []json.RawMessage
	if err := consumer.Consume(reader, &elements); err != nil {
		return nil, err
	}

	var result []InstanceSourceViaBootVolumeDetailsAllOf1
	for _, element := range elements {
		obj, err := unmarshalInstanceSourceViaBootVolumeDetailsAllOf1(element, consumer)
		if err != nil {
			return nil, err
		}
		result = append(result, obj)
	}
	return result, nil
}

// UnmarshalInstanceSourceViaBootVolumeDetailsAllOf1 unmarshals polymorphic InstanceSourceViaBootVolumeDetailsAllOf1
func UnmarshalInstanceSourceViaBootVolumeDetailsAllOf1(reader io.Reader, consumer runtime.Consumer) (InstanceSourceViaBootVolumeDetailsAllOf1, error) {
	// we need to read this twice, so first into a buffer
	data, err := ioutil.ReadAll(reader)
	if err != nil {
		return nil, err
	}
	return unmarshalInstanceSourceViaBootVolumeDetailsAllOf1(data, consumer)
}

func unmarshalInstanceSourceViaBootVolumeDetailsAllOf1(data []byte, consumer runtime.Consumer) (InstanceSourceViaBootVolumeDetailsAllOf1, error) {
	buf := bytes.NewBuffer(data)
	buf2 := bytes.NewBuffer(data)

	// the first time this is read is to fetch the value of the bootVolume property.
	var getType struct {
		BootVolume string `json:"bootVolume"`
	}
	if err := consumer.Consume(buf, &getType); err != nil {
		return nil, err
	}

	if err := validate.RequiredString("bootVolume", "body", getType.BootVolume); err != nil {
		return nil, err
	}

	// The value of bootVolume is used to determine which type to create and unmarshal the data into
	switch getType.BootVolume {
	case "InstanceSourceViaBootVolumeDetails":
		var result InstanceSourceViaBootVolumeDetails
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil

	case "instanceSourceViaBootVolumeDetailsAllOf1":
		var result instanceSourceViaBootVolumeDetailsAllOf1
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil

	}
	return nil, errors.New(422, "invalid bootVolume value: %q", getType.BootVolume)

}
