// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AttachVnicDetails attach vnic details
// swagger:model AttachVnicDetails
type AttachVnicDetails struct {

	// Details for creating a new VNIC.
	//
	// Required: true
	CreateVnicDetails *CreateVnicDetails `json:"createVnicDetails"`

	// A user-friendly name for the attachment. Does not have to be unique, and it cannot be changed.
	//
	// Max Length: 255
	// Min Length: 1
	DisplayName string `json:"displayName,omitempty"`

	// The OCID of the instance.
	// Required: true
	// Max Length: 255
	// Min Length: 1
	InstanceID *string `json:"instanceId"`

	// Which physical network interface card (NIC) the VNIC will use. Defaults to 0.
	// Certain bare metal instance shapes have two active physical NICs (0 and 1). If
	// you add a secondary VNIC to one of these instances, you can specify which NIC
	// the VNIC will use. For more information, see
	// [Virtual Network Interface Cards (VNICs)](/Content/Network/Tasks/managingVNICs.htm).
	//
	// Maximum: 31
	// Minimum: 0
	NicIndex *int32 `json:"nicIndex,omitempty"`
}

// Validate validates this attach vnic details
func (m *AttachVnicDetails) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreateVnicDetails(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateDisplayName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateInstanceID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateNicIndex(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AttachVnicDetails) validateCreateVnicDetails(formats strfmt.Registry) error {

	if err := validate.Required("createVnicDetails", "body", m.CreateVnicDetails); err != nil {
		return err
	}

	if m.CreateVnicDetails != nil {

		if err := m.CreateVnicDetails.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createVnicDetails")
			}
			return err
		}

	}

	return nil
}

func (m *AttachVnicDetails) validateDisplayName(formats strfmt.Registry) error {

	if swag.IsZero(m.DisplayName) { // not required
		return nil
	}

	if err := validate.MinLength("displayName", "body", string(m.DisplayName), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("displayName", "body", string(m.DisplayName), 255); err != nil {
		return err
	}

	return nil
}

func (m *AttachVnicDetails) validateInstanceID(formats strfmt.Registry) error {

	if err := validate.Required("instanceId", "body", m.InstanceID); err != nil {
		return err
	}

	if err := validate.MinLength("instanceId", "body", string(*m.InstanceID), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("instanceId", "body", string(*m.InstanceID), 255); err != nil {
		return err
	}

	return nil
}

func (m *AttachVnicDetails) validateNicIndex(formats strfmt.Registry) error {

	if swag.IsZero(m.NicIndex) { // not required
		return nil
	}

	if err := validate.MinimumInt("nicIndex", "body", int64(*m.NicIndex), 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("nicIndex", "body", int64(*m.NicIndex), 31, false); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AttachVnicDetails) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AttachVnicDetails) UnmarshalBinary(b []byte) error {
	var res AttachVnicDetails
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
