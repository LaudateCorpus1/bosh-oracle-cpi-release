// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// BootVolume A detachable boot volume device that contains the image used to boot an Compute instance. For more information, see
// [Overview of Boot Volumes](/Content/Block/Concepts/bootvolumes.htm).
//
// To use any of the API operations, you must be authorized in an IAM policy. If you're not authorized,
// talk to an administrator. If you're an administrator who needs to write policies to give users access, see
// [Getting Started with Policies](/Content/Identity/Concepts/policygetstarted.htm).
//
// swagger:model BootVolume
type BootVolume struct {

	// The Availability Domain of the boot volume.
	//
	// Example: `Uocm:PHX-AD-1`
	//
	// Required: true
	// Max Length: 255
	// Min Length: 1
	AvailabilityDomain *string `json:"availabilityDomain"`

	// The OCID of the compartment that contains the boot volume.
	// Required: true
	// Max Length: 255
	// Min Length: 1
	CompartmentID *string `json:"compartmentId"`

	// A user-friendly name. Does not have to be unique, and it's changeable.
	// Avoid entering confidential information.
	//
	// Max Length: 255
	// Min Length: 1
	DisplayName string `json:"displayName,omitempty"`

	// The boot volume's Oracle ID (OCID).
	// Required: true
	// Max Length: 255
	// Min Length: 1
	ID *string `json:"id"`

	// The image OCID used to create the boot volume.
	// Max Length: 255
	// Min Length: 1
	ImageID string `json:"imageId,omitempty"`

	// The current state of a boot volume.
	// Required: true
	LifecycleState *string `json:"lifecycleState"`

	// The size of the boot volume in GBs.
	SizeInGBs int64 `json:"sizeInGBs,omitempty"`

	// The size of the volume in MBs. The value must be a multiple of 1024.
	// This field is deprecated. Please use sizeInGBs.
	//
	// Required: true
	SizeInMBs *int64 `json:"sizeInMBs"`

	// The date and time the boot volume was created. Format defined by RFC3339.
	// Required: true
	TimeCreated *strfmt.DateTime `json:"timeCreated"`
}

// Validate validates this boot volume
func (m *BootVolume) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAvailabilityDomain(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateCompartmentID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateDisplayName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateImageID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateLifecycleState(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateSizeInMBs(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTimeCreated(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BootVolume) validateAvailabilityDomain(formats strfmt.Registry) error {

	if err := validate.Required("availabilityDomain", "body", m.AvailabilityDomain); err != nil {
		return err
	}

	if err := validate.MinLength("availabilityDomain", "body", string(*m.AvailabilityDomain), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("availabilityDomain", "body", string(*m.AvailabilityDomain), 255); err != nil {
		return err
	}

	return nil
}

func (m *BootVolume) validateCompartmentID(formats strfmt.Registry) error {

	if err := validate.Required("compartmentId", "body", m.CompartmentID); err != nil {
		return err
	}

	if err := validate.MinLength("compartmentId", "body", string(*m.CompartmentID), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("compartmentId", "body", string(*m.CompartmentID), 255); err != nil {
		return err
	}

	return nil
}

func (m *BootVolume) validateDisplayName(formats strfmt.Registry) error {

	if swag.IsZero(m.DisplayName) { // not required
		return nil
	}

	if err := validate.MinLength("displayName", "body", string(m.DisplayName), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("displayName", "body", string(m.DisplayName), 255); err != nil {
		return err
	}

	return nil
}

func (m *BootVolume) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	if err := validate.MinLength("id", "body", string(*m.ID), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("id", "body", string(*m.ID), 255); err != nil {
		return err
	}

	return nil
}

func (m *BootVolume) validateImageID(formats strfmt.Registry) error {

	if swag.IsZero(m.ImageID) { // not required
		return nil
	}

	if err := validate.MinLength("imageId", "body", string(m.ImageID), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("imageId", "body", string(m.ImageID), 255); err != nil {
		return err
	}

	return nil
}

var bootVolumeTypeLifecycleStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["PROVISIONING","RESTORING","AVAILABLE","TERMINATING","TERMINATED","FAULTY"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		bootVolumeTypeLifecycleStatePropEnum = append(bootVolumeTypeLifecycleStatePropEnum, v)
	}
}

const (

	// BootVolumeLifecycleStatePROVISIONING captures enum value "PROVISIONING"
	BootVolumeLifecycleStatePROVISIONING string = "PROVISIONING"

	// BootVolumeLifecycleStateRESTORING captures enum value "RESTORING"
	BootVolumeLifecycleStateRESTORING string = "RESTORING"

	// BootVolumeLifecycleStateAVAILABLE captures enum value "AVAILABLE"
	BootVolumeLifecycleStateAVAILABLE string = "AVAILABLE"

	// BootVolumeLifecycleStateTERMINATING captures enum value "TERMINATING"
	BootVolumeLifecycleStateTERMINATING string = "TERMINATING"

	// BootVolumeLifecycleStateTERMINATED captures enum value "TERMINATED"
	BootVolumeLifecycleStateTERMINATED string = "TERMINATED"

	// BootVolumeLifecycleStateFAULTY captures enum value "FAULTY"
	BootVolumeLifecycleStateFAULTY string = "FAULTY"
)

// prop value enum
func (m *BootVolume) validateLifecycleStateEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, bootVolumeTypeLifecycleStatePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BootVolume) validateLifecycleState(formats strfmt.Registry) error {

	if err := validate.Required("lifecycleState", "body", m.LifecycleState); err != nil {
		return err
	}

	// value enum
	if err := m.validateLifecycleStateEnum("lifecycleState", "body", *m.LifecycleState); err != nil {
		return err
	}

	return nil
}

func (m *BootVolume) validateSizeInMBs(formats strfmt.Registry) error {

	if err := validate.Required("sizeInMBs", "body", m.SizeInMBs); err != nil {
		return err
	}

	return nil
}

func (m *BootVolume) validateTimeCreated(formats strfmt.Registry) error {

	if err := validate.Required("timeCreated", "body", m.TimeCreated); err != nil {
		return err
	}

	if err := validate.FormatOf("timeCreated", "body", "date-time", m.TimeCreated.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BootVolume) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BootVolume) UnmarshalBinary(b []byte) error {
	var res BootVolume
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
