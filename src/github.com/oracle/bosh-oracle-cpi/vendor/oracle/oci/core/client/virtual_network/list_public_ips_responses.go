// Code generated by go-swagger; DO NOT EDIT.

package virtual_network

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "oracle/oci/core/models"
)

// ListPublicIpsReader is a Reader for the ListPublicIps structure.
type ListPublicIpsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ListPublicIpsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewListPublicIpsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewListPublicIpsBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewListPublicIpsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewListPublicIpsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewListPublicIpsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewListPublicIpsDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewListPublicIpsOK creates a ListPublicIpsOK with default headers values
func NewListPublicIpsOK() *ListPublicIpsOK {
	return &ListPublicIpsOK{}
}

/*ListPublicIpsOK handles this case with default header values.

The list is being retrieved.
*/
type ListPublicIpsOK struct {
	/*For pagination of a list of items. When paging through a list, if this header appears in the response,
	then a partial list might have been returned. Include this value as the `page` parameter for the
	subsequent GET request to get the next batch of items.

	*/
	OpcNextPage string
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload []*models.PublicIP
}

func (o *ListPublicIpsOK) Error() string {
	return fmt.Sprintf("[GET /publicIps][%d] listPublicIpsOK  %+v", 200, o.Payload)
}

func (o *ListPublicIpsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-next-page
	o.OpcNextPage = response.GetHeader("opc-next-page")

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListPublicIpsBadRequest creates a ListPublicIpsBadRequest with default headers values
func NewListPublicIpsBadRequest() *ListPublicIpsBadRequest {
	return &ListPublicIpsBadRequest{}
}

/*ListPublicIpsBadRequest handles this case with default header values.

Bad Request
*/
type ListPublicIpsBadRequest struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *ListPublicIpsBadRequest) Error() string {
	return fmt.Sprintf("[GET /publicIps][%d] listPublicIpsBadRequest  %+v", 400, o.Payload)
}

func (o *ListPublicIpsBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListPublicIpsUnauthorized creates a ListPublicIpsUnauthorized with default headers values
func NewListPublicIpsUnauthorized() *ListPublicIpsUnauthorized {
	return &ListPublicIpsUnauthorized{}
}

/*ListPublicIpsUnauthorized handles this case with default header values.

Unauthorized
*/
type ListPublicIpsUnauthorized struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *ListPublicIpsUnauthorized) Error() string {
	return fmt.Sprintf("[GET /publicIps][%d] listPublicIpsUnauthorized  %+v", 401, o.Payload)
}

func (o *ListPublicIpsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListPublicIpsNotFound creates a ListPublicIpsNotFound with default headers values
func NewListPublicIpsNotFound() *ListPublicIpsNotFound {
	return &ListPublicIpsNotFound{}
}

/*ListPublicIpsNotFound handles this case with default header values.

Not Found
*/
type ListPublicIpsNotFound struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *ListPublicIpsNotFound) Error() string {
	return fmt.Sprintf("[GET /publicIps][%d] listPublicIpsNotFound  %+v", 404, o.Payload)
}

func (o *ListPublicIpsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListPublicIpsInternalServerError creates a ListPublicIpsInternalServerError with default headers values
func NewListPublicIpsInternalServerError() *ListPublicIpsInternalServerError {
	return &ListPublicIpsInternalServerError{}
}

/*ListPublicIpsInternalServerError handles this case with default header values.

Internal Server Error
*/
type ListPublicIpsInternalServerError struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *ListPublicIpsInternalServerError) Error() string {
	return fmt.Sprintf("[GET /publicIps][%d] listPublicIpsInternalServerError  %+v", 500, o.Payload)
}

func (o *ListPublicIpsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListPublicIpsDefault creates a ListPublicIpsDefault with default headers values
func NewListPublicIpsDefault(code int) *ListPublicIpsDefault {
	return &ListPublicIpsDefault{
		_statusCode: code,
	}
}

/*ListPublicIpsDefault handles this case with default header values.

An error has occurred.
*/
type ListPublicIpsDefault struct {
	_statusCode int

	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

// Code gets the status code for the list public ips default response
func (o *ListPublicIpsDefault) Code() int {
	return o._statusCode
}

func (o *ListPublicIpsDefault) Error() string {
	return fmt.Sprintf("[GET /publicIps][%d] ListPublicIps default  %+v", o._statusCode, o.Payload)
}

func (o *ListPublicIpsDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
