// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// LocalPeeringGateway A local peering gateway (LPG) is an object on a VCN that lets that VCN peer
// with another VCN in the same region. *Peering* means that the two VCNs can
// communicate using private IP addresses, but without the traffic traversing the
// internet or routing through your on-premises network. For more information,
// see [VCN Peering](/Content/Network/Tasks/VCNpeering.htm).
//
// To use any of the API operations, you must be authorized in an IAM policy. If you're not authorized,
// talk to an administrator. If you're an administrator who needs to write policies to give users access, see
// [Getting Started with Policies](/Content/Identity/Concepts/policygetstarted.htm).
//
// swagger:model LocalPeeringGateway
type LocalPeeringGateway struct {

	// The OCID of the compartment containing the LPG.
	// Required: true
	// Max Length: 255
	// Min Length: 1
	CompartmentID *string `json:"compartmentId"`

	// A user-friendly name. Does not have to be unique, and it's changeable. Avoid
	// entering confidential information.
	//
	// Required: true
	// Max Length: 255
	// Min Length: 1
	DisplayName *string `json:"displayName"`

	// The LPG's Oracle ID (OCID).
	// Required: true
	// Max Length: 255
	// Min Length: 1
	ID *string `json:"id"`

	// Whether the VCN at the other end of the peering is in a different tenancy.
	//
	// Example: `false`
	//
	// Required: true
	IsCrossTenancyPeering *bool `json:"isCrossTenancyPeering"`

	// The LPG's current lifecycle state.
	// Required: true
	LifecycleState *string `json:"lifecycleState"`

	// The range of IP addresses available on the VCN at the other
	// end of the peering from this LPG. The value is `null` if the LPG is not peered.
	// You can use this as the destination CIDR for a route rule to route a subnet's
	// traffic to this LPG.
	//
	// Example: `192.168.0.0/16`
	//
	// Max Length: 18
	// Min Length: 9
	PeerAdvertisedCidr string `json:"peerAdvertisedCidr,omitempty"`

	// Whether the LPG is peered with another LPG. `NEW` means the LPG has not yet been
	// peered. `PENDING` means the peering is being established. `REVOKED` means the
	// LPG at the other end of the peering has been deleted.
	//
	// Required: true
	PeeringStatus *string `json:"peeringStatus"`

	// Additional information regarding the peering status, if applicable.
	// Max Length: 4096
	// Min Length: 0
	PeeringStatusDetails *string `json:"peeringStatusDetails,omitempty"`

	// The date and time the LPG was created, in the format defined by RFC3339.
	//
	// Example: `2016-08-25T21:10:29.600Z`
	//
	// Required: true
	TimeCreated *strfmt.DateTime `json:"timeCreated"`

	// The OCID of the VCN the LPG belongs to.
	// Required: true
	// Max Length: 255
	// Min Length: 1
	VcnID *string `json:"vcnId"`
}

// Validate validates this local peering gateway
func (m *LocalPeeringGateway) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCompartmentID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateDisplayName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateIsCrossTenancyPeering(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateLifecycleState(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePeerAdvertisedCidr(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePeeringStatus(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePeeringStatusDetails(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTimeCreated(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateVcnID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LocalPeeringGateway) validateCompartmentID(formats strfmt.Registry) error {

	if err := validate.Required("compartmentId", "body", m.CompartmentID); err != nil {
		return err
	}

	if err := validate.MinLength("compartmentId", "body", string(*m.CompartmentID), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("compartmentId", "body", string(*m.CompartmentID), 255); err != nil {
		return err
	}

	return nil
}

func (m *LocalPeeringGateway) validateDisplayName(formats strfmt.Registry) error {

	if err := validate.Required("displayName", "body", m.DisplayName); err != nil {
		return err
	}

	if err := validate.MinLength("displayName", "body", string(*m.DisplayName), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("displayName", "body", string(*m.DisplayName), 255); err != nil {
		return err
	}

	return nil
}

func (m *LocalPeeringGateway) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	if err := validate.MinLength("id", "body", string(*m.ID), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("id", "body", string(*m.ID), 255); err != nil {
		return err
	}

	return nil
}

func (m *LocalPeeringGateway) validateIsCrossTenancyPeering(formats strfmt.Registry) error {

	if err := validate.Required("isCrossTenancyPeering", "body", m.IsCrossTenancyPeering); err != nil {
		return err
	}

	return nil
}

var localPeeringGatewayTypeLifecycleStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["PROVISIONING","AVAILABLE","TERMINATING","TERMINATED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		localPeeringGatewayTypeLifecycleStatePropEnum = append(localPeeringGatewayTypeLifecycleStatePropEnum, v)
	}
}

const (

	// LocalPeeringGatewayLifecycleStatePROVISIONING captures enum value "PROVISIONING"
	LocalPeeringGatewayLifecycleStatePROVISIONING string = "PROVISIONING"

	// LocalPeeringGatewayLifecycleStateAVAILABLE captures enum value "AVAILABLE"
	LocalPeeringGatewayLifecycleStateAVAILABLE string = "AVAILABLE"

	// LocalPeeringGatewayLifecycleStateTERMINATING captures enum value "TERMINATING"
	LocalPeeringGatewayLifecycleStateTERMINATING string = "TERMINATING"

	// LocalPeeringGatewayLifecycleStateTERMINATED captures enum value "TERMINATED"
	LocalPeeringGatewayLifecycleStateTERMINATED string = "TERMINATED"
)

// prop value enum
func (m *LocalPeeringGateway) validateLifecycleStateEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, localPeeringGatewayTypeLifecycleStatePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *LocalPeeringGateway) validateLifecycleState(formats strfmt.Registry) error {

	if err := validate.Required("lifecycleState", "body", m.LifecycleState); err != nil {
		return err
	}

	// value enum
	if err := m.validateLifecycleStateEnum("lifecycleState", "body", *m.LifecycleState); err != nil {
		return err
	}

	return nil
}

func (m *LocalPeeringGateway) validatePeerAdvertisedCidr(formats strfmt.Registry) error {

	if swag.IsZero(m.PeerAdvertisedCidr) { // not required
		return nil
	}

	if err := validate.MinLength("peerAdvertisedCidr", "body", string(m.PeerAdvertisedCidr), 9); err != nil {
		return err
	}

	if err := validate.MaxLength("peerAdvertisedCidr", "body", string(m.PeerAdvertisedCidr), 18); err != nil {
		return err
	}

	return nil
}

var localPeeringGatewayTypePeeringStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["INVALID","NEW","PEERED","PENDING","REVOKED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		localPeeringGatewayTypePeeringStatusPropEnum = append(localPeeringGatewayTypePeeringStatusPropEnum, v)
	}
}

const (

	// LocalPeeringGatewayPeeringStatusINVALID captures enum value "INVALID"
	LocalPeeringGatewayPeeringStatusINVALID string = "INVALID"

	// LocalPeeringGatewayPeeringStatusNEW captures enum value "NEW"
	LocalPeeringGatewayPeeringStatusNEW string = "NEW"

	// LocalPeeringGatewayPeeringStatusPEERED captures enum value "PEERED"
	LocalPeeringGatewayPeeringStatusPEERED string = "PEERED"

	// LocalPeeringGatewayPeeringStatusPENDING captures enum value "PENDING"
	LocalPeeringGatewayPeeringStatusPENDING string = "PENDING"

	// LocalPeeringGatewayPeeringStatusREVOKED captures enum value "REVOKED"
	LocalPeeringGatewayPeeringStatusREVOKED string = "REVOKED"
)

// prop value enum
func (m *LocalPeeringGateway) validatePeeringStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, localPeeringGatewayTypePeeringStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *LocalPeeringGateway) validatePeeringStatus(formats strfmt.Registry) error {

	if err := validate.Required("peeringStatus", "body", m.PeeringStatus); err != nil {
		return err
	}

	// value enum
	if err := m.validatePeeringStatusEnum("peeringStatus", "body", *m.PeeringStatus); err != nil {
		return err
	}

	return nil
}

func (m *LocalPeeringGateway) validatePeeringStatusDetails(formats strfmt.Registry) error {

	if swag.IsZero(m.PeeringStatusDetails) { // not required
		return nil
	}

	if err := validate.MinLength("peeringStatusDetails", "body", string(*m.PeeringStatusDetails), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("peeringStatusDetails", "body", string(*m.PeeringStatusDetails), 4096); err != nil {
		return err
	}

	return nil
}

func (m *LocalPeeringGateway) validateTimeCreated(formats strfmt.Registry) error {

	if err := validate.Required("timeCreated", "body", m.TimeCreated); err != nil {
		return err
	}

	if err := validate.FormatOf("timeCreated", "body", "date-time", m.TimeCreated.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *LocalPeeringGateway) validateVcnID(formats strfmt.Registry) error {

	if err := validate.Required("vcnId", "body", m.VcnID); err != nil {
		return err
	}

	if err := validate.MinLength("vcnId", "body", string(*m.VcnID), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("vcnId", "body", string(*m.VcnID), 255); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *LocalPeeringGateway) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LocalPeeringGateway) UnmarshalBinary(b []byte) error {
	var res LocalPeeringGateway
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
