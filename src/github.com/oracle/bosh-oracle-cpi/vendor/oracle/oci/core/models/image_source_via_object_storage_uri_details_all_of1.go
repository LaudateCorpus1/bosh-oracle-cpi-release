// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"encoding/json"
	"io"
	"io/ioutil"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/validate"
)

// ImageSourceViaObjectStorageURIDetailsAllOf1 image source via object storage Uri details all of1
// swagger:discriminator imageSourceViaObjectStorageUriDetailsAllOf1 objectStorageUri
type ImageSourceViaObjectStorageURIDetailsAllOf1 interface {
	runtime.Validatable

	// The Object Storage URL for the image.
	// Required: true
	SourceURI() *string
	SetSourceURI(*string)
}

type imageSourceViaObjectStorageUriDetailsAllOf1 struct {
	sourceUriField *string
}

func (m *imageSourceViaObjectStorageUriDetailsAllOf1) SourceURI() *string {
	return m.sourceUriField
}
func (m *imageSourceViaObjectStorageUriDetailsAllOf1) SetSourceURI(val *string) {
	m.sourceUriField = val
}

// Validate validates this image source via object storage Uri details all of1
func (m *imageSourceViaObjectStorageUriDetailsAllOf1) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSourceURI(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *imageSourceViaObjectStorageUriDetailsAllOf1) validateSourceURI(formats strfmt.Registry) error {

	if err := validate.Required("sourceUri", "body", m.SourceURI()); err != nil {
		return err
	}

	return nil
}

// UnmarshalImageSourceViaObjectStorageURIDetailsAllOf1Slice unmarshals polymorphic slices of ImageSourceViaObjectStorageURIDetailsAllOf1
func UnmarshalImageSourceViaObjectStorageURIDetailsAllOf1Slice(reader io.Reader, consumer runtime.Consumer) ([]ImageSourceViaObjectStorageURIDetailsAllOf1, error) {
	var elements []json.RawMessage
	if err := consumer.Consume(reader, &elements); err != nil {
		return nil, err
	}

	var result []ImageSourceViaObjectStorageURIDetailsAllOf1
	for _, element := range elements {
		obj, err := unmarshalImageSourceViaObjectStorageURIDetailsAllOf1(element, consumer)
		if err != nil {
			return nil, err
		}
		result = append(result, obj)
	}
	return result, nil
}

// UnmarshalImageSourceViaObjectStorageURIDetailsAllOf1 unmarshals polymorphic ImageSourceViaObjectStorageURIDetailsAllOf1
func UnmarshalImageSourceViaObjectStorageURIDetailsAllOf1(reader io.Reader, consumer runtime.Consumer) (ImageSourceViaObjectStorageURIDetailsAllOf1, error) {
	// we need to read this twice, so first into a buffer
	data, err := ioutil.ReadAll(reader)
	if err != nil {
		return nil, err
	}
	return unmarshalImageSourceViaObjectStorageURIDetailsAllOf1(data, consumer)
}

func unmarshalImageSourceViaObjectStorageURIDetailsAllOf1(data []byte, consumer runtime.Consumer) (ImageSourceViaObjectStorageURIDetailsAllOf1, error) {
	buf := bytes.NewBuffer(data)
	buf2 := bytes.NewBuffer(data)

	// the first time this is read is to fetch the value of the objectStorageUri property.
	var getType struct {
		ObjectStorageURI string `json:"objectStorageUri"`
	}
	if err := consumer.Consume(buf, &getType); err != nil {
		return nil, err
	}

	if err := validate.RequiredString("objectStorageUri", "body", getType.ObjectStorageURI); err != nil {
		return nil, err
	}

	// The value of objectStorageUri is used to determine which type to create and unmarshal the data into
	switch getType.ObjectStorageURI {
	case "ImageSourceViaObjectStorageUriDetails":
		var result ImageSourceViaObjectStorageURIDetails
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil

	case "imageSourceViaObjectStorageUriDetailsAllOf1":
		var result imageSourceViaObjectStorageUriDetailsAllOf1
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil

	}
	return nil, errors.New(422, "invalid objectStorageUri value: %q", getType.ObjectStorageURI)

}
