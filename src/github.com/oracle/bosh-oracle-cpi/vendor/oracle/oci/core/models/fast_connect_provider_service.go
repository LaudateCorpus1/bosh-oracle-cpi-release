// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// FastConnectProviderService A service offering from a supported provider. For more information,
// see [FastConnect Overview](/Content/Network/Concepts/fastconnect.htm).
//
// swagger:model FastConnectProviderService
type FastConnectProviderService struct {

	// A description of the service offered by the provider.
	//
	// Max Length: 255
	// Min Length: 1
	Description string `json:"description,omitempty"`

	// The OCID of the service offered by the provider.
	//
	// Required: true
	// Max Length: 255
	// Min Length: 1
	ID *string `json:"id"`

	// Private peering BGP management.
	//
	// Required: true
	PrivatePeeringBgpManagement *string `json:"privatePeeringBgpManagement"`

	// The name of the provider.
	//
	// Required: true
	// Max Length: 255
	// Min Length: 1
	ProviderName *string `json:"providerName"`

	// The name of the service offered by the provider.
	//
	// Required: true
	// Max Length: 255
	// Min Length: 1
	ProviderServiceName *string `json:"providerServiceName"`

	// Public peering BGP management.
	//
	// Required: true
	PublicPeeringBgpManagement *string `json:"publicPeeringBgpManagement"`

	// An array of virtual circuit types supported by this service.
	//
	// Maximum: 2
	// Minimum: 0
	SupportedVirtualCircuitTypes []string `json:"supportedVirtualCircuitTypes"`

	// Provider service type.
	//
	// Required: true
	Type *string `json:"type"`
}

// Validate validates this fast connect provider service
func (m *FastConnectProviderService) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDescription(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePrivatePeeringBgpManagement(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateProviderName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateProviderServiceName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePublicPeeringBgpManagement(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateSupportedVirtualCircuitTypes(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FastConnectProviderService) validateDescription(formats strfmt.Registry) error {

	if swag.IsZero(m.Description) { // not required
		return nil
	}

	if err := validate.MinLength("description", "body", string(m.Description), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("description", "body", string(m.Description), 255); err != nil {
		return err
	}

	return nil
}

func (m *FastConnectProviderService) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	if err := validate.MinLength("id", "body", string(*m.ID), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("id", "body", string(*m.ID), 255); err != nil {
		return err
	}

	return nil
}

var fastConnectProviderServiceTypePrivatePeeringBgpManagementPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["CUSTOMER_MANAGED","PROVIDER_MANAGED","ORACLE_MANAGED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		fastConnectProviderServiceTypePrivatePeeringBgpManagementPropEnum = append(fastConnectProviderServiceTypePrivatePeeringBgpManagementPropEnum, v)
	}
}

const (

	// FastConnectProviderServicePrivatePeeringBgpManagementCUSTOMERMANAGED captures enum value "CUSTOMER_MANAGED"
	FastConnectProviderServicePrivatePeeringBgpManagementCUSTOMERMANAGED string = "CUSTOMER_MANAGED"

	// FastConnectProviderServicePrivatePeeringBgpManagementPROVIDERMANAGED captures enum value "PROVIDER_MANAGED"
	FastConnectProviderServicePrivatePeeringBgpManagementPROVIDERMANAGED string = "PROVIDER_MANAGED"

	// FastConnectProviderServicePrivatePeeringBgpManagementORACLEMANAGED captures enum value "ORACLE_MANAGED"
	FastConnectProviderServicePrivatePeeringBgpManagementORACLEMANAGED string = "ORACLE_MANAGED"
)

// prop value enum
func (m *FastConnectProviderService) validatePrivatePeeringBgpManagementEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, fastConnectProviderServiceTypePrivatePeeringBgpManagementPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *FastConnectProviderService) validatePrivatePeeringBgpManagement(formats strfmt.Registry) error {

	if err := validate.Required("privatePeeringBgpManagement", "body", m.PrivatePeeringBgpManagement); err != nil {
		return err
	}

	// value enum
	if err := m.validatePrivatePeeringBgpManagementEnum("privatePeeringBgpManagement", "body", *m.PrivatePeeringBgpManagement); err != nil {
		return err
	}

	return nil
}

func (m *FastConnectProviderService) validateProviderName(formats strfmt.Registry) error {

	if err := validate.Required("providerName", "body", m.ProviderName); err != nil {
		return err
	}

	if err := validate.MinLength("providerName", "body", string(*m.ProviderName), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("providerName", "body", string(*m.ProviderName), 255); err != nil {
		return err
	}

	return nil
}

func (m *FastConnectProviderService) validateProviderServiceName(formats strfmt.Registry) error {

	if err := validate.Required("providerServiceName", "body", m.ProviderServiceName); err != nil {
		return err
	}

	if err := validate.MinLength("providerServiceName", "body", string(*m.ProviderServiceName), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("providerServiceName", "body", string(*m.ProviderServiceName), 255); err != nil {
		return err
	}

	return nil
}

var fastConnectProviderServiceTypePublicPeeringBgpManagementPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["CUSTOMER_MANAGED","PROVIDER_MANAGED","ORACLE_MANAGED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		fastConnectProviderServiceTypePublicPeeringBgpManagementPropEnum = append(fastConnectProviderServiceTypePublicPeeringBgpManagementPropEnum, v)
	}
}

const (

	// FastConnectProviderServicePublicPeeringBgpManagementCUSTOMERMANAGED captures enum value "CUSTOMER_MANAGED"
	FastConnectProviderServicePublicPeeringBgpManagementCUSTOMERMANAGED string = "CUSTOMER_MANAGED"

	// FastConnectProviderServicePublicPeeringBgpManagementPROVIDERMANAGED captures enum value "PROVIDER_MANAGED"
	FastConnectProviderServicePublicPeeringBgpManagementPROVIDERMANAGED string = "PROVIDER_MANAGED"

	// FastConnectProviderServicePublicPeeringBgpManagementORACLEMANAGED captures enum value "ORACLE_MANAGED"
	FastConnectProviderServicePublicPeeringBgpManagementORACLEMANAGED string = "ORACLE_MANAGED"
)

// prop value enum
func (m *FastConnectProviderService) validatePublicPeeringBgpManagementEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, fastConnectProviderServiceTypePublicPeeringBgpManagementPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *FastConnectProviderService) validatePublicPeeringBgpManagement(formats strfmt.Registry) error {

	if err := validate.Required("publicPeeringBgpManagement", "body", m.PublicPeeringBgpManagement); err != nil {
		return err
	}

	// value enum
	if err := m.validatePublicPeeringBgpManagementEnum("publicPeeringBgpManagement", "body", *m.PublicPeeringBgpManagement); err != nil {
		return err
	}

	return nil
}

var fastConnectProviderServiceSupportedVirtualCircuitTypesItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["PUBLIC","PRIVATE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		fastConnectProviderServiceSupportedVirtualCircuitTypesItemsEnum = append(fastConnectProviderServiceSupportedVirtualCircuitTypesItemsEnum, v)
	}
}

func (m *FastConnectProviderService) validateSupportedVirtualCircuitTypesItemsEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, fastConnectProviderServiceSupportedVirtualCircuitTypesItemsEnum); err != nil {
		return err
	}
	return nil
}

func (m *FastConnectProviderService) validateSupportedVirtualCircuitTypes(formats strfmt.Registry) error {

	if swag.IsZero(m.SupportedVirtualCircuitTypes) { // not required
		return nil
	}

	for i := 0; i < len(m.SupportedVirtualCircuitTypes); i++ {

		// value enum
		if err := m.validateSupportedVirtualCircuitTypesItemsEnum("supportedVirtualCircuitTypes"+"."+strconv.Itoa(i), "body", m.SupportedVirtualCircuitTypes[i]); err != nil {
			return err
		}

	}

	return nil
}

var fastConnectProviderServiceTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["LAYER2","LAYER3"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		fastConnectProviderServiceTypeTypePropEnum = append(fastConnectProviderServiceTypeTypePropEnum, v)
	}
}

const (

	// FastConnectProviderServiceTypeLAYER2 captures enum value "LAYER2"
	FastConnectProviderServiceTypeLAYER2 string = "LAYER2"

	// FastConnectProviderServiceTypeLAYER3 captures enum value "LAYER3"
	FastConnectProviderServiceTypeLAYER3 string = "LAYER3"
)

// prop value enum
func (m *FastConnectProviderService) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, fastConnectProviderServiceTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *FastConnectProviderService) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FastConnectProviderService) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FastConnectProviderService) UnmarshalBinary(b []byte) error {
	var res FastConnectProviderService
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
