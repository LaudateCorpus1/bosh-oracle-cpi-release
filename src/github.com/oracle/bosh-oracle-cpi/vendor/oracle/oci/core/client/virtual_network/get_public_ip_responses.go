// Code generated by go-swagger; DO NOT EDIT.

package virtual_network

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "oracle/oci/core/models"
)

// GetPublicIPReader is a Reader for the GetPublicIP structure.
type GetPublicIPReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetPublicIPReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetPublicIPOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewGetPublicIPBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewGetPublicIPUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewGetPublicIPNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewGetPublicIPInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewGetPublicIPDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetPublicIPOK creates a GetPublicIPOK with default headers values
func NewGetPublicIPOK() *GetPublicIPOK {
	return &GetPublicIPOK{}
}

/*GetPublicIPOK handles this case with default header values.

The public IP was retrieved.
*/
type GetPublicIPOK struct {
	/*For optimistic concurrency control. See `if-match`.
	 */
	Etag string
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.PublicIP
}

func (o *GetPublicIPOK) Error() string {
	return fmt.Sprintf("[GET /publicIps/{publicIpId}][%d] getPublicIpOK  %+v", 200, o.Payload)
}

func (o *GetPublicIPOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header etag
	o.Etag = response.GetHeader("etag")

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.PublicIP)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetPublicIPBadRequest creates a GetPublicIPBadRequest with default headers values
func NewGetPublicIPBadRequest() *GetPublicIPBadRequest {
	return &GetPublicIPBadRequest{}
}

/*GetPublicIPBadRequest handles this case with default header values.

Bad Request
*/
type GetPublicIPBadRequest struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *GetPublicIPBadRequest) Error() string {
	return fmt.Sprintf("[GET /publicIps/{publicIpId}][%d] getPublicIpBadRequest  %+v", 400, o.Payload)
}

func (o *GetPublicIPBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetPublicIPUnauthorized creates a GetPublicIPUnauthorized with default headers values
func NewGetPublicIPUnauthorized() *GetPublicIPUnauthorized {
	return &GetPublicIPUnauthorized{}
}

/*GetPublicIPUnauthorized handles this case with default header values.

Unauthorized
*/
type GetPublicIPUnauthorized struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *GetPublicIPUnauthorized) Error() string {
	return fmt.Sprintf("[GET /publicIps/{publicIpId}][%d] getPublicIpUnauthorized  %+v", 401, o.Payload)
}

func (o *GetPublicIPUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetPublicIPNotFound creates a GetPublicIPNotFound with default headers values
func NewGetPublicIPNotFound() *GetPublicIPNotFound {
	return &GetPublicIPNotFound{}
}

/*GetPublicIPNotFound handles this case with default header values.

Not Found
*/
type GetPublicIPNotFound struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *GetPublicIPNotFound) Error() string {
	return fmt.Sprintf("[GET /publicIps/{publicIpId}][%d] getPublicIpNotFound  %+v", 404, o.Payload)
}

func (o *GetPublicIPNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetPublicIPInternalServerError creates a GetPublicIPInternalServerError with default headers values
func NewGetPublicIPInternalServerError() *GetPublicIPInternalServerError {
	return &GetPublicIPInternalServerError{}
}

/*GetPublicIPInternalServerError handles this case with default header values.

Internal Server Error
*/
type GetPublicIPInternalServerError struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *GetPublicIPInternalServerError) Error() string {
	return fmt.Sprintf("[GET /publicIps/{publicIpId}][%d] getPublicIpInternalServerError  %+v", 500, o.Payload)
}

func (o *GetPublicIPInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetPublicIPDefault creates a GetPublicIPDefault with default headers values
func NewGetPublicIPDefault(code int) *GetPublicIPDefault {
	return &GetPublicIPDefault{
		_statusCode: code,
	}
}

/*GetPublicIPDefault handles this case with default header values.

An error has occurred.
*/
type GetPublicIPDefault struct {
	_statusCode int

	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

// Code gets the status code for the get public Ip default response
func (o *GetPublicIPDefault) Code() int {
	return o._statusCode
}

func (o *GetPublicIPDefault) Error() string {
	return fmt.Sprintf("[GET /publicIps/{publicIpId}][%d] GetPublicIp default  %+v", o._statusCode, o.Payload)
}

func (o *GetPublicIPDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
