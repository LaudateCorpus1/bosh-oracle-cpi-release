// Code generated by go-swagger; DO NOT EDIT.

package virtual_network

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "oracle/oci/core/models"
)

// BulkAddVirtualCircuitPublicPrefixesReader is a Reader for the BulkAddVirtualCircuitPublicPrefixes structure.
type BulkAddVirtualCircuitPublicPrefixesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *BulkAddVirtualCircuitPublicPrefixesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 204:
		result := NewBulkAddVirtualCircuitPublicPrefixesNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewBulkAddVirtualCircuitPublicPrefixesBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewBulkAddVirtualCircuitPublicPrefixesUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewBulkAddVirtualCircuitPublicPrefixesNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewBulkAddVirtualCircuitPublicPrefixesInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewBulkAddVirtualCircuitPublicPrefixesDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewBulkAddVirtualCircuitPublicPrefixesNoContent creates a BulkAddVirtualCircuitPublicPrefixesNoContent with default headers values
func NewBulkAddVirtualCircuitPublicPrefixesNoContent() *BulkAddVirtualCircuitPublicPrefixesNoContent {
	return &BulkAddVirtualCircuitPublicPrefixesNoContent{}
}

/*BulkAddVirtualCircuitPublicPrefixesNoContent handles this case with default header values.

Addition of public prefixes accepted.
*/
type BulkAddVirtualCircuitPublicPrefixesNoContent struct {
}

func (o *BulkAddVirtualCircuitPublicPrefixesNoContent) Error() string {
	return fmt.Sprintf("[POST /virtualCircuits/{virtualCircuitId}/actions/bulkAddPublicPrefixes][%d] bulkAddVirtualCircuitPublicPrefixesNoContent ", 204)
}

func (o *BulkAddVirtualCircuitPublicPrefixesNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewBulkAddVirtualCircuitPublicPrefixesBadRequest creates a BulkAddVirtualCircuitPublicPrefixesBadRequest with default headers values
func NewBulkAddVirtualCircuitPublicPrefixesBadRequest() *BulkAddVirtualCircuitPublicPrefixesBadRequest {
	return &BulkAddVirtualCircuitPublicPrefixesBadRequest{}
}

/*BulkAddVirtualCircuitPublicPrefixesBadRequest handles this case with default header values.

Bad Request
*/
type BulkAddVirtualCircuitPublicPrefixesBadRequest struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *BulkAddVirtualCircuitPublicPrefixesBadRequest) Error() string {
	return fmt.Sprintf("[POST /virtualCircuits/{virtualCircuitId}/actions/bulkAddPublicPrefixes][%d] bulkAddVirtualCircuitPublicPrefixesBadRequest  %+v", 400, o.Payload)
}

func (o *BulkAddVirtualCircuitPublicPrefixesBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewBulkAddVirtualCircuitPublicPrefixesUnauthorized creates a BulkAddVirtualCircuitPublicPrefixesUnauthorized with default headers values
func NewBulkAddVirtualCircuitPublicPrefixesUnauthorized() *BulkAddVirtualCircuitPublicPrefixesUnauthorized {
	return &BulkAddVirtualCircuitPublicPrefixesUnauthorized{}
}

/*BulkAddVirtualCircuitPublicPrefixesUnauthorized handles this case with default header values.

Unauthorized
*/
type BulkAddVirtualCircuitPublicPrefixesUnauthorized struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *BulkAddVirtualCircuitPublicPrefixesUnauthorized) Error() string {
	return fmt.Sprintf("[POST /virtualCircuits/{virtualCircuitId}/actions/bulkAddPublicPrefixes][%d] bulkAddVirtualCircuitPublicPrefixesUnauthorized  %+v", 401, o.Payload)
}

func (o *BulkAddVirtualCircuitPublicPrefixesUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewBulkAddVirtualCircuitPublicPrefixesNotFound creates a BulkAddVirtualCircuitPublicPrefixesNotFound with default headers values
func NewBulkAddVirtualCircuitPublicPrefixesNotFound() *BulkAddVirtualCircuitPublicPrefixesNotFound {
	return &BulkAddVirtualCircuitPublicPrefixesNotFound{}
}

/*BulkAddVirtualCircuitPublicPrefixesNotFound handles this case with default header values.

Not Found
*/
type BulkAddVirtualCircuitPublicPrefixesNotFound struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *BulkAddVirtualCircuitPublicPrefixesNotFound) Error() string {
	return fmt.Sprintf("[POST /virtualCircuits/{virtualCircuitId}/actions/bulkAddPublicPrefixes][%d] bulkAddVirtualCircuitPublicPrefixesNotFound  %+v", 404, o.Payload)
}

func (o *BulkAddVirtualCircuitPublicPrefixesNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewBulkAddVirtualCircuitPublicPrefixesInternalServerError creates a BulkAddVirtualCircuitPublicPrefixesInternalServerError with default headers values
func NewBulkAddVirtualCircuitPublicPrefixesInternalServerError() *BulkAddVirtualCircuitPublicPrefixesInternalServerError {
	return &BulkAddVirtualCircuitPublicPrefixesInternalServerError{}
}

/*BulkAddVirtualCircuitPublicPrefixesInternalServerError handles this case with default header values.

Internal Server Error
*/
type BulkAddVirtualCircuitPublicPrefixesInternalServerError struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *BulkAddVirtualCircuitPublicPrefixesInternalServerError) Error() string {
	return fmt.Sprintf("[POST /virtualCircuits/{virtualCircuitId}/actions/bulkAddPublicPrefixes][%d] bulkAddVirtualCircuitPublicPrefixesInternalServerError  %+v", 500, o.Payload)
}

func (o *BulkAddVirtualCircuitPublicPrefixesInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewBulkAddVirtualCircuitPublicPrefixesDefault creates a BulkAddVirtualCircuitPublicPrefixesDefault with default headers values
func NewBulkAddVirtualCircuitPublicPrefixesDefault(code int) *BulkAddVirtualCircuitPublicPrefixesDefault {
	return &BulkAddVirtualCircuitPublicPrefixesDefault{
		_statusCode: code,
	}
}

/*BulkAddVirtualCircuitPublicPrefixesDefault handles this case with default header values.

An error has occurred.
*/
type BulkAddVirtualCircuitPublicPrefixesDefault struct {
	_statusCode int

	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

// Code gets the status code for the bulk add virtual circuit public prefixes default response
func (o *BulkAddVirtualCircuitPublicPrefixesDefault) Code() int {
	return o._statusCode
}

func (o *BulkAddVirtualCircuitPublicPrefixesDefault) Error() string {
	return fmt.Sprintf("[POST /virtualCircuits/{virtualCircuitId}/actions/bulkAddPublicPrefixes][%d] BulkAddVirtualCircuitPublicPrefixes default  %+v", o._statusCode, o.Payload)
}

func (o *BulkAddVirtualCircuitPublicPrefixesDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
