// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateRemotePeeringConnectionDetails create remote peering connection details
// swagger:model CreateRemotePeeringConnectionDetails
type CreateRemotePeeringConnectionDetails struct {

	// The OCID of the compartment to contain the RPC.
	// Required: true
	// Max Length: 255
	// Min Length: 1
	CompartmentID *string `json:"compartmentId"`

	// A user-friendly name. Does not have to be unique, and it's changeable.
	// Avoid entering confidential information.
	//
	// Max Length: 255
	// Min Length: 1
	DisplayName string `json:"displayName,omitempty"`

	// The OCID of the DRG the RPC belongs to.
	// Required: true
	// Max Length: 255
	// Min Length: 1
	DrgID *string `json:"drgId"`
}

// Validate validates this create remote peering connection details
func (m *CreateRemotePeeringConnectionDetails) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCompartmentID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateDisplayName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateDrgID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateRemotePeeringConnectionDetails) validateCompartmentID(formats strfmt.Registry) error {

	if err := validate.Required("compartmentId", "body", m.CompartmentID); err != nil {
		return err
	}

	if err := validate.MinLength("compartmentId", "body", string(*m.CompartmentID), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("compartmentId", "body", string(*m.CompartmentID), 255); err != nil {
		return err
	}

	return nil
}

func (m *CreateRemotePeeringConnectionDetails) validateDisplayName(formats strfmt.Registry) error {

	if swag.IsZero(m.DisplayName) { // not required
		return nil
	}

	if err := validate.MinLength("displayName", "body", string(m.DisplayName), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("displayName", "body", string(m.DisplayName), 255); err != nil {
		return err
	}

	return nil
}

func (m *CreateRemotePeeringConnectionDetails) validateDrgID(formats strfmt.Registry) error {

	if err := validate.Required("drgId", "body", m.DrgID); err != nil {
		return err
	}

	if err := validate.MinLength("drgId", "body", string(*m.DrgID), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("drgId", "body", string(*m.DrgID), 255); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CreateRemotePeeringConnectionDetails) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateRemotePeeringConnectionDetails) UnmarshalBinary(b []byte) error {
	var res CreateRemotePeeringConnectionDetails
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
