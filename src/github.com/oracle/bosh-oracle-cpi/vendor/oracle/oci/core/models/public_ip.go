// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PublicIP A *public IP* is a conceptual term that refers to a public IP address and related properties.
// The `publicIp` object is the API representation of a public IP.
//
// There are two types of public IPs:
// 1. Ephemeral
// 2. Reserved
//
// For more information and comparison of the two types,
// see [Public IP Addresses](/Content/Network/Tasks/managingpublicIPs.htm).
//
// swagger:model PublicIp
type PublicIP struct {

	// The public IP's Availability Domain. This property is set only for ephemeral public IPs
	// (that is, when the `scope` of the public IP is set to AVAILABILITY_DOMAIN). The value
	// is the Availability Domain of the assigned private IP.
	//
	// Example: `Uocm:PHX-AD-1`
	//
	// Max Length: 255
	// Min Length: 1
	AvailabilityDomain string `json:"availabilityDomain,omitempty"`

	// The OCID of the compartment containing the public IP. For an ephemeral public IP, this is
	// the same compartment as the private IP's. For a reserved public IP that is currently assigned,
	// this can be a different compartment than the assigned private IP's.
	//
	// Max Length: 255
	// Min Length: 1
	CompartmentID string `json:"compartmentId,omitempty"`

	// A user-friendly name. Does not have to be unique, and it's changeable. Avoid
	// entering confidential information.
	//
	// Max Length: 255
	// Min Length: 1
	DisplayName string `json:"displayName,omitempty"`

	// The public IP's Oracle ID (OCID).
	// Max Length: 255
	// Min Length: 1
	ID string `json:"id,omitempty"`

	// The public IP address of the `publicIp` object.
	//
	// Example: `129.146.2.1`
	//
	IPAddress string `json:"ipAddress,omitempty"`

	// The public IP's current state.
	LifecycleState string `json:"lifecycleState,omitempty"`

	// Defines when the public IP is deleted and released back to Oracle's public IP pool.
	//
	// * `EPHEMERAL`: The lifetime is tied to the lifetime of its assigned private IP. The
	// ephemeral public IP is automatically deleted when its private IP is deleted, when
	// the VNIC is terminated, or when the instance is terminated. An ephemeral
	// public IP must always be assigned to a private IP.
	//
	// * `RESERVED`: You control the public IP's lifetime. You can delete a reserved public IP
	// whenever you like. It does not need to be assigned to a private IP at all times.
	//
	// For more information and comparison of the two types,
	// see [Public IP Addresses](/Content/Network/Tasks/managingpublicIPs.htm).
	//
	Lifetime string `json:"lifetime,omitempty"`

	// The OCID of the private IP that the public IP is currently assigned to, or in the
	// process of being assigned to.
	//
	// Max Length: 255
	// Min Length: 1
	PrivateIPID string `json:"privateIpId,omitempty"`

	// Whether the public IP is regional or specific to a particular Availability Domain.
	//
	// * `REGION`: The public IP exists within a region and can be assigned to a private IP
	// in any Availability Domain in the region. Reserved public IPs have `scope` = `REGION`.
	//
	// * `AVAILABILITY_DOMAIN`: The public IP exists within the Availability Domain of the private IP
	// it's assigned to, which is specified by the `availabilityDomain` property of the public IP object.
	// Ephemeral public IPs have `scope` = `AVAILABILITY_DOMAIN`.
	//
	Scope string `json:"scope,omitempty"`

	// The date and time the public IP was created, in the format defined by RFC3339.
	//
	// Example: `2016-08-25T21:10:29.600Z`
	//
	TimeCreated strfmt.DateTime `json:"timeCreated,omitempty"`
}

// Validate validates this public Ip
func (m *PublicIP) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAvailabilityDomain(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateCompartmentID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateDisplayName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateLifecycleState(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateLifetime(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePrivateIPID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateScope(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTimeCreated(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PublicIP) validateAvailabilityDomain(formats strfmt.Registry) error {

	if swag.IsZero(m.AvailabilityDomain) { // not required
		return nil
	}

	if err := validate.MinLength("availabilityDomain", "body", string(m.AvailabilityDomain), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("availabilityDomain", "body", string(m.AvailabilityDomain), 255); err != nil {
		return err
	}

	return nil
}

func (m *PublicIP) validateCompartmentID(formats strfmt.Registry) error {

	if swag.IsZero(m.CompartmentID) { // not required
		return nil
	}

	if err := validate.MinLength("compartmentId", "body", string(m.CompartmentID), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("compartmentId", "body", string(m.CompartmentID), 255); err != nil {
		return err
	}

	return nil
}

func (m *PublicIP) validateDisplayName(formats strfmt.Registry) error {

	if swag.IsZero(m.DisplayName) { // not required
		return nil
	}

	if err := validate.MinLength("displayName", "body", string(m.DisplayName), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("displayName", "body", string(m.DisplayName), 255); err != nil {
		return err
	}

	return nil
}

func (m *PublicIP) validateID(formats strfmt.Registry) error {

	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.MinLength("id", "body", string(m.ID), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("id", "body", string(m.ID), 255); err != nil {
		return err
	}

	return nil
}

var publicIpTypeLifecycleStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["PROVISIONING","AVAILABLE","ASSIGNING","ASSIGNED","UNASSIGNING","UNASSIGNED","TERMINATING","TERMINATED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		publicIpTypeLifecycleStatePropEnum = append(publicIpTypeLifecycleStatePropEnum, v)
	}
}

const (

	// PublicIPLifecycleStatePROVISIONING captures enum value "PROVISIONING"
	PublicIPLifecycleStatePROVISIONING string = "PROVISIONING"

	// PublicIPLifecycleStateAVAILABLE captures enum value "AVAILABLE"
	PublicIPLifecycleStateAVAILABLE string = "AVAILABLE"

	// PublicIPLifecycleStateASSIGNING captures enum value "ASSIGNING"
	PublicIPLifecycleStateASSIGNING string = "ASSIGNING"

	// PublicIPLifecycleStateASSIGNED captures enum value "ASSIGNED"
	PublicIPLifecycleStateASSIGNED string = "ASSIGNED"

	// PublicIPLifecycleStateUNASSIGNING captures enum value "UNASSIGNING"
	PublicIPLifecycleStateUNASSIGNING string = "UNASSIGNING"

	// PublicIPLifecycleStateUNASSIGNED captures enum value "UNASSIGNED"
	PublicIPLifecycleStateUNASSIGNED string = "UNASSIGNED"

	// PublicIPLifecycleStateTERMINATING captures enum value "TERMINATING"
	PublicIPLifecycleStateTERMINATING string = "TERMINATING"

	// PublicIPLifecycleStateTERMINATED captures enum value "TERMINATED"
	PublicIPLifecycleStateTERMINATED string = "TERMINATED"
)

// prop value enum
func (m *PublicIP) validateLifecycleStateEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, publicIpTypeLifecycleStatePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *PublicIP) validateLifecycleState(formats strfmt.Registry) error {

	if swag.IsZero(m.LifecycleState) { // not required
		return nil
	}

	// value enum
	if err := m.validateLifecycleStateEnum("lifecycleState", "body", m.LifecycleState); err != nil {
		return err
	}

	return nil
}

var publicIpTypeLifetimePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["EPHEMERAL","RESERVED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		publicIpTypeLifetimePropEnum = append(publicIpTypeLifetimePropEnum, v)
	}
}

const (

	// PublicIPLifetimeEPHEMERAL captures enum value "EPHEMERAL"
	PublicIPLifetimeEPHEMERAL string = "EPHEMERAL"

	// PublicIPLifetimeRESERVED captures enum value "RESERVED"
	PublicIPLifetimeRESERVED string = "RESERVED"
)

// prop value enum
func (m *PublicIP) validateLifetimeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, publicIpTypeLifetimePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *PublicIP) validateLifetime(formats strfmt.Registry) error {

	if swag.IsZero(m.Lifetime) { // not required
		return nil
	}

	// value enum
	if err := m.validateLifetimeEnum("lifetime", "body", m.Lifetime); err != nil {
		return err
	}

	return nil
}

func (m *PublicIP) validatePrivateIPID(formats strfmt.Registry) error {

	if swag.IsZero(m.PrivateIPID) { // not required
		return nil
	}

	if err := validate.MinLength("privateIpId", "body", string(m.PrivateIPID), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("privateIpId", "body", string(m.PrivateIPID), 255); err != nil {
		return err
	}

	return nil
}

var publicIpTypeScopePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["REGION","AVAILABILITY_DOMAIN"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		publicIpTypeScopePropEnum = append(publicIpTypeScopePropEnum, v)
	}
}

const (

	// PublicIPScopeREGION captures enum value "REGION"
	PublicIPScopeREGION string = "REGION"

	// PublicIPScopeAVAILABILITYDOMAIN captures enum value "AVAILABILITY_DOMAIN"
	PublicIPScopeAVAILABILITYDOMAIN string = "AVAILABILITY_DOMAIN"
)

// prop value enum
func (m *PublicIP) validateScopeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, publicIpTypeScopePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *PublicIP) validateScope(formats strfmt.Registry) error {

	if swag.IsZero(m.Scope) { // not required
		return nil
	}

	// value enum
	if err := m.validateScopeEnum("scope", "body", m.Scope); err != nil {
		return err
	}

	return nil
}

func (m *PublicIP) validateTimeCreated(formats strfmt.Registry) error {

	if swag.IsZero(m.TimeCreated) { // not required
		return nil
	}

	if err := validate.FormatOf("timeCreated", "body", "date-time", m.TimeCreated.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PublicIP) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PublicIP) UnmarshalBinary(b []byte) error {
	var res PublicIP
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
