// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Image A boot disk image for launching an instance. For more information, see
// [Overview of the Compute Service](/Content/Compute/Concepts/computeoverview.htm).
//
// To use any of the API operations, you must be authorized in an IAM policy. If you're not authorized,
// talk to an administrator. If you're an administrator who needs to write policies to give users access, see
// [Getting Started with Policies](/Content/Identity/Concepts/policygetstarted.htm).
//
// swagger:model Image
type Image struct {

	// The OCID of the image originally used to launch the instance.
	// Max Length: 255
	// Min Length: 1
	BaseImageID string `json:"baseImageId,omitempty"`

	// The OCID of the compartment containing the instance you want to use as the basis for the image.
	//
	// Required: true
	// Max Length: 255
	// Min Length: 1
	CompartmentID *string `json:"compartmentId"`

	// Whether instances launched with this image can be used to create new images.
	// For example, you cannot create an image of an Oracle Database instance.
	// Example: `true`
	//
	// Required: true
	CreateImageAllowed *bool `json:"createImageAllowed"`

	// Defined tags for this resource. Each key is predefined and scoped to a namespace.
	// For more information, see [Resource Tags](/Content/General/Concepts/resourcetags.htm).
	//
	// Example: `{"Operations": {"CostCenter": "42"}}`
	//
	DefinedTags map[string]map[string]interface{} `json:"definedTags,omitempty"`

	// A user-friendly name for the image. It does not have to be unique, and it's changeable.
	// Avoid entering confidential information.
	// You cannot use an Oracle-provided image name as a custom image name.
	//
	// Example: `My custom Oracle Linux image`
	//
	// Max Length: 255
	// Min Length: 1
	DisplayName string `json:"displayName,omitempty"`

	// Free-form tags for this resource. Each tag is a simple key-value pair with no
	// predefined name, type, or namespace. For more information, see
	// [Resource Tags](/Content/General/Concepts/resourcetags.htm).
	//
	// Example: `{"Department": "Finance"}`
	//
	FreeformTags map[string]string `json:"freeformTags,omitempty"`

	// The OCID of the image.
	// Required: true
	// Max Length: 255
	// Min Length: 1
	ID *string `json:"id"`

	// Specifies the configuration mode for launching virtual machine (VM) instances. The configuration modes are:
	// * `NATIVE` - VM instances launch with iSCSI boot and VFIO devices. The default value for Oracle-provided images.
	// * `EMULATED` - VM instances launch with emulated devices, such as the E1000 network driver and emulated SCSI disk controller.
	// * `CUSTOM` - VM instances launch with custom configuration settings specified in the `LaunchOptions` parameter.
	//
	LaunchMode string `json:"launchMode,omitempty"`

	// launch options
	LaunchOptions *LaunchOptions `json:"launchOptions,omitempty"`

	// lifecycle state
	// Required: true
	LifecycleState *string `json:"lifecycleState"`

	// The image's operating system.
	//
	// Example: `Oracle Linux`
	//
	// Required: true
	// Max Length: 255
	// Min Length: 1
	OperatingSystem *string `json:"operatingSystem"`

	// The image's operating system version.
	//
	// Example: `7.2`
	//
	// Required: true
	// Max Length: 255
	// Min Length: 1
	OperatingSystemVersion *string `json:"operatingSystemVersion"`

	// Image size (1 MB = 1048576 bytes)
	//
	// Example: `47694`
	//
	SizeInMBs int64 `json:"sizeInMBs,omitempty"`

	// The date and time the image was created, in the format defined by RFC3339.
	//
	// Example: `2016-08-25T21:10:29.600Z`
	//
	// Required: true
	TimeCreated *strfmt.DateTime `json:"timeCreated"`
}

// Validate validates this image
func (m *Image) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBaseImageID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateCompartmentID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateCreateImageAllowed(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateDisplayName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateLaunchMode(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateLaunchOptions(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateLifecycleState(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateOperatingSystem(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateOperatingSystemVersion(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTimeCreated(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Image) validateBaseImageID(formats strfmt.Registry) error {

	if swag.IsZero(m.BaseImageID) { // not required
		return nil
	}

	if err := validate.MinLength("baseImageId", "body", string(m.BaseImageID), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("baseImageId", "body", string(m.BaseImageID), 255); err != nil {
		return err
	}

	return nil
}

func (m *Image) validateCompartmentID(formats strfmt.Registry) error {

	if err := validate.Required("compartmentId", "body", m.CompartmentID); err != nil {
		return err
	}

	if err := validate.MinLength("compartmentId", "body", string(*m.CompartmentID), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("compartmentId", "body", string(*m.CompartmentID), 255); err != nil {
		return err
	}

	return nil
}

func (m *Image) validateCreateImageAllowed(formats strfmt.Registry) error {

	if err := validate.Required("createImageAllowed", "body", m.CreateImageAllowed); err != nil {
		return err
	}

	return nil
}

func (m *Image) validateDisplayName(formats strfmt.Registry) error {

	if swag.IsZero(m.DisplayName) { // not required
		return nil
	}

	if err := validate.MinLength("displayName", "body", string(m.DisplayName), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("displayName", "body", string(m.DisplayName), 255); err != nil {
		return err
	}

	return nil
}

func (m *Image) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	if err := validate.MinLength("id", "body", string(*m.ID), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("id", "body", string(*m.ID), 255); err != nil {
		return err
	}

	return nil
}

var imageTypeLaunchModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["NATIVE","EMULATED","CUSTOM"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		imageTypeLaunchModePropEnum = append(imageTypeLaunchModePropEnum, v)
	}
}

const (

	// ImageLaunchModeNATIVE captures enum value "NATIVE"
	ImageLaunchModeNATIVE string = "NATIVE"

	// ImageLaunchModeEMULATED captures enum value "EMULATED"
	ImageLaunchModeEMULATED string = "EMULATED"

	// ImageLaunchModeCUSTOM captures enum value "CUSTOM"
	ImageLaunchModeCUSTOM string = "CUSTOM"
)

// prop value enum
func (m *Image) validateLaunchModeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, imageTypeLaunchModePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Image) validateLaunchMode(formats strfmt.Registry) error {

	if swag.IsZero(m.LaunchMode) { // not required
		return nil
	}

	// value enum
	if err := m.validateLaunchModeEnum("launchMode", "body", m.LaunchMode); err != nil {
		return err
	}

	return nil
}

func (m *Image) validateLaunchOptions(formats strfmt.Registry) error {

	if swag.IsZero(m.LaunchOptions) { // not required
		return nil
	}

	if m.LaunchOptions != nil {

		if err := m.LaunchOptions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("launchOptions")
			}
			return err
		}

	}

	return nil
}

var imageTypeLifecycleStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["PROVISIONING","IMPORTING","AVAILABLE","EXPORTING","DISABLED","DELETED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		imageTypeLifecycleStatePropEnum = append(imageTypeLifecycleStatePropEnum, v)
	}
}

const (

	// ImageLifecycleStatePROVISIONING captures enum value "PROVISIONING"
	ImageLifecycleStatePROVISIONING string = "PROVISIONING"

	// ImageLifecycleStateIMPORTING captures enum value "IMPORTING"
	ImageLifecycleStateIMPORTING string = "IMPORTING"

	// ImageLifecycleStateAVAILABLE captures enum value "AVAILABLE"
	ImageLifecycleStateAVAILABLE string = "AVAILABLE"

	// ImageLifecycleStateEXPORTING captures enum value "EXPORTING"
	ImageLifecycleStateEXPORTING string = "EXPORTING"

	// ImageLifecycleStateDISABLED captures enum value "DISABLED"
	ImageLifecycleStateDISABLED string = "DISABLED"

	// ImageLifecycleStateDELETED captures enum value "DELETED"
	ImageLifecycleStateDELETED string = "DELETED"
)

// prop value enum
func (m *Image) validateLifecycleStateEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, imageTypeLifecycleStatePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Image) validateLifecycleState(formats strfmt.Registry) error {

	if err := validate.Required("lifecycleState", "body", m.LifecycleState); err != nil {
		return err
	}

	// value enum
	if err := m.validateLifecycleStateEnum("lifecycleState", "body", *m.LifecycleState); err != nil {
		return err
	}

	return nil
}

func (m *Image) validateOperatingSystem(formats strfmt.Registry) error {

	if err := validate.Required("operatingSystem", "body", m.OperatingSystem); err != nil {
		return err
	}

	if err := validate.MinLength("operatingSystem", "body", string(*m.OperatingSystem), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("operatingSystem", "body", string(*m.OperatingSystem), 255); err != nil {
		return err
	}

	return nil
}

func (m *Image) validateOperatingSystemVersion(formats strfmt.Registry) error {

	if err := validate.Required("operatingSystemVersion", "body", m.OperatingSystemVersion); err != nil {
		return err
	}

	if err := validate.MinLength("operatingSystemVersion", "body", string(*m.OperatingSystemVersion), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("operatingSystemVersion", "body", string(*m.OperatingSystemVersion), 255); err != nil {
		return err
	}

	return nil
}

func (m *Image) validateTimeCreated(formats strfmt.Registry) error {

	if err := validate.Required("timeCreated", "body", m.TimeCreated); err != nil {
		return err
	}

	if err := validate.FormatOf("timeCreated", "body", "date-time", m.TimeCreated.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Image) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Image) UnmarshalBinary(b []byte) error {
	var res Image
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
