// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"encoding/json"
	"io"
	"io/ioutil"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ImageSourceDetails image source details
// swagger:discriminator ImageSourceDetails sourceType
type ImageSourceDetails interface {
	runtime.Validatable

	// The format of the image to be imported.  Exported Oracle images are QCOW2.  Only monolithic
	// images are supported.
	//
	SourceImageType() string
	SetSourceImageType(string)

	// The source type for the image. Use `objectStorageTuple` when specifying the namespace,
	// bucket name, and object name. Use `objectStorageUri` when specifying the Object Storage URL.
	//
	// Required: true
	SourceType() string
	SetSourceType(string)
}

type imageSourceDetails struct {
	sourceImageTypeField string

	sourceTypeField string
}

func (m *imageSourceDetails) SourceImageType() string {
	return m.sourceImageTypeField
}
func (m *imageSourceDetails) SetSourceImageType(val string) {
	m.sourceImageTypeField = val
}

func (m *imageSourceDetails) SourceType() string {
	return "ImageSourceDetails"
}
func (m *imageSourceDetails) SetSourceType(val string) {

}

// Validate validates this image source details
func (m *imageSourceDetails) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSourceImageType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var imageSourceDetailsTypeSourceImageTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["QCOW2","VMDK"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		imageSourceDetailsTypeSourceImageTypePropEnum = append(imageSourceDetailsTypeSourceImageTypePropEnum, v)
	}
}

const (

	// ImageSourceDetailsSourceImageTypeQCOW2 captures enum value "QCOW2"
	ImageSourceDetailsSourceImageTypeQCOW2 string = "QCOW2"

	// ImageSourceDetailsSourceImageTypeVMDK captures enum value "VMDK"
	ImageSourceDetailsSourceImageTypeVMDK string = "VMDK"
)

// prop value enum
func (m *imageSourceDetails) validateSourceImageTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, imageSourceDetailsTypeSourceImageTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *imageSourceDetails) validateSourceImageType(formats strfmt.Registry) error {

	if swag.IsZero(m.SourceImageType()) { // not required
		return nil
	}

	// value enum
	if err := m.validateSourceImageTypeEnum("sourceImageType", "body", m.SourceImageType()); err != nil {
		return err
	}

	return nil
}

// UnmarshalImageSourceDetailsSlice unmarshals polymorphic slices of ImageSourceDetails
func UnmarshalImageSourceDetailsSlice(reader io.Reader, consumer runtime.Consumer) ([]ImageSourceDetails, error) {
	var elements []json.RawMessage
	if err := consumer.Consume(reader, &elements); err != nil {
		return nil, err
	}

	var result []ImageSourceDetails
	for _, element := range elements {
		obj, err := unmarshalImageSourceDetails(element, consumer)
		if err != nil {
			return nil, err
		}
		result = append(result, obj)
	}
	return result, nil
}

// UnmarshalImageSourceDetails unmarshals polymorphic ImageSourceDetails
func UnmarshalImageSourceDetails(reader io.Reader, consumer runtime.Consumer) (ImageSourceDetails, error) {
	// we need to read this twice, so first into a buffer
	data, err := ioutil.ReadAll(reader)
	if err != nil {
		return nil, err
	}
	return unmarshalImageSourceDetails(data, consumer)
}

func unmarshalImageSourceDetails(data []byte, consumer runtime.Consumer) (ImageSourceDetails, error) {
	buf := bytes.NewBuffer(data)
	buf2 := bytes.NewBuffer(data)

	// the first time this is read is to fetch the value of the sourceType property.
	var getType struct {
		SourceType string `json:"sourceType"`
	}
	if err := consumer.Consume(buf, &getType); err != nil {
		return nil, err
	}

	if err := validate.RequiredString("sourceType", "body", getType.SourceType); err != nil {
		return nil, err
	}

	// The value of sourceType is used to determine which type to create and unmarshal the data into
	switch getType.SourceType {
	case "ImageSourceDetails":
		var result imageSourceDetails
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil

	case DiscriminatorTypeValues["ImageSourceViaObjectStorageTupleDetails"]:
		var result ImageSourceViaObjectStorageTupleDetails
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil

	case DiscriminatorTypeValues["ImageSourceViaObjectStorageUriDetails"]:
		var result ImageSourceViaObjectStorageURIDetails
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil

	}
	return nil, errors.New(422, "invalid sourceType value: %q", getType.SourceType)

}
