// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AttachBootVolumeDetails attach boot volume details
// swagger:model AttachBootVolumeDetails
type AttachBootVolumeDetails struct {

	// The OCID of the  boot volume.
	// Required: true
	// Max Length: 255
	// Min Length: 1
	BootVolumeID *string `json:"bootVolumeId"`

	// A user-friendly name. Does not have to be unique, and it cannot be changed. Avoid entering confidential information.
	//
	// Max Length: 255
	// Min Length: 1
	DisplayName string `json:"displayName,omitempty"`

	// The OCID of the instance.
	// Required: true
	// Max Length: 255
	// Min Length: 1
	InstanceID *string `json:"instanceId"`
}

// Validate validates this attach boot volume details
func (m *AttachBootVolumeDetails) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBootVolumeID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateDisplayName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateInstanceID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AttachBootVolumeDetails) validateBootVolumeID(formats strfmt.Registry) error {

	if err := validate.Required("bootVolumeId", "body", m.BootVolumeID); err != nil {
		return err
	}

	if err := validate.MinLength("bootVolumeId", "body", string(*m.BootVolumeID), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("bootVolumeId", "body", string(*m.BootVolumeID), 255); err != nil {
		return err
	}

	return nil
}

func (m *AttachBootVolumeDetails) validateDisplayName(formats strfmt.Registry) error {

	if swag.IsZero(m.DisplayName) { // not required
		return nil
	}

	if err := validate.MinLength("displayName", "body", string(m.DisplayName), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("displayName", "body", string(m.DisplayName), 255); err != nil {
		return err
	}

	return nil
}

func (m *AttachBootVolumeDetails) validateInstanceID(formats strfmt.Registry) error {

	if err := validate.Required("instanceId", "body", m.InstanceID); err != nil {
		return err
	}

	if err := validate.MinLength("instanceId", "body", string(*m.InstanceID), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("instanceId", "body", string(*m.InstanceID), 255); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AttachBootVolumeDetails) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AttachBootVolumeDetails) UnmarshalBinary(b []byte) error {
	var res AttachBootVolumeDetails
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
