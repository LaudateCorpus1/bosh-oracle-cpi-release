// Code generated by go-swagger; DO NOT EDIT.

package virtual_network

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "oracle/oci/core/models"
)

// UpdateLocalPeeringGatewayReader is a Reader for the UpdateLocalPeeringGateway structure.
type UpdateLocalPeeringGatewayReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateLocalPeeringGatewayReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewUpdateLocalPeeringGatewayOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewUpdateLocalPeeringGatewayBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewUpdateLocalPeeringGatewayUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewUpdateLocalPeeringGatewayNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 409:
		result := NewUpdateLocalPeeringGatewayConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 412:
		result := NewUpdateLocalPeeringGatewayPreconditionFailed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewUpdateLocalPeeringGatewayInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewUpdateLocalPeeringGatewayDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewUpdateLocalPeeringGatewayOK creates a UpdateLocalPeeringGatewayOK with default headers values
func NewUpdateLocalPeeringGatewayOK() *UpdateLocalPeeringGatewayOK {
	return &UpdateLocalPeeringGatewayOK{}
}

/*UpdateLocalPeeringGatewayOK handles this case with default header values.

The local peering gateway was updated.
*/
type UpdateLocalPeeringGatewayOK struct {
	/*For optimistic concurrency control. See `if-match`.
	 */
	Etag string
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.LocalPeeringGateway
}

func (o *UpdateLocalPeeringGatewayOK) Error() string {
	return fmt.Sprintf("[PUT /localPeeringGateways/{localPeeringGatewayId}][%d] updateLocalPeeringGatewayOK  %+v", 200, o.Payload)
}

func (o *UpdateLocalPeeringGatewayOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header etag
	o.Etag = response.GetHeader("etag")

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.LocalPeeringGateway)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateLocalPeeringGatewayBadRequest creates a UpdateLocalPeeringGatewayBadRequest with default headers values
func NewUpdateLocalPeeringGatewayBadRequest() *UpdateLocalPeeringGatewayBadRequest {
	return &UpdateLocalPeeringGatewayBadRequest{}
}

/*UpdateLocalPeeringGatewayBadRequest handles this case with default header values.

Bad Request
*/
type UpdateLocalPeeringGatewayBadRequest struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *UpdateLocalPeeringGatewayBadRequest) Error() string {
	return fmt.Sprintf("[PUT /localPeeringGateways/{localPeeringGatewayId}][%d] updateLocalPeeringGatewayBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateLocalPeeringGatewayBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateLocalPeeringGatewayUnauthorized creates a UpdateLocalPeeringGatewayUnauthorized with default headers values
func NewUpdateLocalPeeringGatewayUnauthorized() *UpdateLocalPeeringGatewayUnauthorized {
	return &UpdateLocalPeeringGatewayUnauthorized{}
}

/*UpdateLocalPeeringGatewayUnauthorized handles this case with default header values.

Unauthorized
*/
type UpdateLocalPeeringGatewayUnauthorized struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *UpdateLocalPeeringGatewayUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /localPeeringGateways/{localPeeringGatewayId}][%d] updateLocalPeeringGatewayUnauthorized  %+v", 401, o.Payload)
}

func (o *UpdateLocalPeeringGatewayUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateLocalPeeringGatewayNotFound creates a UpdateLocalPeeringGatewayNotFound with default headers values
func NewUpdateLocalPeeringGatewayNotFound() *UpdateLocalPeeringGatewayNotFound {
	return &UpdateLocalPeeringGatewayNotFound{}
}

/*UpdateLocalPeeringGatewayNotFound handles this case with default header values.

Not Found
*/
type UpdateLocalPeeringGatewayNotFound struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *UpdateLocalPeeringGatewayNotFound) Error() string {
	return fmt.Sprintf("[PUT /localPeeringGateways/{localPeeringGatewayId}][%d] updateLocalPeeringGatewayNotFound  %+v", 404, o.Payload)
}

func (o *UpdateLocalPeeringGatewayNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateLocalPeeringGatewayConflict creates a UpdateLocalPeeringGatewayConflict with default headers values
func NewUpdateLocalPeeringGatewayConflict() *UpdateLocalPeeringGatewayConflict {
	return &UpdateLocalPeeringGatewayConflict{}
}

/*UpdateLocalPeeringGatewayConflict handles this case with default header values.

Conflict
*/
type UpdateLocalPeeringGatewayConflict struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *UpdateLocalPeeringGatewayConflict) Error() string {
	return fmt.Sprintf("[PUT /localPeeringGateways/{localPeeringGatewayId}][%d] updateLocalPeeringGatewayConflict  %+v", 409, o.Payload)
}

func (o *UpdateLocalPeeringGatewayConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateLocalPeeringGatewayPreconditionFailed creates a UpdateLocalPeeringGatewayPreconditionFailed with default headers values
func NewUpdateLocalPeeringGatewayPreconditionFailed() *UpdateLocalPeeringGatewayPreconditionFailed {
	return &UpdateLocalPeeringGatewayPreconditionFailed{}
}

/*UpdateLocalPeeringGatewayPreconditionFailed handles this case with default header values.

Precondition Failed
*/
type UpdateLocalPeeringGatewayPreconditionFailed struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *UpdateLocalPeeringGatewayPreconditionFailed) Error() string {
	return fmt.Sprintf("[PUT /localPeeringGateways/{localPeeringGatewayId}][%d] updateLocalPeeringGatewayPreconditionFailed  %+v", 412, o.Payload)
}

func (o *UpdateLocalPeeringGatewayPreconditionFailed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateLocalPeeringGatewayInternalServerError creates a UpdateLocalPeeringGatewayInternalServerError with default headers values
func NewUpdateLocalPeeringGatewayInternalServerError() *UpdateLocalPeeringGatewayInternalServerError {
	return &UpdateLocalPeeringGatewayInternalServerError{}
}

/*UpdateLocalPeeringGatewayInternalServerError handles this case with default header values.

Internal Server Error
*/
type UpdateLocalPeeringGatewayInternalServerError struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *UpdateLocalPeeringGatewayInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /localPeeringGateways/{localPeeringGatewayId}][%d] updateLocalPeeringGatewayInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateLocalPeeringGatewayInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateLocalPeeringGatewayDefault creates a UpdateLocalPeeringGatewayDefault with default headers values
func NewUpdateLocalPeeringGatewayDefault(code int) *UpdateLocalPeeringGatewayDefault {
	return &UpdateLocalPeeringGatewayDefault{
		_statusCode: code,
	}
}

/*UpdateLocalPeeringGatewayDefault handles this case with default header values.

An error has occurred.
*/
type UpdateLocalPeeringGatewayDefault struct {
	_statusCode int

	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

// Code gets the status code for the update local peering gateway default response
func (o *UpdateLocalPeeringGatewayDefault) Code() int {
	return o._statusCode
}

func (o *UpdateLocalPeeringGatewayDefault) Error() string {
	return fmt.Sprintf("[PUT /localPeeringGateways/{localPeeringGatewayId}][%d] UpdateLocalPeeringGateway default  %+v", o._statusCode, o.Payload)
}

func (o *UpdateLocalPeeringGatewayDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
