// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"encoding/json"
	"io"
	"io/ioutil"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/validate"
)

// InstanceSourceViaImageDetailsAllOf1 instance source via image details all of1
// swagger:discriminator instanceSourceViaImageDetailsAllOf1 image
type InstanceSourceViaImageDetailsAllOf1 interface {
	runtime.Validatable

	// The size of the boot volume in GBs. Minimum value is 50 GB and maximum value is 16384 GB (16TB).
	//
	BootVolumeSizeInGBs() int64
	SetBootVolumeSizeInGBs(int64)

	// The OCID of the image used to boot the instance.
	// Required: true
	// Max Length: 255
	// Min Length: 1
	ImageID() *string
	SetImageID(*string)
}

type instanceSourceViaImageDetailsAllOf1 struct {
	bootVolumeSizeInGBsField int64

	imageIdField *string
}

func (m *instanceSourceViaImageDetailsAllOf1) BootVolumeSizeInGBs() int64 {
	return m.bootVolumeSizeInGBsField
}
func (m *instanceSourceViaImageDetailsAllOf1) SetBootVolumeSizeInGBs(val int64) {
	m.bootVolumeSizeInGBsField = val
}

func (m *instanceSourceViaImageDetailsAllOf1) ImageID() *string {
	return m.imageIdField
}
func (m *instanceSourceViaImageDetailsAllOf1) SetImageID(val *string) {
	m.imageIdField = val
}

// Validate validates this instance source via image details all of1
func (m *instanceSourceViaImageDetailsAllOf1) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateImageID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *instanceSourceViaImageDetailsAllOf1) validateImageID(formats strfmt.Registry) error {

	if err := validate.Required("imageId", "body", m.ImageID()); err != nil {
		return err
	}

	if err := validate.MinLength("imageId", "body", string(*m.ImageID()), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("imageId", "body", string(*m.ImageID()), 255); err != nil {
		return err
	}

	return nil
}

// UnmarshalInstanceSourceViaImageDetailsAllOf1Slice unmarshals polymorphic slices of InstanceSourceViaImageDetailsAllOf1
func UnmarshalInstanceSourceViaImageDetailsAllOf1Slice(reader io.Reader, consumer runtime.Consumer) ([]InstanceSourceViaImageDetailsAllOf1, error) {
	var elements []json.RawMessage
	if err := consumer.Consume(reader, &elements); err != nil {
		return nil, err
	}

	var result []InstanceSourceViaImageDetailsAllOf1
	for _, element := range elements {
		obj, err := unmarshalInstanceSourceViaImageDetailsAllOf1(element, consumer)
		if err != nil {
			return nil, err
		}
		result = append(result, obj)
	}
	return result, nil
}

// UnmarshalInstanceSourceViaImageDetailsAllOf1 unmarshals polymorphic InstanceSourceViaImageDetailsAllOf1
func UnmarshalInstanceSourceViaImageDetailsAllOf1(reader io.Reader, consumer runtime.Consumer) (InstanceSourceViaImageDetailsAllOf1, error) {
	// we need to read this twice, so first into a buffer
	data, err := ioutil.ReadAll(reader)
	if err != nil {
		return nil, err
	}
	return unmarshalInstanceSourceViaImageDetailsAllOf1(data, consumer)
}

func unmarshalInstanceSourceViaImageDetailsAllOf1(data []byte, consumer runtime.Consumer) (InstanceSourceViaImageDetailsAllOf1, error) {
	buf := bytes.NewBuffer(data)
	buf2 := bytes.NewBuffer(data)

	// the first time this is read is to fetch the value of the image property.
	var getType struct {
		Image string `json:"image"`
	}
	if err := consumer.Consume(buf, &getType); err != nil {
		return nil, err
	}

	if err := validate.RequiredString("image", "body", getType.Image); err != nil {
		return nil, err
	}

	// The value of image is used to determine which type to create and unmarshal the data into
	switch getType.Image {
	case "InstanceSourceViaImageDetails":
		var result InstanceSourceViaImageDetails
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil

	case "instanceSourceViaImageDetailsAllOf1":
		var result instanceSourceViaImageDetailsAllOf1
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil

	}
	return nil, errors.New(422, "invalid image value: %q", getType.Image)

}
