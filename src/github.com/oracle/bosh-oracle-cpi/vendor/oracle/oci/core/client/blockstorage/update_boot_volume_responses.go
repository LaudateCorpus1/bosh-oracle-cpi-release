// Code generated by go-swagger; DO NOT EDIT.

package blockstorage

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "oracle/oci/core/models"
)

// UpdateBootVolumeReader is a Reader for the UpdateBootVolume structure.
type UpdateBootVolumeReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateBootVolumeReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewUpdateBootVolumeOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewUpdateBootVolumeBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewUpdateBootVolumeUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewUpdateBootVolumeNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 412:
		result := NewUpdateBootVolumePreconditionFailed()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewUpdateBootVolumeInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewUpdateBootVolumeDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewUpdateBootVolumeOK creates a UpdateBootVolumeOK with default headers values
func NewUpdateBootVolumeOK() *UpdateBootVolumeOK {
	return &UpdateBootVolumeOK{}
}

/*UpdateBootVolumeOK handles this case with default header values.

The boot volume was updated.
*/
type UpdateBootVolumeOK struct {
	/*For optimistic concurrency control. See `if-match`.
	 */
	Etag string
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.BootVolume
}

func (o *UpdateBootVolumeOK) Error() string {
	return fmt.Sprintf("[PUT /bootVolumes/{bootVolumeId}][%d] updateBootVolumeOK  %+v", 200, o.Payload)
}

func (o *UpdateBootVolumeOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header etag
	o.Etag = response.GetHeader("etag")

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.BootVolume)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateBootVolumeBadRequest creates a UpdateBootVolumeBadRequest with default headers values
func NewUpdateBootVolumeBadRequest() *UpdateBootVolumeBadRequest {
	return &UpdateBootVolumeBadRequest{}
}

/*UpdateBootVolumeBadRequest handles this case with default header values.

Bad Request
*/
type UpdateBootVolumeBadRequest struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *UpdateBootVolumeBadRequest) Error() string {
	return fmt.Sprintf("[PUT /bootVolumes/{bootVolumeId}][%d] updateBootVolumeBadRequest  %+v", 400, o.Payload)
}

func (o *UpdateBootVolumeBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateBootVolumeUnauthorized creates a UpdateBootVolumeUnauthorized with default headers values
func NewUpdateBootVolumeUnauthorized() *UpdateBootVolumeUnauthorized {
	return &UpdateBootVolumeUnauthorized{}
}

/*UpdateBootVolumeUnauthorized handles this case with default header values.

Unauthorized
*/
type UpdateBootVolumeUnauthorized struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *UpdateBootVolumeUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /bootVolumes/{bootVolumeId}][%d] updateBootVolumeUnauthorized  %+v", 401, o.Payload)
}

func (o *UpdateBootVolumeUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateBootVolumeNotFound creates a UpdateBootVolumeNotFound with default headers values
func NewUpdateBootVolumeNotFound() *UpdateBootVolumeNotFound {
	return &UpdateBootVolumeNotFound{}
}

/*UpdateBootVolumeNotFound handles this case with default header values.

Not Found
*/
type UpdateBootVolumeNotFound struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *UpdateBootVolumeNotFound) Error() string {
	return fmt.Sprintf("[PUT /bootVolumes/{bootVolumeId}][%d] updateBootVolumeNotFound  %+v", 404, o.Payload)
}

func (o *UpdateBootVolumeNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateBootVolumePreconditionFailed creates a UpdateBootVolumePreconditionFailed with default headers values
func NewUpdateBootVolumePreconditionFailed() *UpdateBootVolumePreconditionFailed {
	return &UpdateBootVolumePreconditionFailed{}
}

/*UpdateBootVolumePreconditionFailed handles this case with default header values.

Precondition Failed
*/
type UpdateBootVolumePreconditionFailed struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *UpdateBootVolumePreconditionFailed) Error() string {
	return fmt.Sprintf("[PUT /bootVolumes/{bootVolumeId}][%d] updateBootVolumePreconditionFailed  %+v", 412, o.Payload)
}

func (o *UpdateBootVolumePreconditionFailed) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateBootVolumeInternalServerError creates a UpdateBootVolumeInternalServerError with default headers values
func NewUpdateBootVolumeInternalServerError() *UpdateBootVolumeInternalServerError {
	return &UpdateBootVolumeInternalServerError{}
}

/*UpdateBootVolumeInternalServerError handles this case with default header values.

Internal Server Error
*/
type UpdateBootVolumeInternalServerError struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *UpdateBootVolumeInternalServerError) Error() string {
	return fmt.Sprintf("[PUT /bootVolumes/{bootVolumeId}][%d] updateBootVolumeInternalServerError  %+v", 500, o.Payload)
}

func (o *UpdateBootVolumeInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateBootVolumeDefault creates a UpdateBootVolumeDefault with default headers values
func NewUpdateBootVolumeDefault(code int) *UpdateBootVolumeDefault {
	return &UpdateBootVolumeDefault{
		_statusCode: code,
	}
}

/*UpdateBootVolumeDefault handles this case with default header values.

An error has occurred.
*/
type UpdateBootVolumeDefault struct {
	_statusCode int

	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

// Code gets the status code for the update boot volume default response
func (o *UpdateBootVolumeDefault) Code() int {
	return o._statusCode
}

func (o *UpdateBootVolumeDefault) Error() string {
	return fmt.Sprintf("[PUT /bootVolumes/{bootVolumeId}][%d] UpdateBootVolume default  %+v", o._statusCode, o.Payload)
}

func (o *UpdateBootVolumeDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
