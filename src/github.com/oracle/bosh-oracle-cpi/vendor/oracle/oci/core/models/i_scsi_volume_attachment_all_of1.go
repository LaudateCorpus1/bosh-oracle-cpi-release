// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"encoding/json"
	"io"
	"io/ioutil"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/validate"
)

// IScsiVolumeAttachmentAllOf1 i scsi volume attachment all of1
// swagger:discriminator iScsiVolumeAttachmentAllOf1 iscsi
type IScsiVolumeAttachmentAllOf1 interface {
	runtime.Validatable

	// The Challenge-Handshake-Authentication-Protocol (CHAP) secret valid for the associated CHAP user name.
	// (Also called the "CHAP password".)
	//
	// Example: `d6866c0d-298b-48ba-95af-309b4faux45e`
	//
	ChapSecret() string
	SetChapSecret(string)

	// The volume's system-generated Challenge-Handshake-Authentication-Protocol (CHAP) user name.
	//
	// Example: `ocid1.volume.oc1.phx.abyhqljrgvttnlx73nmrwfaux7kcvzfs3s66izvxf2h4lgvyndsdsnoiwr5q`
	//
	ChapUsername() string
	SetChapUsername(string)

	// The volume's iSCSI IP address.
	//
	// Example: `169.254.0.2`
	//
	// Required: true
	// Max Length: 15
	// Min Length: 7
	IPV4() *string
	SetIPV4(*string)

	// The target volume's iSCSI Qualified Name in the format defined by RFC 3720.
	//
	// Example: `iqn.2015-12.us.oracle.com:456b0391-17b8-4122-bbf1-f85fc0bb97d9`
	//
	// Required: true
	// Min Length: 1
	Iqn() *string
	SetIqn(*string)

	// The volume's iSCSI port.
	//
	// Example: `3260`
	//
	// Required: true
	// Maximum: 65535
	// Minimum: 1
	Port() *int64
	SetPort(*int64)
}

type iScsiVolumeAttachmentAllOf1 struct {
	chapSecretField string

	chapUsernameField string

	ipv4Field *string

	iqnField *string

	portField *int64
}

func (m *iScsiVolumeAttachmentAllOf1) ChapSecret() string {
	return m.chapSecretField
}
func (m *iScsiVolumeAttachmentAllOf1) SetChapSecret(val string) {
	m.chapSecretField = val
}

func (m *iScsiVolumeAttachmentAllOf1) ChapUsername() string {
	return m.chapUsernameField
}
func (m *iScsiVolumeAttachmentAllOf1) SetChapUsername(val string) {
	m.chapUsernameField = val
}

func (m *iScsiVolumeAttachmentAllOf1) IPV4() *string {
	return m.ipv4Field
}
func (m *iScsiVolumeAttachmentAllOf1) SetIPV4(val *string) {
	m.ipv4Field = val
}

func (m *iScsiVolumeAttachmentAllOf1) Iqn() *string {
	return m.iqnField
}
func (m *iScsiVolumeAttachmentAllOf1) SetIqn(val *string) {
	m.iqnField = val
}

func (m *iScsiVolumeAttachmentAllOf1) Port() *int64 {
	return m.portField
}
func (m *iScsiVolumeAttachmentAllOf1) SetPort(val *int64) {
	m.portField = val
}

// Validate validates this i scsi volume attachment all of1
func (m *iScsiVolumeAttachmentAllOf1) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIPV4(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateIqn(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePort(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *iScsiVolumeAttachmentAllOf1) validateIPV4(formats strfmt.Registry) error {

	if err := validate.Required("ipv4", "body", m.IPV4()); err != nil {
		return err
	}

	if err := validate.MinLength("ipv4", "body", string(*m.IPV4()), 7); err != nil {
		return err
	}

	if err := validate.MaxLength("ipv4", "body", string(*m.IPV4()), 15); err != nil {
		return err
	}

	return nil
}

func (m *iScsiVolumeAttachmentAllOf1) validateIqn(formats strfmt.Registry) error {

	if err := validate.Required("iqn", "body", m.Iqn()); err != nil {
		return err
	}

	if err := validate.MinLength("iqn", "body", string(*m.Iqn()), 1); err != nil {
		return err
	}

	return nil
}

func (m *iScsiVolumeAttachmentAllOf1) validatePort(formats strfmt.Registry) error {

	if err := validate.Required("port", "body", m.Port()); err != nil {
		return err
	}

	if err := validate.MinimumInt("port", "body", int64(*m.Port()), 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("port", "body", int64(*m.Port()), 65535, false); err != nil {
		return err
	}

	return nil
}

// UnmarshalIScsiVolumeAttachmentAllOf1Slice unmarshals polymorphic slices of IScsiVolumeAttachmentAllOf1
func UnmarshalIScsiVolumeAttachmentAllOf1Slice(reader io.Reader, consumer runtime.Consumer) ([]IScsiVolumeAttachmentAllOf1, error) {
	var elements []json.RawMessage
	if err := consumer.Consume(reader, &elements); err != nil {
		return nil, err
	}

	var result []IScsiVolumeAttachmentAllOf1
	for _, element := range elements {
		obj, err := unmarshalIScsiVolumeAttachmentAllOf1(element, consumer)
		if err != nil {
			return nil, err
		}
		result = append(result, obj)
	}
	return result, nil
}

// UnmarshalIScsiVolumeAttachmentAllOf1 unmarshals polymorphic IScsiVolumeAttachmentAllOf1
func UnmarshalIScsiVolumeAttachmentAllOf1(reader io.Reader, consumer runtime.Consumer) (IScsiVolumeAttachmentAllOf1, error) {
	// we need to read this twice, so first into a buffer
	data, err := ioutil.ReadAll(reader)
	if err != nil {
		return nil, err
	}
	return unmarshalIScsiVolumeAttachmentAllOf1(data, consumer)
}

func unmarshalIScsiVolumeAttachmentAllOf1(data []byte, consumer runtime.Consumer) (IScsiVolumeAttachmentAllOf1, error) {
	buf := bytes.NewBuffer(data)
	buf2 := bytes.NewBuffer(data)

	// the first time this is read is to fetch the value of the iscsi property.
	var getType struct {
		Iscsi string `json:"iscsi"`
	}
	if err := consumer.Consume(buf, &getType); err != nil {
		return nil, err
	}

	if err := validate.RequiredString("iscsi", "body", getType.Iscsi); err != nil {
		return nil, err
	}

	// The value of iscsi is used to determine which type to create and unmarshal the data into
	switch getType.Iscsi {
	case "IScsiVolumeAttachment":
		var result IScsiVolumeAttachment
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil

	case "iScsiVolumeAttachmentAllOf1":
		var result iScsiVolumeAttachmentAllOf1
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil

	}
	return nil, errors.New(422, "invalid iscsi value: %q", getType.Iscsi)

}
