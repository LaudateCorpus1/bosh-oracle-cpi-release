// Code generated by go-swagger; DO NOT EDIT.

package virtual_network

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	models "oracle/oci/core/models"
)

// NewUpdateRemotePeeringConnectionParams creates a new UpdateRemotePeeringConnectionParams object
// with the default values initialized.
func NewUpdateRemotePeeringConnectionParams() *UpdateRemotePeeringConnectionParams {
	var ()
	return &UpdateRemotePeeringConnectionParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewUpdateRemotePeeringConnectionParamsWithTimeout creates a new UpdateRemotePeeringConnectionParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewUpdateRemotePeeringConnectionParamsWithTimeout(timeout time.Duration) *UpdateRemotePeeringConnectionParams {
	var ()
	return &UpdateRemotePeeringConnectionParams{

		timeout: timeout,
	}
}

// NewUpdateRemotePeeringConnectionParamsWithContext creates a new UpdateRemotePeeringConnectionParams object
// with the default values initialized, and the ability to set a context for a request
func NewUpdateRemotePeeringConnectionParamsWithContext(ctx context.Context) *UpdateRemotePeeringConnectionParams {
	var ()
	return &UpdateRemotePeeringConnectionParams{

		Context: ctx,
	}
}

// NewUpdateRemotePeeringConnectionParamsWithHTTPClient creates a new UpdateRemotePeeringConnectionParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewUpdateRemotePeeringConnectionParamsWithHTTPClient(client *http.Client) *UpdateRemotePeeringConnectionParams {
	var ()
	return &UpdateRemotePeeringConnectionParams{
		HTTPClient: client,
	}
}

/*UpdateRemotePeeringConnectionParams contains all the parameters to send to the API endpoint
for the update remote peering connection operation typically these are written to a http.Request
*/
type UpdateRemotePeeringConnectionParams struct {

	/*UpdateRemotePeeringConnectionDetails
	  Request to the update the peering connection to remote region

	*/
	UpdateRemotePeeringConnectionDetails *models.UpdateRemotePeeringConnectionDetails
	/*IfMatch
	  For optimistic concurrency control. In the PUT or DELETE call for a resource, set the `if-match`
	parameter to the value of the etag from a previous GET or POST response for that resource.  The resource
	will be updated or deleted only if the etag you provide matches the resource's current etag value.


	*/
	IfMatch *string
	/*RemotePeeringConnectionID
	  The OCID of the remote peering connection (RPC).

	*/
	RemotePeeringConnectionID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the update remote peering connection params
func (o *UpdateRemotePeeringConnectionParams) WithTimeout(timeout time.Duration) *UpdateRemotePeeringConnectionParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the update remote peering connection params
func (o *UpdateRemotePeeringConnectionParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the update remote peering connection params
func (o *UpdateRemotePeeringConnectionParams) WithContext(ctx context.Context) *UpdateRemotePeeringConnectionParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the update remote peering connection params
func (o *UpdateRemotePeeringConnectionParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the update remote peering connection params
func (o *UpdateRemotePeeringConnectionParams) WithHTTPClient(client *http.Client) *UpdateRemotePeeringConnectionParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the update remote peering connection params
func (o *UpdateRemotePeeringConnectionParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithUpdateRemotePeeringConnectionDetails adds the updateRemotePeeringConnectionDetails to the update remote peering connection params
func (o *UpdateRemotePeeringConnectionParams) WithUpdateRemotePeeringConnectionDetails(updateRemotePeeringConnectionDetails *models.UpdateRemotePeeringConnectionDetails) *UpdateRemotePeeringConnectionParams {
	o.SetUpdateRemotePeeringConnectionDetails(updateRemotePeeringConnectionDetails)
	return o
}

// SetUpdateRemotePeeringConnectionDetails adds the updateRemotePeeringConnectionDetails to the update remote peering connection params
func (o *UpdateRemotePeeringConnectionParams) SetUpdateRemotePeeringConnectionDetails(updateRemotePeeringConnectionDetails *models.UpdateRemotePeeringConnectionDetails) {
	o.UpdateRemotePeeringConnectionDetails = updateRemotePeeringConnectionDetails
}

// WithIfMatch adds the ifMatch to the update remote peering connection params
func (o *UpdateRemotePeeringConnectionParams) WithIfMatch(ifMatch *string) *UpdateRemotePeeringConnectionParams {
	o.SetIfMatch(ifMatch)
	return o
}

// SetIfMatch adds the ifMatch to the update remote peering connection params
func (o *UpdateRemotePeeringConnectionParams) SetIfMatch(ifMatch *string) {
	o.IfMatch = ifMatch
}

// WithRemotePeeringConnectionID adds the remotePeeringConnectionID to the update remote peering connection params
func (o *UpdateRemotePeeringConnectionParams) WithRemotePeeringConnectionID(remotePeeringConnectionID string) *UpdateRemotePeeringConnectionParams {
	o.SetRemotePeeringConnectionID(remotePeeringConnectionID)
	return o
}

// SetRemotePeeringConnectionID adds the remotePeeringConnectionId to the update remote peering connection params
func (o *UpdateRemotePeeringConnectionParams) SetRemotePeeringConnectionID(remotePeeringConnectionID string) {
	o.RemotePeeringConnectionID = remotePeeringConnectionID
}

// WriteToRequest writes these params to a swagger request
func (o *UpdateRemotePeeringConnectionParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.UpdateRemotePeeringConnectionDetails != nil {
		if err := r.SetBodyParam(o.UpdateRemotePeeringConnectionDetails); err != nil {
			return err
		}
	}

	if o.IfMatch != nil {

		// header param if-match
		if err := r.SetHeaderParam("if-match", *o.IfMatch); err != nil {
			return err
		}

	}

	// path param remotePeeringConnectionId
	if err := r.SetPathParam("remotePeeringConnectionId", o.RemotePeeringConnectionID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
