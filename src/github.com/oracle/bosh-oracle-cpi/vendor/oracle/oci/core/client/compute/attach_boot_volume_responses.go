// Code generated by go-swagger; DO NOT EDIT.

package compute

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "oracle/oci/core/models"
)

// AttachBootVolumeReader is a Reader for the AttachBootVolume structure.
type AttachBootVolumeReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AttachBootVolumeReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewAttachBootVolumeOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 400:
		result := NewAttachBootVolumeBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 401:
		result := NewAttachBootVolumeUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 404:
		result := NewAttachBootVolumeNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 409:
		result := NewAttachBootVolumeConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 500:
		result := NewAttachBootVolumeInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewAttachBootVolumeDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewAttachBootVolumeOK creates a AttachBootVolumeOK with default headers values
func NewAttachBootVolumeOK() *AttachBootVolumeOK {
	return &AttachBootVolumeOK{}
}

/*AttachBootVolumeOK handles this case with default header values.

The boot volume is being attached.
*/
type AttachBootVolumeOK struct {
	/*For optimistic concurrency control. See `if-match`.
	 */
	Etag string
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.BootVolumeAttachment
}

func (o *AttachBootVolumeOK) Error() string {
	return fmt.Sprintf("[POST /bootVolumeAttachments/][%d] attachBootVolumeOK  %+v", 200, o.Payload)
}

func (o *AttachBootVolumeOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header etag
	o.Etag = response.GetHeader("etag")

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.BootVolumeAttachment)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAttachBootVolumeBadRequest creates a AttachBootVolumeBadRequest with default headers values
func NewAttachBootVolumeBadRequest() *AttachBootVolumeBadRequest {
	return &AttachBootVolumeBadRequest{}
}

/*AttachBootVolumeBadRequest handles this case with default header values.

Bad Request
*/
type AttachBootVolumeBadRequest struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *AttachBootVolumeBadRequest) Error() string {
	return fmt.Sprintf("[POST /bootVolumeAttachments/][%d] attachBootVolumeBadRequest  %+v", 400, o.Payload)
}

func (o *AttachBootVolumeBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAttachBootVolumeUnauthorized creates a AttachBootVolumeUnauthorized with default headers values
func NewAttachBootVolumeUnauthorized() *AttachBootVolumeUnauthorized {
	return &AttachBootVolumeUnauthorized{}
}

/*AttachBootVolumeUnauthorized handles this case with default header values.

Unauthorized
*/
type AttachBootVolumeUnauthorized struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *AttachBootVolumeUnauthorized) Error() string {
	return fmt.Sprintf("[POST /bootVolumeAttachments/][%d] attachBootVolumeUnauthorized  %+v", 401, o.Payload)
}

func (o *AttachBootVolumeUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAttachBootVolumeNotFound creates a AttachBootVolumeNotFound with default headers values
func NewAttachBootVolumeNotFound() *AttachBootVolumeNotFound {
	return &AttachBootVolumeNotFound{}
}

/*AttachBootVolumeNotFound handles this case with default header values.

Not Found
*/
type AttachBootVolumeNotFound struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *AttachBootVolumeNotFound) Error() string {
	return fmt.Sprintf("[POST /bootVolumeAttachments/][%d] attachBootVolumeNotFound  %+v", 404, o.Payload)
}

func (o *AttachBootVolumeNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAttachBootVolumeConflict creates a AttachBootVolumeConflict with default headers values
func NewAttachBootVolumeConflict() *AttachBootVolumeConflict {
	return &AttachBootVolumeConflict{}
}

/*AttachBootVolumeConflict handles this case with default header values.

Conflict
*/
type AttachBootVolumeConflict struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *AttachBootVolumeConflict) Error() string {
	return fmt.Sprintf("[POST /bootVolumeAttachments/][%d] attachBootVolumeConflict  %+v", 409, o.Payload)
}

func (o *AttachBootVolumeConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAttachBootVolumeInternalServerError creates a AttachBootVolumeInternalServerError with default headers values
func NewAttachBootVolumeInternalServerError() *AttachBootVolumeInternalServerError {
	return &AttachBootVolumeInternalServerError{}
}

/*AttachBootVolumeInternalServerError handles this case with default header values.

Internal Server Error
*/
type AttachBootVolumeInternalServerError struct {
	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

func (o *AttachBootVolumeInternalServerError) Error() string {
	return fmt.Sprintf("[POST /bootVolumeAttachments/][%d] attachBootVolumeInternalServerError  %+v", 500, o.Payload)
}

func (o *AttachBootVolumeInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAttachBootVolumeDefault creates a AttachBootVolumeDefault with default headers values
func NewAttachBootVolumeDefault(code int) *AttachBootVolumeDefault {
	return &AttachBootVolumeDefault{
		_statusCode: code,
	}
}

/*AttachBootVolumeDefault handles this case with default header values.

An error has occurred.
*/
type AttachBootVolumeDefault struct {
	_statusCode int

	/*Unique Oracle-assigned identifier for the request. If you need to contact Oracle about
	a particular request, please provide the request ID.

	*/
	OpcRequestID string

	Payload *models.Error
}

// Code gets the status code for the attach boot volume default response
func (o *AttachBootVolumeDefault) Code() int {
	return o._statusCode
}

func (o *AttachBootVolumeDefault) Error() string {
	return fmt.Sprintf("[POST /bootVolumeAttachments/][%d] AttachBootVolume default  %+v", o._statusCode, o.Payload)
}

func (o *AttachBootVolumeDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header opc-request-id
	o.OpcRequestID = response.GetHeader("opc-request-id")

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
