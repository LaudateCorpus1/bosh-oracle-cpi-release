// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"encoding/json"
	"io"
	"io/ioutil"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/validate"
)

// DhcpSearchDomainOptionAllOf1 dhcp search domain option all of1
// swagger:discriminator dhcpSearchDomainOptionAllOf1 SearchDomain
type DhcpSearchDomainOptionAllOf1 interface {
	runtime.Validatable

	// A single search domain name according to [RFC 952](https://tools.ietf.org/html/rfc952)
	// and [RFC 1123](https://tools.ietf.org/html/rfc1123). During a DNS query,
	// the OS will append this search domain name to the value being queried.
	//
	// If you set [DhcpDnsOption](#/en/iaas/20160918/DhcpDnsOption/) to `VcnLocalPlusInternet`,
	// and you assign a DNS label to the VCN during creation, the search domain name in the
	// VCN's default set of DHCP options is automatically set to the VCN domain
	// (for example, `vcn1.oraclevcn.com`).
	//
	// If you don't want to use a search domain name, omit this option from the
	// set of DHCP options. Do not include this option with an empty list
	// of search domain names, or with an empty string as the value for any search
	// domain name.
	//
	// Required: true
	// Max Items: 1
	SearchDomainNames() []string
	SetSearchDomainNames([]string)
}

type dhcpSearchDomainOptionAllOf1 struct {
	searchDomainNamesField []string
}

func (m *dhcpSearchDomainOptionAllOf1) SearchDomainNames() []string {
	return m.searchDomainNamesField
}
func (m *dhcpSearchDomainOptionAllOf1) SetSearchDomainNames(val []string) {
	m.searchDomainNamesField = val
}

// Validate validates this dhcp search domain option all of1
func (m *dhcpSearchDomainOptionAllOf1) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSearchDomainNames(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *dhcpSearchDomainOptionAllOf1) validateSearchDomainNames(formats strfmt.Registry) error {

	if err := validate.Required("searchDomainNames", "body", m.SearchDomainNames()); err != nil {
		return err
	}

	iSearchDomainNamesSize := int64(len(m.SearchDomainNames()))

	if err := validate.MaxItems("searchDomainNames", "body", iSearchDomainNamesSize, 1); err != nil {
		return err
	}

	for i := 0; i < len(m.SearchDomainNames()); i++ {

		if err := validate.MinLength("searchDomainNames"+"."+strconv.Itoa(i), "body", string(m.searchDomainNamesField[i]), 1); err != nil {
			return err
		}

		if err := validate.MaxLength("searchDomainNames"+"."+strconv.Itoa(i), "body", string(m.searchDomainNamesField[i]), 251); err != nil {
			return err
		}

	}

	return nil
}

// UnmarshalDhcpSearchDomainOptionAllOf1Slice unmarshals polymorphic slices of DhcpSearchDomainOptionAllOf1
func UnmarshalDhcpSearchDomainOptionAllOf1Slice(reader io.Reader, consumer runtime.Consumer) ([]DhcpSearchDomainOptionAllOf1, error) {
	var elements []json.RawMessage
	if err := consumer.Consume(reader, &elements); err != nil {
		return nil, err
	}

	var result []DhcpSearchDomainOptionAllOf1
	for _, element := range elements {
		obj, err := unmarshalDhcpSearchDomainOptionAllOf1(element, consumer)
		if err != nil {
			return nil, err
		}
		result = append(result, obj)
	}
	return result, nil
}

// UnmarshalDhcpSearchDomainOptionAllOf1 unmarshals polymorphic DhcpSearchDomainOptionAllOf1
func UnmarshalDhcpSearchDomainOptionAllOf1(reader io.Reader, consumer runtime.Consumer) (DhcpSearchDomainOptionAllOf1, error) {
	// we need to read this twice, so first into a buffer
	data, err := ioutil.ReadAll(reader)
	if err != nil {
		return nil, err
	}
	return unmarshalDhcpSearchDomainOptionAllOf1(data, consumer)
}

func unmarshalDhcpSearchDomainOptionAllOf1(data []byte, consumer runtime.Consumer) (DhcpSearchDomainOptionAllOf1, error) {
	buf := bytes.NewBuffer(data)
	buf2 := bytes.NewBuffer(data)

	// the first time this is read is to fetch the value of the SearchDomain property.
	var getType struct {
		SearchDomain string `json:"SearchDomain"`
	}
	if err := consumer.Consume(buf, &getType); err != nil {
		return nil, err
	}

	if err := validate.RequiredString("SearchDomain", "body", getType.SearchDomain); err != nil {
		return nil, err
	}

	// The value of SearchDomain is used to determine which type to create and unmarshal the data into
	switch getType.SearchDomain {
	case "DhcpSearchDomainOption":
		var result DhcpSearchDomainOption
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil

	case "dhcpSearchDomainOptionAllOf1":
		var result dhcpSearchDomainOptionAllOf1
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil

	}
	return nil, errors.New(422, "invalid SearchDomain value: %q", getType.SearchDomain)

}
