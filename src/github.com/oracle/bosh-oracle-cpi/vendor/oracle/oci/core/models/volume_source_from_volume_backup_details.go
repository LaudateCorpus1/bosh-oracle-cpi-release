// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// VolumeSourceFromVolumeBackupDetails Specifies the volume backup.
// swagger:model VolumeSourceFromVolumeBackupDetails
type VolumeSourceFromVolumeBackupDetails struct {
	typeField string

	idField *string
}

func (m *VolumeSourceFromVolumeBackupDetails) Type() string {
	// return m.typeField
	return DiscriminatorTypeValues["VolumeSourceFromVolumeBackupDetails"]
}
func (m *VolumeSourceFromVolumeBackupDetails) SetType(val string) {
	m.typeField = val
}

func (m *VolumeSourceFromVolumeBackupDetails) ID() *string {
	return m.idField
}
func (m *VolumeSourceFromVolumeBackupDetails) SetID(val *string) {
	m.idField = val
}

// UnmarshalJSON unmarshals this object with a polymorphic type from a JSON structure
func (m *VolumeSourceFromVolumeBackupDetails) UnmarshalJSON(raw []byte) error {
	var data struct {
	}
	buf := bytes.NewBuffer(raw)
	dec := json.NewDecoder(buf)
	dec.UseNumber()

	if err := dec.Decode(&data); err != nil {
		return err
	}

	var base struct {
		/* Just the base type fields. Used for unmashalling polymorphic types.*/

		Type string `json:"type"`

		ID *string `json:"id"`
	}
	buf = bytes.NewBuffer(raw)
	dec = json.NewDecoder(buf)
	dec.UseNumber()

	if err := dec.Decode(&base); err != nil {
		return err
	}

	var result VolumeSourceFromVolumeBackupDetails

	if base.Type != result.Type() {
		/* Not the type we're looking for. */
		return errors.New(422, "invalid type value: %q", base.Type)
	}

	result.idField = base.ID

	*m = result

	return nil
}

// MarshalJSON marshals this object with a polymorphic type to a JSON structure
func (m VolumeSourceFromVolumeBackupDetails) MarshalJSON() ([]byte, error) {
	var b1, b2, b3 []byte
	var err error
	b1, err = json.Marshal(struct {
	}{},
	)
	if err != nil {
		return nil, err
	}
	b2, err = json.Marshal(struct {
		Type string `json:"type"`

		ID *string `json:"id"`
	}{

		Type: m.Type(),

		ID: m.ID(),
	},
	)
	if err != nil {
		return nil, err
	}

	return swag.ConcatJSON(b1, b2, b3), nil
}

// Validate validates this volume source from volume backup details
func (m *VolumeSourceFromVolumeBackupDetails) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VolumeSourceFromVolumeBackupDetails) validateType(formats strfmt.Registry) error {

	if err := validate.RequiredString("type", "body", string(m.Type())); err != nil {
		return err
	}

	return nil
}

func (m *VolumeSourceFromVolumeBackupDetails) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID()); err != nil {
		return err
	}

	if err := validate.MinLength("id", "body", string(*m.ID()), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("id", "body", string(*m.ID()), 255); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *VolumeSourceFromVolumeBackupDetails) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VolumeSourceFromVolumeBackupDetails) UnmarshalBinary(b []byte) error {
	var res VolumeSourceFromVolumeBackupDetails
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
