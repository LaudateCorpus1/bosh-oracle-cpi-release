// Code generated by go-swagger; DO NOT EDIT.

package compute

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetInstanceConsoleConnectionParams creates a new GetInstanceConsoleConnectionParams object
// with the default values initialized.
func NewGetInstanceConsoleConnectionParams() *GetInstanceConsoleConnectionParams {
	var ()
	return &GetInstanceConsoleConnectionParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetInstanceConsoleConnectionParamsWithTimeout creates a new GetInstanceConsoleConnectionParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetInstanceConsoleConnectionParamsWithTimeout(timeout time.Duration) *GetInstanceConsoleConnectionParams {
	var ()
	return &GetInstanceConsoleConnectionParams{

		timeout: timeout,
	}
}

// NewGetInstanceConsoleConnectionParamsWithContext creates a new GetInstanceConsoleConnectionParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetInstanceConsoleConnectionParamsWithContext(ctx context.Context) *GetInstanceConsoleConnectionParams {
	var ()
	return &GetInstanceConsoleConnectionParams{

		Context: ctx,
	}
}

// NewGetInstanceConsoleConnectionParamsWithHTTPClient creates a new GetInstanceConsoleConnectionParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetInstanceConsoleConnectionParamsWithHTTPClient(client *http.Client) *GetInstanceConsoleConnectionParams {
	var ()
	return &GetInstanceConsoleConnectionParams{
		HTTPClient: client,
	}
}

/*GetInstanceConsoleConnectionParams contains all the parameters to send to the API endpoint
for the get instance console connection operation typically these are written to a http.Request
*/
type GetInstanceConsoleConnectionParams struct {

	/*InstanceConsoleConnectionID
	  The OCID of the intance console connection

	*/
	InstanceConsoleConnectionID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get instance console connection params
func (o *GetInstanceConsoleConnectionParams) WithTimeout(timeout time.Duration) *GetInstanceConsoleConnectionParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get instance console connection params
func (o *GetInstanceConsoleConnectionParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get instance console connection params
func (o *GetInstanceConsoleConnectionParams) WithContext(ctx context.Context) *GetInstanceConsoleConnectionParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get instance console connection params
func (o *GetInstanceConsoleConnectionParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get instance console connection params
func (o *GetInstanceConsoleConnectionParams) WithHTTPClient(client *http.Client) *GetInstanceConsoleConnectionParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get instance console connection params
func (o *GetInstanceConsoleConnectionParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithInstanceConsoleConnectionID adds the instanceConsoleConnectionID to the get instance console connection params
func (o *GetInstanceConsoleConnectionParams) WithInstanceConsoleConnectionID(instanceConsoleConnectionID string) *GetInstanceConsoleConnectionParams {
	o.SetInstanceConsoleConnectionID(instanceConsoleConnectionID)
	return o
}

// SetInstanceConsoleConnectionID adds the instanceConsoleConnectionId to the get instance console connection params
func (o *GetInstanceConsoleConnectionParams) SetInstanceConsoleConnectionID(instanceConsoleConnectionID string) {
	o.InstanceConsoleConnectionID = instanceConsoleConnectionID
}

// WriteToRequest writes these params to a swagger request
func (o *GetInstanceConsoleConnectionParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param instanceConsoleConnectionId
	if err := r.SetPathParam("instanceConsoleConnectionId", o.InstanceConsoleConnectionID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
