// Code generated by go-swagger; DO NOT EDIT.

package blockstorage

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new blockstorage API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for blockstorage API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CreateVolume creates volume

Creates a new volume in the specified compartment. Volumes can be created in sizes ranging from
50 GB (51200 MB) to 16 TB (16777216 MB), in 1 GB (1024 MB) increments. By default, volumes are 1 TB (1048576 MB).
For general information about block volumes, see
[Overview of Block Volume Service](/Content/Block/Concepts/overview.htm).

A volume and instance can be in separate compartments but must be in the same Availability Domain.
For information about access control and compartments, see
[Overview of the IAM Service](/Content/Identity/Concepts/overview.htm). For information about
Availability Domains, see [Regions and Availability Domains](/Content/General/Concepts/regions.htm).
To get a list of Availability Domains, use the `ListAvailabilityDomains` operation
in the Identity and Access Management Service API.

You may optionally specify a *display name* for the volume, which is simply a friendly name or
description. It does not have to be unique, and you can change it. Avoid entering confidential information.

*/
func (a *Client) CreateVolume(params *CreateVolumeParams) (*CreateVolumeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateVolumeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CreateVolume",
		Method:             "POST",
		PathPattern:        "/volumes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateVolumeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateVolumeOK), nil

}

/*
CreateVolumeBackup creates volume backup

Creates a new backup of the specified volume. For general information about volume backups,
see [Overview of Block Volume Service Backups](/Content/Block/Concepts/blockvolumebackups.htm)

When the request is received, the backup object is in a REQUEST_RECEIVED state.
When the data is imaged, it goes into a CREATING state.
After the backup is fully uploaded to the cloud, it goes into an AVAILABLE state.

*/
func (a *Client) CreateVolumeBackup(params *CreateVolumeBackupParams) (*CreateVolumeBackupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateVolumeBackupParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CreateVolumeBackup",
		Method:             "POST",
		PathPattern:        "/volumeBackups",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateVolumeBackupReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateVolumeBackupOK), nil

}

/*
CreateVolumeBackupPolicyAssignment creates volume backup policy assignment

Assigns a policy to the specified asset, such as a volume. Note that a given asset can
only have one policy assigned to it; if this method is called for an asset that previously
has a different policy assigned, the prior assignment will be silently deleted.

*/
func (a *Client) CreateVolumeBackupPolicyAssignment(params *CreateVolumeBackupPolicyAssignmentParams) (*CreateVolumeBackupPolicyAssignmentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateVolumeBackupPolicyAssignmentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "CreateVolumeBackupPolicyAssignment",
		Method:             "POST",
		PathPattern:        "/volumeBackupPolicyAssignments",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateVolumeBackupPolicyAssignmentReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateVolumeBackupPolicyAssignmentOK), nil

}

/*
DeleteBootVolume deletes boot volume

Deletes the specified boot volume. The volume cannot have an active connection to an instance.
To disconnect the boot volume from a connected instance, see
[Disconnecting From a Boot Volume](/Content/Block/Tasks/deletingbootvolume.htm).
**Warning:** All data on the boot volume will be permanently lost when the boot volume is deleted.

*/
func (a *Client) DeleteBootVolume(params *DeleteBootVolumeParams) (*DeleteBootVolumeNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteBootVolumeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteBootVolume",
		Method:             "DELETE",
		PathPattern:        "/bootVolumes/{bootVolumeId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteBootVolumeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteBootVolumeNoContent), nil

}

/*
DeleteVolume deletes volume

Deletes the specified volume. The volume cannot have an active connection to an instance.
To disconnect the volume from a connected instance, see
[Disconnecting From a Volume](/Content/Block/Tasks/disconnectingfromavolume.htm).
**Warning:** All data on the volume will be permanently lost when the volume is deleted.

*/
func (a *Client) DeleteVolume(params *DeleteVolumeParams) (*DeleteVolumeNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteVolumeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteVolume",
		Method:             "DELETE",
		PathPattern:        "/volumes/{volumeId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteVolumeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteVolumeNoContent), nil

}

/*
DeleteVolumeBackup deletes volume backup

Deletes a volume backup.
*/
func (a *Client) DeleteVolumeBackup(params *DeleteVolumeBackupParams) (*DeleteVolumeBackupNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteVolumeBackupParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteVolumeBackup",
		Method:             "DELETE",
		PathPattern:        "/volumeBackups/{volumeBackupId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteVolumeBackupReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteVolumeBackupNoContent), nil

}

/*
DeleteVolumeBackupPolicyAssignment deletes volume backup policy assignment

Deletes a volume backup policy assignment (i.e. unassigns the policy from an asset).
*/
func (a *Client) DeleteVolumeBackupPolicyAssignment(params *DeleteVolumeBackupPolicyAssignmentParams) (*DeleteVolumeBackupPolicyAssignmentNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteVolumeBackupPolicyAssignmentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteVolumeBackupPolicyAssignment",
		Method:             "DELETE",
		PathPattern:        "/volumeBackupPolicyAssignments/{policyAssignmentId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DeleteVolumeBackupPolicyAssignmentReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteVolumeBackupPolicyAssignmentNoContent), nil

}

/*
GetBootVolume gets boot volume

Gets information for the specified boot volume.
*/
func (a *Client) GetBootVolume(params *GetBootVolumeParams) (*GetBootVolumeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBootVolumeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetBootVolume",
		Method:             "GET",
		PathPattern:        "/bootVolumes/{bootVolumeId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetBootVolumeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetBootVolumeOK), nil

}

/*
GetVolume gets volume

Gets information for the specified volume.
*/
func (a *Client) GetVolume(params *GetVolumeParams) (*GetVolumeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVolumeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetVolume",
		Method:             "GET",
		PathPattern:        "/volumes/{volumeId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetVolumeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetVolumeOK), nil

}

/*
GetVolumeBackup gets volume backup

Gets information for the specified volume backup.
*/
func (a *Client) GetVolumeBackup(params *GetVolumeBackupParams) (*GetVolumeBackupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVolumeBackupParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetVolumeBackup",
		Method:             "GET",
		PathPattern:        "/volumeBackups/{volumeBackupId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetVolumeBackupReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetVolumeBackupOK), nil

}

/*
GetVolumeBackupPolicy gets volume backup policy

Gets information for the specified volume backup policy.
*/
func (a *Client) GetVolumeBackupPolicy(params *GetVolumeBackupPolicyParams) (*GetVolumeBackupPolicyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVolumeBackupPolicyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetVolumeBackupPolicy",
		Method:             "GET",
		PathPattern:        "/volumeBackupPolicies/{policyId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetVolumeBackupPolicyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetVolumeBackupPolicyOK), nil

}

/*
GetVolumeBackupPolicyAssetAssignment gets volume backup policy asset assignment

Gets the volume backup policy assignment for the specified asset. Note that the
assetId query parameter is required, and that the returned list will contain at most
one item (since any given asset can only have one policy assigned to it).

*/
func (a *Client) GetVolumeBackupPolicyAssetAssignment(params *GetVolumeBackupPolicyAssetAssignmentParams) (*GetVolumeBackupPolicyAssetAssignmentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVolumeBackupPolicyAssetAssignmentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetVolumeBackupPolicyAssetAssignment",
		Method:             "GET",
		PathPattern:        "/volumeBackupPolicyAssignments",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetVolumeBackupPolicyAssetAssignmentReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetVolumeBackupPolicyAssetAssignmentOK), nil

}

/*
GetVolumeBackupPolicyAssignment gets volume backup policy assignment

Gets information for the specified volume backup policy assignment.
*/
func (a *Client) GetVolumeBackupPolicyAssignment(params *GetVolumeBackupPolicyAssignmentParams) (*GetVolumeBackupPolicyAssignmentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVolumeBackupPolicyAssignmentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetVolumeBackupPolicyAssignment",
		Method:             "GET",
		PathPattern:        "/volumeBackupPolicyAssignments/{policyAssignmentId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetVolumeBackupPolicyAssignmentReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetVolumeBackupPolicyAssignmentOK), nil

}

/*
ListBootVolumes lists boot volumes

Lists the boot volumes in the specified compartment and Availability Domain.

*/
func (a *Client) ListBootVolumes(params *ListBootVolumesParams) (*ListBootVolumesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListBootVolumesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ListBootVolumes",
		Method:             "GET",
		PathPattern:        "/bootVolumes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListBootVolumesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListBootVolumesOK), nil

}

/*
ListVolumeBackupPolicies lists volume backup policies

Lists all volume backup policies available to the caller.
*/
func (a *Client) ListVolumeBackupPolicies(params *ListVolumeBackupPoliciesParams) (*ListVolumeBackupPoliciesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListVolumeBackupPoliciesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ListVolumeBackupPolicies",
		Method:             "GET",
		PathPattern:        "/volumeBackupPolicies",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListVolumeBackupPoliciesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListVolumeBackupPoliciesOK), nil

}

/*
ListVolumeBackups lists volume backups

Lists the volume backups in the specified compartment. You can filter the results by volume.

*/
func (a *Client) ListVolumeBackups(params *ListVolumeBackupsParams) (*ListVolumeBackupsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListVolumeBackupsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ListVolumeBackups",
		Method:             "GET",
		PathPattern:        "/volumeBackups",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListVolumeBackupsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListVolumeBackupsOK), nil

}

/*
ListVolumes lists volumes

Lists the volumes in the specified compartment and Availability Domain.

*/
func (a *Client) ListVolumes(params *ListVolumesParams) (*ListVolumesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListVolumesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "ListVolumes",
		Method:             "GET",
		PathPattern:        "/volumes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListVolumesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListVolumesOK), nil

}

/*
UpdateBootVolume updates boot volume

Updates the specified boot volume's display name.
*/
func (a *Client) UpdateBootVolume(params *UpdateBootVolumeParams) (*UpdateBootVolumeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateBootVolumeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "UpdateBootVolume",
		Method:             "PUT",
		PathPattern:        "/bootVolumes/{bootVolumeId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateBootVolumeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateBootVolumeOK), nil

}

/*
UpdateVolume updates volume

Updates the specified volume's display name.
Avoid entering confidential information.

*/
func (a *Client) UpdateVolume(params *UpdateVolumeParams) (*UpdateVolumeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateVolumeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "UpdateVolume",
		Method:             "PUT",
		PathPattern:        "/volumes/{volumeId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateVolumeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateVolumeOK), nil

}

/*
UpdateVolumeBackup updates volume backup

Updates the display name for the specified volume backup.
Avoid entering confidential information.

*/
func (a *Client) UpdateVolumeBackup(params *UpdateVolumeBackupParams) (*UpdateVolumeBackupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateVolumeBackupParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "UpdateVolumeBackup",
		Method:             "PUT",
		PathPattern:        "/volumeBackups/{volumeBackupId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &UpdateVolumeBackupReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateVolumeBackupOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
