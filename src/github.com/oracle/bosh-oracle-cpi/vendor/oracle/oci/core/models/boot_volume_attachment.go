// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// BootVolumeAttachment Represents an attachment between a boot volume and an instance.
//
// swagger:model BootVolumeAttachment
type BootVolumeAttachment struct {

	// The Availability Domain of an instance.
	//
	// Example: `Uocm:PHX-AD-1`
	//
	// Required: true
	// Max Length: 255
	// Min Length: 1
	AvailabilityDomain *string `json:"availabilityDomain"`

	// The OCID of the boot volume.
	// Required: true
	// Max Length: 255
	// Min Length: 1
	BootVolumeID *string `json:"bootVolumeId"`

	// The OCID of the compartment.
	// Required: true
	// Max Length: 255
	// Min Length: 1
	CompartmentID *string `json:"compartmentId"`

	// A user-friendly name. Does not have to be unique, and it cannot be changed.
	// Avoid entering confidential information.
	//
	// Example: `My boot volume`
	//
	// Max Length: 255
	// Min Length: 1
	DisplayName string `json:"displayName,omitempty"`

	// The OCID of the boot volume attachment.
	// Required: true
	// Max Length: 255
	// Min Length: 1
	ID *string `json:"id"`

	// The OCID of the instance the boot volume is attached to.
	// Required: true
	// Max Length: 255
	// Min Length: 1
	InstanceID *string `json:"instanceId"`

	// The current state of the boot volume attachment.
	// Required: true
	LifecycleState *string `json:"lifecycleState"`

	// The date and time the boot volume was created, in the format defined by RFC3339.
	//
	// Example: `2016-08-25T21:10:29.600Z`
	//
	// Required: true
	TimeCreated *strfmt.DateTime `json:"timeCreated"`
}

// Validate validates this boot volume attachment
func (m *BootVolumeAttachment) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAvailabilityDomain(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateBootVolumeID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateCompartmentID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateDisplayName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateInstanceID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateLifecycleState(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTimeCreated(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BootVolumeAttachment) validateAvailabilityDomain(formats strfmt.Registry) error {

	if err := validate.Required("availabilityDomain", "body", m.AvailabilityDomain); err != nil {
		return err
	}

	if err := validate.MinLength("availabilityDomain", "body", string(*m.AvailabilityDomain), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("availabilityDomain", "body", string(*m.AvailabilityDomain), 255); err != nil {
		return err
	}

	return nil
}

func (m *BootVolumeAttachment) validateBootVolumeID(formats strfmt.Registry) error {

	if err := validate.Required("bootVolumeId", "body", m.BootVolumeID); err != nil {
		return err
	}

	if err := validate.MinLength("bootVolumeId", "body", string(*m.BootVolumeID), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("bootVolumeId", "body", string(*m.BootVolumeID), 255); err != nil {
		return err
	}

	return nil
}

func (m *BootVolumeAttachment) validateCompartmentID(formats strfmt.Registry) error {

	if err := validate.Required("compartmentId", "body", m.CompartmentID); err != nil {
		return err
	}

	if err := validate.MinLength("compartmentId", "body", string(*m.CompartmentID), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("compartmentId", "body", string(*m.CompartmentID), 255); err != nil {
		return err
	}

	return nil
}

func (m *BootVolumeAttachment) validateDisplayName(formats strfmt.Registry) error {

	if swag.IsZero(m.DisplayName) { // not required
		return nil
	}

	if err := validate.MinLength("displayName", "body", string(m.DisplayName), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("displayName", "body", string(m.DisplayName), 255); err != nil {
		return err
	}

	return nil
}

func (m *BootVolumeAttachment) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	if err := validate.MinLength("id", "body", string(*m.ID), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("id", "body", string(*m.ID), 255); err != nil {
		return err
	}

	return nil
}

func (m *BootVolumeAttachment) validateInstanceID(formats strfmt.Registry) error {

	if err := validate.Required("instanceId", "body", m.InstanceID); err != nil {
		return err
	}

	if err := validate.MinLength("instanceId", "body", string(*m.InstanceID), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("instanceId", "body", string(*m.InstanceID), 255); err != nil {
		return err
	}

	return nil
}

var bootVolumeAttachmentTypeLifecycleStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ATTACHING","ATTACHED","DETACHING","DETACHED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		bootVolumeAttachmentTypeLifecycleStatePropEnum = append(bootVolumeAttachmentTypeLifecycleStatePropEnum, v)
	}
}

const (

	// BootVolumeAttachmentLifecycleStateATTACHING captures enum value "ATTACHING"
	BootVolumeAttachmentLifecycleStateATTACHING string = "ATTACHING"

	// BootVolumeAttachmentLifecycleStateATTACHED captures enum value "ATTACHED"
	BootVolumeAttachmentLifecycleStateATTACHED string = "ATTACHED"

	// BootVolumeAttachmentLifecycleStateDETACHING captures enum value "DETACHING"
	BootVolumeAttachmentLifecycleStateDETACHING string = "DETACHING"

	// BootVolumeAttachmentLifecycleStateDETACHED captures enum value "DETACHED"
	BootVolumeAttachmentLifecycleStateDETACHED string = "DETACHED"
)

// prop value enum
func (m *BootVolumeAttachment) validateLifecycleStateEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, bootVolumeAttachmentTypeLifecycleStatePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *BootVolumeAttachment) validateLifecycleState(formats strfmt.Registry) error {

	if err := validate.Required("lifecycleState", "body", m.LifecycleState); err != nil {
		return err
	}

	// value enum
	if err := m.validateLifecycleStateEnum("lifecycleState", "body", *m.LifecycleState); err != nil {
		return err
	}

	return nil
}

func (m *BootVolumeAttachment) validateTimeCreated(formats strfmt.Registry) error {

	if err := validate.Required("timeCreated", "body", m.TimeCreated); err != nil {
		return err
	}

	if err := validate.FormatOf("timeCreated", "body", "date-time", m.TimeCreated.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BootVolumeAttachment) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BootVolumeAttachment) UnmarshalBinary(b []byte) error {
	var res BootVolumeAttachment
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
