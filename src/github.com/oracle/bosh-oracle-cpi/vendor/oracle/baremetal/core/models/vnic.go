package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Vnic A virtual network interface card. Each instance automatically has a VNIC attached to it,
// and the VNIC connects the instance to the subnet. For more information, see
// [Overview of the Compute Service](/Content/Compute/Concepts/computeoverview.htm).
//
// To use any of the API operations, you must be authorized in an IAM policy. If you're not authorized,
// talk to an administrator. If you're an administrator who needs to write policies to give users access, see
// [Getting Started with Policies](/Content/Identity/Concepts/policygetstarted.htm).
//
// swagger:model Vnic
type Vnic struct {

	// The VNIC's Availability Domain.
	//
	// Example: `Uocm:PHX-AD-1`
	//
	// Max Length: 255
	// Min Length: 1
	AvailabilityDomain string `json:"availabilityDomain,omitempty"`

	// The OCID of the compartment containing the VNIC.
	// Max Length: 255
	// Min Length: 1
	CompartmentID string `json:"compartmentId,omitempty"`

	// A user-friendly name. Does not have to be unique.
	// Max Length: 255
	// Min Length: 1
	DisplayName string `json:"displayName,omitempty"`

	// The hostname for the VNIC that is created during instance launch.
	// Used for DNS. The value is the hostname portion of the instance's
	// fully qualified domain name (FQDN) (e.g., `bminstance-1` in FQDN
	// `bminstance-1.subnet123.vcn1.oraclevcn.com`).
	// Must be unique across all VNICs in the subnet and comply with
	// [RFC 952](https://tools.ietf.org/html/rfc952) and
	// [RFC 1123](https://tools.ietf.org/html/rfc1123).
	// The value cannot be changed.
	//
	// For more information, see
	// [DNS in Your Virtual Cloud Network](/Content/Network/Concepts/dns.htm).
	//
	// Example: `bminstance-1`
	//
	// Max Length: 63
	// Min Length: 1
	HostnameLabel string `json:"hostnameLabel,omitempty"`

	// The OCID of the VNIC.
	// Max Length: 255
	// Min Length: 1
	ID string `json:"id,omitempty"`

	// The current state of the VNIC.
	LifecycleState string `json:"lifecycleState,omitempty"`

	// The private IP address of the VNIC. The address is within the subnet's CIDR
	// and is accessible within the VCN.
	//
	PrivateIP string `json:"privateIp,omitempty"`

	// The public IP address of the VNIC, if one is assigned.
	//
	PublicIP string `json:"publicIp,omitempty"`

	// The OCID of the subnet the VNIC is in.
	// Max Length: 255
	// Min Length: 1
	SubnetID string `json:"subnetId,omitempty"`

	// The date and time the VNIC was created, in the format defined by RFC3339.
	//
	// Example: `2016-08-25T21:10:29.600Z`
	//
	TimeCreated strfmt.DateTime `json:"timeCreated,omitempty"`
}

// Validate validates this vnic
func (m *Vnic) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAvailabilityDomain(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateCompartmentID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateDisplayName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateHostnameLabel(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateLifecycleState(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateSubnetID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Vnic) validateAvailabilityDomain(formats strfmt.Registry) error {

	if swag.IsZero(m.AvailabilityDomain) { // not required
		return nil
	}

	if err := validate.MinLength("availabilityDomain", "body", string(m.AvailabilityDomain), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("availabilityDomain", "body", string(m.AvailabilityDomain), 255); err != nil {
		return err
	}

	return nil
}

func (m *Vnic) validateCompartmentID(formats strfmt.Registry) error {

	if swag.IsZero(m.CompartmentID) { // not required
		return nil
	}

	if err := validate.MinLength("compartmentId", "body", string(m.CompartmentID), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("compartmentId", "body", string(m.CompartmentID), 255); err != nil {
		return err
	}

	return nil
}

func (m *Vnic) validateDisplayName(formats strfmt.Registry) error {

	if swag.IsZero(m.DisplayName) { // not required
		return nil
	}

	if err := validate.MinLength("displayName", "body", string(m.DisplayName), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("displayName", "body", string(m.DisplayName), 255); err != nil {
		return err
	}

	return nil
}

func (m *Vnic) validateHostnameLabel(formats strfmt.Registry) error {

	if swag.IsZero(m.HostnameLabel) { // not required
		return nil
	}

	if err := validate.MinLength("hostnameLabel", "body", string(m.HostnameLabel), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("hostnameLabel", "body", string(m.HostnameLabel), 63); err != nil {
		return err
	}

	return nil
}

func (m *Vnic) validateID(formats strfmt.Registry) error {

	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.MinLength("id", "body", string(m.ID), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("id", "body", string(m.ID), 255); err != nil {
		return err
	}

	return nil
}

var vnicTypeLifecycleStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["PROVISIONING","AVAILABLE","TERMINATING","TERMINATED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		vnicTypeLifecycleStatePropEnum = append(vnicTypeLifecycleStatePropEnum, v)
	}
}

const (
	// VnicLifecycleStatePROVISIONING captures enum value "PROVISIONING"
	VnicLifecycleStatePROVISIONING string = "PROVISIONING"
	// VnicLifecycleStateAVAILABLE captures enum value "AVAILABLE"
	VnicLifecycleStateAVAILABLE string = "AVAILABLE"
	// VnicLifecycleStateTERMINATING captures enum value "TERMINATING"
	VnicLifecycleStateTERMINATING string = "TERMINATING"
	// VnicLifecycleStateTERMINATED captures enum value "TERMINATED"
	VnicLifecycleStateTERMINATED string = "TERMINATED"
)

// prop value enum
func (m *Vnic) validateLifecycleStateEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, vnicTypeLifecycleStatePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Vnic) validateLifecycleState(formats strfmt.Registry) error {

	if swag.IsZero(m.LifecycleState) { // not required
		return nil
	}

	// value enum
	if err := m.validateLifecycleStateEnum("lifecycleState", "body", m.LifecycleState); err != nil {
		return err
	}

	return nil
}

func (m *Vnic) validateSubnetID(formats strfmt.Registry) error {

	if swag.IsZero(m.SubnetID) { // not required
		return nil
	}

	if err := validate.MinLength("subnetId", "body", string(m.SubnetID), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("subnetId", "body", string(m.SubnetID), 255); err != nil {
		return err
	}

	return nil
}
