package compute

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	"oracle/baremetal/core/models"
)

// NewLaunchInstanceParams creates a new LaunchInstanceParams object
// with the default values initialized.
func NewLaunchInstanceParams() *LaunchInstanceParams {
	var ()
	return &LaunchInstanceParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewLaunchInstanceParamsWithTimeout creates a new LaunchInstanceParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewLaunchInstanceParamsWithTimeout(timeout time.Duration) *LaunchInstanceParams {
	var ()
	return &LaunchInstanceParams{

		timeout: timeout,
	}
}

// NewLaunchInstanceParamsWithContext creates a new LaunchInstanceParams object
// with the default values initialized, and the ability to set a context for a request
func NewLaunchInstanceParamsWithContext(ctx context.Context) *LaunchInstanceParams {
	var ()
	return &LaunchInstanceParams{

		Context: ctx,
	}
}

// NewLaunchInstanceParamsWithHTTPClient creates a new LaunchInstanceParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewLaunchInstanceParamsWithHTTPClient(client *http.Client) *LaunchInstanceParams {
	var ()
	return &LaunchInstanceParams{
		HTTPClient: client,
	}
}

/*LaunchInstanceParams contains all the parameters to send to the API endpoint
for the launch instance operation typically these are written to a http.Request
*/
type LaunchInstanceParams struct {

	/*LaunchInstanceDetails
	  Instance details

	*/
	LaunchInstanceDetails *models.LaunchInstanceDetails
	/*OpcHostSerial
	  For Oracle internal use only.

	*/
	OpcHostSerial *string
	/*OpcPoolName
	  For Oracle internal use only.

	*/
	OpcPoolName *string
	/*OpcRetryToken
	  A token that uniquely identifies a request so it can be retried in case of a timeout or
	server error without risk of executing that same action again. Retry tokens expire after 24
	hours, but can be invalidated before then due to conflicting operations (e.g., if a resource
	has been deleted and purged from the system, then a retry of the original creation request
	may be rejected).


	*/
	OpcRetryToken *string
	/*OpcVnicID
	  For Oracle internal use only.

	*/
	OpcVnicID *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the launch instance params
func (o *LaunchInstanceParams) WithTimeout(timeout time.Duration) *LaunchInstanceParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the launch instance params
func (o *LaunchInstanceParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the launch instance params
func (o *LaunchInstanceParams) WithContext(ctx context.Context) *LaunchInstanceParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the launch instance params
func (o *LaunchInstanceParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the launch instance params
func (o *LaunchInstanceParams) WithHTTPClient(client *http.Client) *LaunchInstanceParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the launch instance params
func (o *LaunchInstanceParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithLaunchInstanceDetails adds the launchInstanceDetails to the launch instance params
func (o *LaunchInstanceParams) WithLaunchInstanceDetails(launchInstanceDetails *models.LaunchInstanceDetails) *LaunchInstanceParams {
	o.SetLaunchInstanceDetails(launchInstanceDetails)
	return o
}

// SetLaunchInstanceDetails adds the launchInstanceDetails to the launch instance params
func (o *LaunchInstanceParams) SetLaunchInstanceDetails(launchInstanceDetails *models.LaunchInstanceDetails) {
	o.LaunchInstanceDetails = launchInstanceDetails
}

// WithOpcHostSerial adds the opcHostSerial to the launch instance params
func (o *LaunchInstanceParams) WithOpcHostSerial(opcHostSerial *string) *LaunchInstanceParams {
	o.SetOpcHostSerial(opcHostSerial)
	return o
}

// SetOpcHostSerial adds the opcHostSerial to the launch instance params
func (o *LaunchInstanceParams) SetOpcHostSerial(opcHostSerial *string) {
	o.OpcHostSerial = opcHostSerial
}

// WithOpcPoolName adds the opcPoolName to the launch instance params
func (o *LaunchInstanceParams) WithOpcPoolName(opcPoolName *string) *LaunchInstanceParams {
	o.SetOpcPoolName(opcPoolName)
	return o
}

// SetOpcPoolName adds the opcPoolName to the launch instance params
func (o *LaunchInstanceParams) SetOpcPoolName(opcPoolName *string) {
	o.OpcPoolName = opcPoolName
}

// WithOpcRetryToken adds the opcRetryToken to the launch instance params
func (o *LaunchInstanceParams) WithOpcRetryToken(opcRetryToken *string) *LaunchInstanceParams {
	o.SetOpcRetryToken(opcRetryToken)
	return o
}

// SetOpcRetryToken adds the opcRetryToken to the launch instance params
func (o *LaunchInstanceParams) SetOpcRetryToken(opcRetryToken *string) {
	o.OpcRetryToken = opcRetryToken
}

// WithOpcVnicID adds the opcVnicID to the launch instance params
func (o *LaunchInstanceParams) WithOpcVnicID(opcVnicID *string) *LaunchInstanceParams {
	o.SetOpcVnicID(opcVnicID)
	return o
}

// SetOpcVnicID adds the opcVnicId to the launch instance params
func (o *LaunchInstanceParams) SetOpcVnicID(opcVnicID *string) {
	o.OpcVnicID = opcVnicID
}

// WriteToRequest writes these params to a swagger request
func (o *LaunchInstanceParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.LaunchInstanceDetails == nil {
		o.LaunchInstanceDetails = new(models.LaunchInstanceDetails)
	}

	if err := r.SetBodyParam(o.LaunchInstanceDetails); err != nil {
		return err
	}

	if o.OpcHostSerial != nil {

		// query param opc-host-serial
		var qrOpcHostSerial string
		if o.OpcHostSerial != nil {
			qrOpcHostSerial = *o.OpcHostSerial
		}
		qOpcHostSerial := qrOpcHostSerial
		if qOpcHostSerial != "" {
			if err := r.SetQueryParam("opc-host-serial", qOpcHostSerial); err != nil {
				return err
			}
		}

	}

	if o.OpcPoolName != nil {

		// query param opc-pool-name
		var qrOpcPoolName string
		if o.OpcPoolName != nil {
			qrOpcPoolName = *o.OpcPoolName
		}
		qOpcPoolName := qrOpcPoolName
		if qOpcPoolName != "" {
			if err := r.SetQueryParam("opc-pool-name", qOpcPoolName); err != nil {
				return err
			}
		}

	}

	if o.OpcRetryToken != nil {

		// header param opc-retry-token
		if err := r.SetHeaderParam("opc-retry-token", *o.OpcRetryToken); err != nil {
			return err
		}

	}

	if o.OpcVnicID != nil {

		// query param opc-vnic-id
		var qrOpcVnicID string
		if o.OpcVnicID != nil {
			qrOpcVnicID = *o.OpcVnicID
		}
		qOpcVnicID := qrOpcVnicID
		if qOpcVnicID != "" {
			if err := r.SetQueryParam("opc-vnic-id", qOpcVnicID); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
