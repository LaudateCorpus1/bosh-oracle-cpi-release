package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// VnicAttachment Represents an attachment between a VNIC and an instance. For more information, see
// [Overview of the Compute Service](/Content/Compute/Concepts/computeoverview.htm).
//
// swagger:model VnicAttachment
type VnicAttachment struct {

	// The Availability Domain of an instance.
	//
	// Example: `Uocm:PHX-AD-1`
	//
	// Required: true
	// Max Length: 255
	// Min Length: 1
	AvailabilityDomain *string `json:"availabilityDomain"`

	// The OCID of the compartment.
	// Required: true
	// Max Length: 255
	// Min Length: 1
	CompartmentID *string `json:"compartmentId"`

	// A user-friendly name. Does not have to be unique.
	// Max Length: 255
	// Min Length: 1
	DisplayName string `json:"displayName,omitempty"`

	// The OCID of the VNIC attachment.
	// Required: true
	// Max Length: 255
	// Min Length: 1
	ID *string `json:"id"`

	// The OCID of the instance.
	// Required: true
	// Max Length: 255
	// Min Length: 1
	InstanceID *string `json:"instanceId"`

	// The current state of the VNIC attachment.
	// Required: true
	LifecycleState *string `json:"lifecycleState"`

	// The OCID of the subnet of the VNIC.
	// Required: true
	// Max Length: 255
	// Min Length: 1
	SubnetID *string `json:"subnetId"`

	// The date and time the VNIC attachment was created, in the format defined by RFC3339.
	//
	// Example: `2016-08-25T21:10:29.600Z`
	//
	// Required: true
	TimeCreated *strfmt.DateTime `json:"timeCreated"`

	// The OCID of the VNIC.
	// Required: true
	// Max Length: 255
	// Min Length: 1
	VnicID *string `json:"vnicId"`
}

// Validate validates this vnic attachment
func (m *VnicAttachment) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAvailabilityDomain(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateCompartmentID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateDisplayName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateInstanceID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateLifecycleState(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateSubnetID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTimeCreated(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateVnicID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VnicAttachment) validateAvailabilityDomain(formats strfmt.Registry) error {

	if err := validate.Required("availabilityDomain", "body", m.AvailabilityDomain); err != nil {
		return err
	}

	if err := validate.MinLength("availabilityDomain", "body", string(*m.AvailabilityDomain), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("availabilityDomain", "body", string(*m.AvailabilityDomain), 255); err != nil {
		return err
	}

	return nil
}

func (m *VnicAttachment) validateCompartmentID(formats strfmt.Registry) error {

	if err := validate.Required("compartmentId", "body", m.CompartmentID); err != nil {
		return err
	}

	if err := validate.MinLength("compartmentId", "body", string(*m.CompartmentID), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("compartmentId", "body", string(*m.CompartmentID), 255); err != nil {
		return err
	}

	return nil
}

func (m *VnicAttachment) validateDisplayName(formats strfmt.Registry) error {

	if swag.IsZero(m.DisplayName) { // not required
		return nil
	}

	if err := validate.MinLength("displayName", "body", string(m.DisplayName), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("displayName", "body", string(m.DisplayName), 255); err != nil {
		return err
	}

	return nil
}

func (m *VnicAttachment) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	if err := validate.MinLength("id", "body", string(*m.ID), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("id", "body", string(*m.ID), 255); err != nil {
		return err
	}

	return nil
}

func (m *VnicAttachment) validateInstanceID(formats strfmt.Registry) error {

	if err := validate.Required("instanceId", "body", m.InstanceID); err != nil {
		return err
	}

	if err := validate.MinLength("instanceId", "body", string(*m.InstanceID), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("instanceId", "body", string(*m.InstanceID), 255); err != nil {
		return err
	}

	return nil
}

var vnicAttachmentTypeLifecycleStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ATTACHING","ATTACHED","DETACHING","DETACHED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		vnicAttachmentTypeLifecycleStatePropEnum = append(vnicAttachmentTypeLifecycleStatePropEnum, v)
	}
}

const (
	// VnicAttachmentLifecycleStateATTACHING captures enum value "ATTACHING"
	VnicAttachmentLifecycleStateATTACHING string = "ATTACHING"
	// VnicAttachmentLifecycleStateATTACHED captures enum value "ATTACHED"
	VnicAttachmentLifecycleStateATTACHED string = "ATTACHED"
	// VnicAttachmentLifecycleStateDETACHING captures enum value "DETACHING"
	VnicAttachmentLifecycleStateDETACHING string = "DETACHING"
	// VnicAttachmentLifecycleStateDETACHED captures enum value "DETACHED"
	VnicAttachmentLifecycleStateDETACHED string = "DETACHED"
)

// prop value enum
func (m *VnicAttachment) validateLifecycleStateEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, vnicAttachmentTypeLifecycleStatePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *VnicAttachment) validateLifecycleState(formats strfmt.Registry) error {

	if err := validate.Required("lifecycleState", "body", m.LifecycleState); err != nil {
		return err
	}

	// value enum
	if err := m.validateLifecycleStateEnum("lifecycleState", "body", *m.LifecycleState); err != nil {
		return err
	}

	return nil
}

func (m *VnicAttachment) validateSubnetID(formats strfmt.Registry) error {

	if err := validate.Required("subnetId", "body", m.SubnetID); err != nil {
		return err
	}

	if err := validate.MinLength("subnetId", "body", string(*m.SubnetID), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("subnetId", "body", string(*m.SubnetID), 255); err != nil {
		return err
	}

	return nil
}

func (m *VnicAttachment) validateTimeCreated(formats strfmt.Registry) error {

	if err := validate.Required("timeCreated", "body", m.TimeCreated); err != nil {
		return err
	}

	return nil
}

func (m *VnicAttachment) validateVnicID(formats strfmt.Registry) error {

	if err := validate.Required("vnicId", "body", m.VnicID); err != nil {
		return err
	}

	if err := validate.MinLength("vnicId", "body", string(*m.VnicID), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("vnicId", "body", string(*m.VnicID), 255); err != nil {
		return err
	}

	return nil
}
